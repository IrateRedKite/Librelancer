using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using System.Text;
using LibreLancer.GeneratorCommon;
using Microsoft.CodeAnalysis;

namespace LibreLancer.Net.Generator;

public static class RPCSourceWriter
{
    private const string PacketReaderClass = "LibreLancer.Net.Protocol.PacketReader";
    private const string PacketWriterClass = "LibreLancer.Net.Protocol.PacketWriter";
    private const string IPacket = "LibreLancer.Net.Protocol.IPacket";
    private const string TaskCompletionSourceClass = "System.Threading.Tasks.TaskCompletionSource";
    private const string TaskClass = "System.Threading.Tasks.Task";
    private const string IPacketSender = "LibreLancer.Net.IPacketSender";
    private const string NetResponseHandler = "LibreLancer.Net.Protocol.RpcPackets.NetResponseHandler";

    public static void GenerateProtocol(SourceProductionContext context, ImmutableArray<RPCInterface> interfaces)
    {
        var sw = new StringBuilder();
        foreach (var ifc in interfaces)
        {
            sw.AppendLine($"{ifc.Name} {ifc.ContainingNamespace}");
            foreach (var method in ifc.Methods)
            {
                sw.AppendLine($"{method.ReturnType} {method.Name} {method.Channel} {string.Join("$", method.Parameters.Select(x => x.ToString()))}");
            }
        }
        var hash = ProtocolHash.Hash(sw);
        var writer = new TabbedWriter();
        writer.AppendLine("// <auto-generated>");
        writer.AppendLine("// ReSharper disable All");
        writer.AppendLine("namespace LibreLancer.Net.Protocol.RpcPackets;");
        writer.AppendLine("partial class GeneratedProtocol");
        writer.AppendLine("{").Indent();
        writer.AppendLine($"public const string PROTOCOL_HASH=\"{hash}\";");
        writer.AppendLine("static partial void RegisterResponses();");
        writer.AppendLine("public static void RegisterPackets()");
        using (writer.Block())
        {
            foreach (var ifc in interfaces)
            {
                foreach (var method in ifc.Methods)
                {
                    var packetName = $"{ifc.Name}_{method.Name}Packet";
                    writer.AppendLine($"LibreLancer.Net.Protocol.Packets.Register<{packetName}>({packetName}.Read);");
                }
            }
            writer.AppendLine("RegisterResponses();");
        }
        writer.UnIndent().AppendLine("}");
        context.AddSource("GeneratedProtocol.g.cs", writer.ToString());
    }

    public static void GenerateRPCInterface(SourceProductionContext context, RPCInterface src)
    {
        GenerateRemoteImpl(context, src);
        GeneratePackets(context, src);
        GenerateHandler(context, src);
    }

    static string SafeName(RPCType type) =>
        type.FullName(true).Replace("[]", "_ARRAY")
            .Replace(".", "_");

    static void GenerateHandler(SourceProductionContext context, RPCInterface src)
    {
        var writer = new TabbedWriter();
        string packetsName;
        if (src.ContainingNamespace != null)
        {
            packetsName = src.ContainingNamespace + $".RpcPackets.{src.Name}_";
        }
        else
        {
            packetsName = $"RpcPackets.{src.Name}_";
        }
        writer.AppendLine("// <auto-generated>");
        writer.AppendLine("// ReSharper disable All");
        writer.AppendLine("namespace LibreLancer.Net.Protocol.RpcPackets;");
        writer.AppendLine("public partial class GeneratedProtocol");
        writer.AppendLine("{");
        writer.Indent();
        writer.AppendLine($"public static async {TaskClass}<bool> Handle{src.Name}({IPacket} packet, {src.FullName()} instance, {IPacketSender} responder)");
        writer.AppendLine("{").Indent();
        writer.AppendLine("switch (packet)");
        writer.AppendLine("{").Indent();
        int i = 0;
        foreach (var method in src.Methods)
        {
            var pkName = $"_{i++}";
            writer.AppendLine($"case {packetsName}{method.Name}Packet {pkName}:");
            writer.AppendLine("{").Indent();
            bool returnsVoid = method.ReturnType.Name == "void";
            if (!returnsVoid)
                writer.Append("var result = await ");
            writer.Append($"instance.{method.Name}(");
            writer.Append(string.Join(", ", method.Parameters.Select(x => $"{pkName}.{x.Name}")));
            writer.AppendLine(");");
            if (!returnsVoid) {
                writer.AppendLine(
                    $"var response = new LibreLancer.Net.Protocol.RpcPackets.ResponsePacket_{SafeName(method.ReturnType)}();");
                writer.AppendLine($"response.Sequence = {pkName}.Sequence;");
                writer.AppendLine("response.Value = result;");
                writer.AppendLine(
                    "responder.SendPacket(response, LibreLancer.Net.PacketDeliveryMethod.ReliableOrdered);");
            }
            writer.AppendLine("return true;");
            writer.UnIndent().AppendLine("}");
        }

        writer.AppendLine("default:");
        writer.Indent().AppendLine("return false;").UnIndent();
        writer.UnIndent().AppendLine("}");
        writer.UnIndent().AppendLine("}");
        writer.UnIndent();
        writer.AppendLine("}");
        context.AddSource($"GeneratedProtocol_{src.Name}.g.cs", writer.ToString());
    }

    static void GenerateRemoteImpl(SourceProductionContext context, RPCInterface src)
    {
        var writer = new TabbedWriter();
        writer.AppendLine("// <auto-generated>");
        writer.AppendLine("// ReSharper disable All");
        string packetsName;
        if (src.ContainingNamespace != null)
        {
            writer.AppendLine($"namespace {src.ContainingNamespace};");
            packetsName = src.ContainingNamespace + $".RpcPackets.{src.Name}_";
        }
        else
        {
            packetsName = $"RpcPackets.{src.Name}_";
        }

        var newName = "Remote" + src.Name.Substring(1);
        writer.AppendLine($"public partial class {newName}: {src.ContainingNamespace + "." + src.Name}");
        writer.AppendLine("{").Indent();

        writer.AppendLine($"public {IPacketSender} Sender;");
        writer.AppendLine($"public {NetResponseHandler} ResponseHandler;");

        writer.AppendLine($"public {newName}({IPacketSender} sender, {NetResponseHandler} responseHandler)");
        writer.AppendLine("{").Indent();
        writer.AppendLine("Sender = sender;");
        writer.AppendLine("ResponseHandler = responseHandler;");
        writer.UnIndent().AppendLine("}");

        writer.AppendLine($"private void SendPacket({IPacket} packet, int channel)");
        writer.AppendLine("{").Indent();
        writer.AppendLine("Sender.SendPacket(packet, LibreLancer.Net.PacketDeliveryMethod.ReliableOrdered + channel);");
        writer.UnIndent().AppendLine("}");

        foreach (var method in src.Methods)
        {
            bool returnsVoid = method.ReturnType.Name == "void";
            if (method.ReturnType.Name != "void" && !method.ReturnType.Task)
                throw new Exception("Invalid return type for RPC");
            writer.Append($"public {method.ReturnType.FullName(false)} {method.Name}(");
            writer.Append(string.Join(", ", method.Parameters.Select(x =>
                $"{x.Type.FullName(false)} {x.Name}")));
            writer.AppendLine(")");
            writer.AppendLine("{").Indent();
            if (!returnsVoid)
            {
                writer.AppendLine("var Sequence = ResponseHandler.NextSequence();");
                writer.AppendLine(
                    $"var _completion = ResponseHandler.GetCompletionSource_{SafeName(method.ReturnType)}(Sequence);");
            }
            writer.AppendLine($"SendPacket(new {packetsName}{method.Name}Packet() {{").Indent();
            if (!returnsVoid) writer.AppendLine("Sequence = Sequence,");
            foreach (var p in method.Parameters)
                writer.AppendLine($"{p.Name} = {p.Name},");
            writer.UnIndent().AppendLine($"}}, {method.Channel});");
            if (!returnsVoid)
                writer.AppendLine("return _completion.Task;");
            writer.UnIndent().AppendLine("}");

        }
        writer.UnIndent().AppendLine("}");
        context.AddSource(newName + ".g.cs", writer.ToString());
    }

    static void GeneratePackets(SourceProductionContext context, RPCInterface src)
    {
        var writer = new TabbedWriter();
        writer.AppendLine("// <auto-generated>");
        writer.AppendLine("// ReSharper disable All");
        string ns;
        if (src.ContainingNamespace != null)
            ns = src.ContainingNamespace + ".RpcPackets";
        else
            ns = "RpcPackets";
        writer.AppendLine($"namespace {ns};").AppendLine();
        foreach (var method in src.Methods)
        {
            var packetName = $"{src.Name}_{method.Name}Packet";
            writer.AppendLine($"class {packetName} : {IPacket}");
            writer.AppendLine("{").Indent();
            bool returnsVoid = method.ReturnType.Name == "void";
            if (!returnsVoid)
                writer.AppendLine("public int Sequence;");
            foreach (var param in method.Parameters)
                writer.AppendLine($"public {param.Type.FullName(false)} {param.Name};");
            writer.AppendLine($"public static object Read({PacketReaderClass} inPacket)");
            writer.AppendLine("{").Indent();
            writer.AppendLine($"var _packet = new {packetName}();");
            if (!returnsVoid)
                writer.AppendLine("_packet.Sequence = inPacket.GetVariableInt32();");
            foreach (var param in method.Parameters)
                writer.AppendLine(ReadField(param.Name, param.Type));
            writer.AppendLine("return _packet;");
            writer.UnIndent().AppendLine("}");
            writer.AppendLine($"public void WriteContents({PacketWriterClass} outPacket)");
            writer.AppendLine("{").Indent();
            if (!returnsVoid)
                writer.AppendLine("outPacket.PutVariableInt32(Sequence);");
            foreach (var param in method.Parameters)
                writer.AppendLine(PutField(param.Name, param.Type));
            writer.UnIndent().AppendLine("}");
            writer.UnIndent().AppendLine("}");
        }
        context.AddSource(src.Name + "_Packets.g.cs", writer.ToString());
    }

    static string ResponseHandler(RPCType type) => $"GetCompletionSource_{SafeName(type)}";


    public static void GenerateResponses(SourceProductionContext context, ImmutableArray<RPCType> returnValues)
    {
        var hs = new HashSet<RPCType>();
        foreach (var rv in returnValues)
        {
            hs.Add(rv);
        }
        var all = hs.ToArray();
        GenerateResponseHandler(context, all);
        GenerateResponseRegistry(context, all);
        foreach (var rv in all)
        {
            GenerateResponsePacket(context, rv);
        }
    }

    static void GenerateResponseRegistry(SourceProductionContext context, RPCType[] generatedResponses)
    {
        var writer = new TabbedWriter();
        writer.AppendLine("// <auto-generated>");
        writer.AppendLine("// ReSharper disable All");
        writer.AppendLine("namespace LibreLancer.Net.Protocol.RpcPackets;");
        writer.AppendLine("partial class GeneratedProtocol");
        writer.AppendLine("{").Indent();
        writer.AppendLine("static partial void RegisterResponses()");
        using (writer.Block())
        {
            foreach (var type in generatedResponses)
            {
                var packetName = $"LibreLancer.Net.Protocol.RpcPackets.ResponsePacket_{SafeName(type)}";
                writer.AppendLine($"LibreLancer.Net.Protocol.Packets.Register<{packetName}>({packetName}.Read);");
            }
        }
        writer.UnIndent().AppendLine("}");
        context.AddSource("GeneratedProtocol.Responses.g.cs", writer.ToString());
    }

    static void GenerateResponseHandler(SourceProductionContext context, RPCType[] generatedResponses)
    {
        var writer = new TabbedWriter();
        writer.AppendLine("// <auto-generated>");
        writer.AppendLine("// ReSharper disable All");
        writer.AppendLine("namespace LibreLancer.Net.Protocol.RpcPackets;");
        writer.AppendLine("public partial class NetResponseHandler");
        writer.AppendLine("{").Indent();
        writer.AppendLine("int retSeq;");
        writer.AppendLine("private System.Collections.Generic.Dictionary<int, object> completionSources = new ();");
        writer.AppendLine("public int NextSequence() => System.Threading.Interlocked.Increment(ref retSeq);");
        foreach (var type in generatedResponses)
        {
            writer.AppendLine($"public {TaskCompletionSourceClass}<{type.FullName(true)}> {ResponseHandler(type)}(int sequence)");
            writer.AppendLine("{").Indent();
            writer.AppendLine($"var src = new {TaskCompletionSourceClass}<{type.FullName(true)}>();");
            writer.AppendLine("completionSources.Add(sequence, src);");
            writer.AppendLine("return src;");
            writer.UnIndent().AppendLine("}");
        }

        writer.AppendLine($"public bool HandlePacket({IPacket} packet)");
        writer.AppendLine("{").Indent();
        writer.AppendLine("switch (packet)");
        writer.AppendLine("{").Indent();
        int i = 0;
        foreach (var type in generatedResponses)
        {
            var packetName = $"LibreLancer.Net.Protocol.RpcPackets.ResponsePacket_{SafeName(type)}";
            var pkName = $"_{i++}";
            writer.AppendLine($"case {packetName} {pkName}:");
            writer.AppendLine("{").Indent();
            writer.AppendLine($"if (completionSources.TryGetValue({pkName}.Sequence, out object k)) {{").Indent();
            writer.AppendLine($"completionSources.Remove({pkName}.Sequence);");
            writer.AppendLine($"if (k is {TaskCompletionSourceClass}<{type.FullName(true)}> i) i.SetResult({pkName}.Value);");
            writer.UnIndent().AppendLine("}");
            writer.AppendLine("return true;");
            writer.UnIndent().AppendLine("}");
        }
        writer.AppendLine("default:");
        writer.Indent().AppendLine("return false;").UnIndent();
        writer.UnIndent().AppendLine("}");
        writer.UnIndent().AppendLine("}");
        writer.UnIndent().AppendLine("}");
        context.AddSource("NetResponseHandler.g.cs", writer.ToString());
    }


    static string GenerateResponsePacket(SourceProductionContext context, RPCType type)
    {
        var packetName = "ResponsePacket_" + SafeName(type);
        var source = $@"
// <auto-generated>
// ReSharper disable All
namespace LibreLancer.Net.Protocol.RpcPackets;

class {packetName} : {IPacket}
{{
    public int Sequence;
    public {type.FullName(true)} Value;
    public static object Read(PacketReader inPacket)
    {{
        var _packet = new {packetName}();
        _packet.Sequence = inPacket.GetVariableInt32();
        {ReadField("Value", type)}
        return _packet;
    }}
    public void WriteContents(PacketWriter outPacket)
    {{
        outPacket.PutVariableInt32(Sequence);
        {PutField("Value", type)}
    }}
}}";
        context.AddSource(packetName + ".g.cs", source);
        return ("LibreLancer.Net.Protocol.RpcPackets." + packetName);
    }


    private static Dictionary<string, string> typeMethods = new()
    {
        {"System.Int32" , "GetVariableInt32"},
        {"System.Numerics.Quaternion" , "GetQuaternion"},
        {"System.Numerics.Vector3" , "GetVector3"},
        {"System.Byte" , "GetByte"},
        {"System.SByte" , "GetSByte"},
        {"System.Double" , "GetDouble"},
        {"System.Single" , "GetFloat"},
        {"System.Int64" , "GetVariableInt64"},
        {"System.Net.IPEndPoint" , "GetNetEndPoint"},
        {"System.Int16" , "GetShort"},
        {"System.String" , "GetString"},
        {"System.UInt32" , "GetUInt"},
        {"System.UInt64" , "GetVariableUInt64"},
        {"System.UInt16" , "GetUShort"},
        {"System.Boolean" , "GetBool"},
        {"LibreLancer.World.ObjectName", "GetObjectName"}
    };

    private static Dictionary<string, string> encodeMethods = new()
    {
        {"System.Int32", "PutVariableInt32" },
        {"System.Int64", "PutVariableInt64" },
        {"System.UInt64", "PutVariableUInt64" },
    };

    static string ReadField(string name, RPCType type)
    {
        if (type.Array)
        {
            return @$"
            uint __len_{name} = inPacket.GetVariableUInt32();
            if (__len_{name} > 0) {{
                _packet.{name} = new {type.Name}[(int)(__len_{name} - 1)];
                for(int __idx = 0; __idx < _packet.{name}.Length; __idx++)
                    _packet.{name}[__idx] = {ReadScalar(type)};
            }}";
        }
        else
        {
            return $"_packet.{name} = {ReadScalar(type)};";
        }
    }

    static string ReadScalar(RPCType type)
    {
        if (typeMethods.TryGetValue(type.Name, out var method))
            return $"inPacket.{method}()";
        else if (type.Enum)
            return $"({type.Name})inPacket.GetVariableInt32()";
        else
            return $"{type.Name}.Read(inPacket)";
    }

    static string PutField(string name, RPCType type)
    {
        if (type.Array)
        {
            return @$"
            if({name} != null) {{
                outPacket.PutVariableUInt32((uint)({name}.Length + 1));
                for(int __idx = 0; __idx < {name}.Length; __idx++)
                    {PutScalar($"{name}[__idx]", type)}
            }}
            else
                outPacket.PutVariableUInt32(0);
            ";
        }
        else
            return PutScalar(name, type);
    }

    static string PutScalar(string name, RPCType type)
    {
        if (encodeMethods.TryGetValue(type.Name, out var method))
            return $"outPacket.{method}({name});";
        else if (typeMethods.ContainsKey(type.Name))
            return $"outPacket.Put({name});";
        else if (type.Enum)
            return $"outPacket.PutVariableInt32((int){name});";
        else
            return $"{name}.Put(outPacket);";
    }
}
