// <auto-generated/>
// ReSharper disable InconsistentNaming
namespace ImGuiNET;

/// <summary>
/// <para>A key identifier (ImGuiKey_XXX or ImGuiMod_XXX value): can represent Keyboard, Mouse and Gamepad values.</para>
/// <para>All our named keys are &gt;= 512. Keys value 0 to 511 are left unused and were legacy native/opaque key values (&lt; 1.87).</para>
/// <para>Support for legacy keys was completely removed in 1.91.5.</para>
/// <para>Read details about the 1.87+ transition : https://github.com/ocornut/imgui/issues/4921</para>
/// <para>Note that "Keys" related to physical keys and are not the same concept as input "Characters", the later are submitted via io.AddInputCharacter().</para>
/// <para>The keyboard key enum values are named after the keys on a standard US keyboard, and on other keyboard types the keys reported may not match the keycaps.</para>
/// Forward declared enum type ImGuiKey
/// </summary>
public enum ImGuiKey
{
    /// <summary>
    /// Keyboard
    /// </summary>
    None = 0,
    /// <summary>
    /// First valid key value (other than 0)
    /// </summary>
    NamedKey_BEGIN = 512,
    /// <summary>
    /// == ImGuiKey_NamedKey_BEGIN
    /// </summary>
    Tab = 512,
    LeftArrow = 513,
    RightArrow = 514,
    UpArrow = 515,
    DownArrow = 516,
    PageUp = 517,
    PageDown = 518,
    Home = 519,
    End = 520,
    Insert = 521,
    Delete = 522,
    Backspace = 523,
    Space = 524,
    Enter = 525,
    Escape = 526,
    LeftCtrl = 527,
    LeftShift = 528,
    LeftAlt = 529,
    /// <summary>
    /// Also see ImGuiMod_Ctrl, ImGuiMod_Shift, ImGuiMod_Alt, ImGuiMod_Super below!
    /// </summary>
    LeftSuper = 530,
    RightCtrl = 531,
    RightShift = 532,
    RightAlt = 533,
    RightSuper = 534,
    Menu = 535,
    D0 = 536,
    D1 = 537,
    D2 = 538,
    D3 = 539,
    D4 = 540,
    D5 = 541,
    D6 = 542,
    D7 = 543,
    D8 = 544,
    D9 = 545,
    A = 546,
    B = 547,
    C = 548,
    D = 549,
    E = 550,
    F = 551,
    G = 552,
    H = 553,
    I = 554,
    J = 555,
    K = 556,
    L = 557,
    M = 558,
    N = 559,
    O = 560,
    P = 561,
    Q = 562,
    R = 563,
    S = 564,
    T = 565,
    U = 566,
    V = 567,
    W = 568,
    X = 569,
    Y = 570,
    Z = 571,
    F1 = 572,
    F2 = 573,
    F3 = 574,
    F4 = 575,
    F5 = 576,
    F6 = 577,
    F7 = 578,
    F8 = 579,
    F9 = 580,
    F10 = 581,
    F11 = 582,
    F12 = 583,
    F13 = 584,
    F14 = 585,
    F15 = 586,
    F16 = 587,
    F17 = 588,
    F18 = 589,
    F19 = 590,
    F20 = 591,
    F21 = 592,
    F22 = 593,
    F23 = 594,
    F24 = 595,
    /// <summary>
    /// '
    /// </summary>
    Apostrophe = 596,
    /// <summary>
    /// ,
    /// </summary>
    Comma = 597,
    /// <summary>
    /// -
    /// </summary>
    Minus = 598,
    /// <summary>
    /// .
    /// </summary>
    Period = 599,
    /// <summary>
    /// /
    /// </summary>
    Slash = 600,
    /// <summary>
    /// ;
    /// </summary>
    Semicolon = 601,
    /// <summary>
    /// =
    /// </summary>
    Equal = 602,
    /// <summary>
    /// [
    /// </summary>
    LeftBracket = 603,
    /// <summary>
    /// \ (this text inhibit multiline comment caused by backslash)
    /// </summary>
    Backslash = 604,
    /// <summary>
    /// ]
    /// </summary>
    RightBracket = 605,
    /// <summary>
    /// `
    /// </summary>
    GraveAccent = 606,
    CapsLock = 607,
    ScrollLock = 608,
    NumLock = 609,
    PrintScreen = 610,
    Pause = 611,
    Keypad0 = 612,
    Keypad1 = 613,
    Keypad2 = 614,
    Keypad3 = 615,
    Keypad4 = 616,
    Keypad5 = 617,
    Keypad6 = 618,
    Keypad7 = 619,
    Keypad8 = 620,
    Keypad9 = 621,
    KeypadDecimal = 622,
    KeypadDivide = 623,
    KeypadMultiply = 624,
    KeypadSubtract = 625,
    KeypadAdd = 626,
    KeypadEnter = 627,
    KeypadEqual = 628,
    /// <summary>
    /// Available on some keyboard/mouses. Often referred as "Browser Back"
    /// </summary>
    AppBack = 629,
    AppForward = 630,
    /// <summary>
    /// Non-US backslash.
    /// </summary>
    Oem102 = 631,
    /// <summary>
    /// <para>Gamepad</para>
    /// <para>(analog values are 0.0f to 1.0f)</para>
    /// <para>(download controller mapping PNG/PSD at http://dearimgui.com/controls_sheets)</para>
    /// <para>// XBOX        | SWITCH  | PLAYSTA. | -&gt; ACTION</para>
    /// Menu        | +       | Options  |
    /// </summary>
    GamepadStart = 632,
    /// <summary>
    /// View        | -       | Share    |
    /// </summary>
    GamepadBack = 633,
    /// <summary>
    /// X           | Y       | Square   | Tap: Toggle Menu. Hold: Windowing mode (Focus/Move/Resize windows)
    /// </summary>
    GamepadFaceLeft = 634,
    /// <summary>
    /// B           | A       | Circle   | Cancel / Close / Exit
    /// </summary>
    GamepadFaceRight = 635,
    /// <summary>
    /// Y           | X       | Triangle | Text Input / On-screen Keyboard
    /// </summary>
    GamepadFaceUp = 636,
    /// <summary>
    /// A           | B       | Cross    | Activate / Open / Toggle / Tweak
    /// </summary>
    GamepadFaceDown = 637,
    /// <summary>
    /// D-pad Left  | "       | "        | Move / Tweak / Resize Window (in Windowing mode)
    /// </summary>
    GamepadDpadLeft = 638,
    /// <summary>
    /// D-pad Right | "       | "        | Move / Tweak / Resize Window (in Windowing mode)
    /// </summary>
    GamepadDpadRight = 639,
    /// <summary>
    /// D-pad Up    | "       | "        | Move / Tweak / Resize Window (in Windowing mode)
    /// </summary>
    GamepadDpadUp = 640,
    /// <summary>
    /// D-pad Down  | "       | "        | Move / Tweak / Resize Window (in Windowing mode)
    /// </summary>
    GamepadDpadDown = 641,
    /// <summary>
    /// L Bumper    | L       | L1       | Tweak Slower / Focus Previous (in Windowing mode)
    /// </summary>
    GamepadL1 = 642,
    /// <summary>
    /// R Bumper    | R       | R1       | Tweak Faster / Focus Next (in Windowing mode)
    /// </summary>
    GamepadR1 = 643,
    /// <summary>
    /// L Trigger   | ZL      | L2       | [Analog]
    /// </summary>
    GamepadL2 = 644,
    /// <summary>
    /// R Trigger   | ZR      | R2       | [Analog]
    /// </summary>
    GamepadR2 = 645,
    /// <summary>
    /// L Stick     | L3      | L3       |
    /// </summary>
    GamepadL3 = 646,
    /// <summary>
    /// R Stick     | R3      | R3       |
    /// </summary>
    GamepadR3 = 647,
    /// <summary>
    /// |         |          | [Analog] Move Window (in Windowing mode)
    /// </summary>
    GamepadLStickLeft = 648,
    /// <summary>
    /// |         |          | [Analog] Move Window (in Windowing mode)
    /// </summary>
    GamepadLStickRight = 649,
    /// <summary>
    /// |         |          | [Analog] Move Window (in Windowing mode)
    /// </summary>
    GamepadLStickUp = 650,
    /// <summary>
    /// |         |          | [Analog] Move Window (in Windowing mode)
    /// </summary>
    GamepadLStickDown = 651,
    /// <summary>
    /// |         |          | [Analog]
    /// </summary>
    GamepadRStickLeft = 652,
    /// <summary>
    /// |         |          | [Analog]
    /// </summary>
    GamepadRStickRight = 653,
    /// <summary>
    /// |         |          | [Analog]
    /// </summary>
    GamepadRStickUp = 654,
    /// <summary>
    /// |         |          | [Analog]
    /// </summary>
    GamepadRStickDown = 655,
    /// <summary>
    /// <para>Aliases: Mouse Buttons (auto-submitted from AddMouseButtonEvent() calls)</para>
    /// - This is mirroring the data also written to io.MouseDown[], io.MouseWheel, in a format allowing them to be accessed via standard key API.
    /// </summary>
    MouseLeft = 656,
    MouseRight = 657,
    MouseMiddle = 658,
    MouseX1 = 659,
    MouseX2 = 660,
    MouseWheelX = 661,
    MouseWheelY = 662,
    /// <summary>
    /// [Internal] Reserved for mod storage
    /// </summary>
    ReservedForModCtrl = 663,
    ReservedForModShift = 664,
    ReservedForModAlt = 665,
    ReservedForModSuper = 666,
    /// <summary>
    /// [Internal] If you need to iterate all keys (for e.g. an input mapper) you may use ImGuiKey_NamedKey_BEGIN..ImGuiKey_NamedKey_END.
    /// </summary>
    NamedKey_END = 667,
    NamedKey_COUNT = NamedKey_END-NamedKey_BEGIN,
    /// <summary>
    /// <para>Keyboard Modifiers (explicitly submitted by backend via AddKeyEvent() calls)</para>
    /// <para>- Any functions taking a ImGuiKeyChord parameter can binary-or those with regular keys, e.g. Shortcut(ImGuiMod_Ctrl | ImGuiKey_S).</para>
    /// <para>- Those are written back into io.KeyCtrl, io.KeyShift, io.KeyAlt, io.KeySuper for convenience,</para>
    /// <para>but may be accessed via standard key API such as IsKeyPressed(), IsKeyReleased(), querying duration etc.</para>
    /// <para>- Code polling every key (e.g. an interface to detect a key press for input mapping) might want to ignore those</para>
    /// <para>and prefer using the real keys (e.g. ImGuiKey_LeftCtrl, ImGuiKey_RightCtrl instead of ImGuiMod_Ctrl).</para>
    /// <para>- In theory the value of keyboard modifiers should be roughly equivalent to a logical or of the equivalent left/right keys.</para>
    /// <para>In practice: it's complicated; mods are often provided from different sources. Keyboard layout, IME, sticky keys and</para>
    /// <para>backends tend to interfere and break that equivalence. The safer decision is to relay that ambiguity down to the end-user...</para>
    /// - On macOS, we swap Cmd(Super) and Ctrl keys at the time of the io.AddKeyEvent() call.
    /// </summary>
    ImGuiMod_None = 0,
    /// <summary>
    /// Ctrl (non-macOS), Cmd (macOS)
    /// </summary>
    ImGuiMod_Ctrl = 1<<12,
    /// <summary>
    /// Shift
    /// </summary>
    ImGuiMod_Shift = 1<<13,
    /// <summary>
    /// Option/Menu
    /// </summary>
    ImGuiMod_Alt = 1<<14,
    /// <summary>
    /// Windows/Super (non-macOS), Ctrl (macOS)
    /// </summary>
    ImGuiMod_Super = 1<<15,
    /// <summary>
    /// 4-bits
    /// </summary>
    ImGuiMod_Mask_ = 0xF000
}
