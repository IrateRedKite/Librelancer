// <auto-generated/>
// ReSharper disable InconsistentNaming
using System;

namespace ImGuiNET;

/// <summary>
/// Flags for ColorEdit3() / ColorEdit4() / ColorPicker3() / ColorPicker4() / ColorButton()
/// </summary>
[Flags]
public enum ImGuiColorEditFlags
{
    None = 0,
    /// <summary>
    /// // ColorEdit, ColorPicker, ColorButton: ignore Alpha component (will only read 3 components from the input pointer).
    /// </summary>
    NoAlpha = 1<<1,
    /// <summary>
    /// // ColorEdit: disable picker when clicking on color square.
    /// </summary>
    NoPicker = 1<<2,
    /// <summary>
    /// // ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.
    /// </summary>
    NoOptions = 1<<3,
    /// <summary>
    /// // ColorEdit, ColorPicker: disable color square preview next to the inputs. (e.g. to show only the inputs)
    /// </summary>
    NoSmallPreview = 1<<4,
    /// <summary>
    /// // ColorEdit, ColorPicker: disable inputs sliders/text widgets (e.g. to show only the small preview color square).
    /// </summary>
    NoInputs = 1<<5,
    /// <summary>
    /// // ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.
    /// </summary>
    NoTooltip = 1<<6,
    /// <summary>
    /// // ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker).
    /// </summary>
    NoLabel = 1<<7,
    /// <summary>
    /// // ColorPicker: disable bigger color preview on right side of the picker, use small color square preview instead.
    /// </summary>
    NoSidePreview = 1<<8,
    /// <summary>
    /// // ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.
    /// </summary>
    NoDragDrop = 1<<9,
    /// <summary>
    /// // ColorButton: disable border (which is enforced by default)
    /// </summary>
    NoBorder = 1<<10,
    /// <summary>
    /// <para>Alpha preview</para>
    /// <para>- Prior to 1.91.8 (2025/01/21): alpha was made opaque in the preview by default using old name ImGuiColorEditFlags_AlphaPreview.</para>
    /// <para>- We now display the preview as transparent by default. You can use ImGuiColorEditFlags_AlphaOpaque to use old behavior.</para>
    /// <para>- The new flags may be combined better and allow finer controls.</para>
    /// // ColorEdit, ColorPicker, ColorButton: disable alpha in the preview,. Contrary to _NoAlpha it may still be edited when calling ColorEdit4()/ColorPicker4(). For ColorButton() this does the same as _NoAlpha.
    /// </summary>
    AlphaOpaque = 1<<11,
    /// <summary>
    /// // ColorEdit, ColorPicker, ColorButton: disable rendering a checkerboard background behind transparent color.
    /// </summary>
    AlphaNoBg = 1<<12,
    /// <summary>
    /// // ColorEdit, ColorPicker, ColorButton: display half opaque / half transparent preview.
    /// </summary>
    AlphaPreviewHalf = 1<<13,
    /// <summary>
    /// <para>User Options (right-click on widget to change some of them).</para>
    /// // ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.
    /// </summary>
    AlphaBar = 1<<16,
    /// <summary>
    /// // (WIP) ColorEdit: Currently only disable 0.0f..1.0f limits in RGBA edition (note: you probably want to use ImGuiColorEditFlags_Float flag as well).
    /// </summary>
    HDR = 1<<19,
    /// <summary>
    /// [Display]    // ColorEdit: override _display_ type among RGB/HSV/Hex. ColorPicker: select any combination using one or more of RGB/HSV/Hex.
    /// </summary>
    DisplayRGB = 1<<20,
    /// <summary>
    /// [Display]    // "
    /// </summary>
    DisplayHSV = 1<<21,
    /// <summary>
    /// [Display]    // "
    /// </summary>
    DisplayHex = 1<<22,
    /// <summary>
    /// [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.
    /// </summary>
    Uint8 = 1<<23,
    /// <summary>
    /// [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0f..1.0f floats instead of 0..255 integers. No round-trip of value via integers.
    /// </summary>
    Float = 1<<24,
    /// <summary>
    /// [Picker]     // ColorPicker: bar for Hue, rectangle for Sat/Value.
    /// </summary>
    PickerHueBar = 1<<25,
    /// <summary>
    /// [Picker]     // ColorPicker: wheel for Hue, triangle for Sat/Value.
    /// </summary>
    PickerHueWheel = 1<<26,
    /// <summary>
    /// [Input]      // ColorEdit, ColorPicker: input and output data in RGB format.
    /// </summary>
    InputRGB = 1<<27,
    /// <summary>
    /// [Input]      // ColorEdit, ColorPicker: input and output data in HSV format.
    /// </summary>
    InputHSV = 1<<28,
    /// <summary>
    /// <para>Defaults Options. You can set application defaults using SetColorEditOptions(). The intent is that you probably don't want to</para>
    /// override them in most of your calls. Let the user choose via the option menu and/or call SetColorEditOptions() once during startup.
    /// </summary>
    DefaultOptions_ = Uint8 | DisplayRGB | InputRGB | PickerHueBar,
    /// <summary>
    /// [Internal] Masks
    /// </summary>
    AlphaMask_ = NoAlpha | AlphaOpaque | AlphaNoBg | AlphaPreviewHalf,
    DisplayMask_ = DisplayRGB | DisplayHSV | DisplayHex,
    DataTypeMask_ = Uint8 | Float,
    PickerMask_ = PickerHueWheel | PickerHueBar,
    InputMask_ = InputRGB | InputHSV
}
