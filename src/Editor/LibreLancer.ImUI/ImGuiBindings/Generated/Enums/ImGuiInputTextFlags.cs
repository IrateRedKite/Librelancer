// <auto-generated/>
// ReSharper disable InconsistentNaming
using System;

namespace ImGuiNET;

/// <summary>
/// <para>Flags for ImGui::InputText()</para>
/// (Those are per-item flags. There are shared flags in ImGuiIO: io.ConfigInputTextCursorBlink and io.ConfigInputTextEnterKeepActive)
/// </summary>
[Flags]
public enum ImGuiInputTextFlags
{
    /// <summary>
    /// Basic filters (also see ImGuiInputTextFlags_CallbackCharFilter)
    /// </summary>
    None = 0,
    /// <summary>
    /// Allow 0123456789.+-*/
    /// </summary>
    CharsDecimal = 1<<0,
    /// <summary>
    /// Allow 0123456789ABCDEFabcdef
    /// </summary>
    CharsHexadecimal = 1<<1,
    /// <summary>
    /// Allow 0123456789.+-*/eE (Scientific notation input)
    /// </summary>
    CharsScientific = 1<<2,
    /// <summary>
    /// Turn a..z into A..Z
    /// </summary>
    CharsUppercase = 1<<3,
    /// <summary>
    /// Filter out spaces, tabs
    /// </summary>
    CharsNoBlank = 1<<4,
    /// <summary>
    /// <para>Inputs</para>
    /// Pressing TAB input a '\t' character into the text field
    /// </summary>
    AllowTabInput = 1<<5,
    /// <summary>
    /// Return 'true' when Enter is pressed (as opposed to every time the value was modified). Consider using IsItemDeactivatedAfterEdit() instead!
    /// </summary>
    EnterReturnsTrue = 1<<6,
    /// <summary>
    /// Escape key clears content if not empty, and deactivate otherwise (contrast to default behavior of Escape to revert)
    /// </summary>
    EscapeClearsAll = 1<<7,
    /// <summary>
    /// In multi-line mode, validate with Enter, add new line with Ctrl+Enter (default is opposite: validate with Ctrl+Enter, add line with Enter).
    /// </summary>
    CtrlEnterForNewLine = 1<<8,
    /// <summary>
    /// <para>Other options</para>
    /// Read-only mode
    /// </summary>
    ReadOnly = 1<<9,
    /// <summary>
    /// Password mode, display all characters as '*', disable copy
    /// </summary>
    Password = 1<<10,
    /// <summary>
    /// Overwrite mode
    /// </summary>
    AlwaysOverwrite = 1<<11,
    /// <summary>
    /// Select entire text when first taking mouse focus
    /// </summary>
    AutoSelectAll = 1<<12,
    /// <summary>
    /// InputFloat(), InputInt(), InputScalar() etc. only: parse empty string as zero value.
    /// </summary>
    ParseEmptyRefVal = 1<<13,
    /// <summary>
    /// InputFloat(), InputInt(), InputScalar() etc. only: when value is zero, do not display it. Generally used with ImGuiInputTextFlags_ParseEmptyRefVal.
    /// </summary>
    DisplayEmptyRefVal = 1<<14,
    /// <summary>
    /// Disable following the cursor horizontally
    /// </summary>
    NoHorizontalScroll = 1<<15,
    /// <summary>
    /// Disable undo/redo. Note that input text owns the text data while active, if you want to provide your own undo/redo stack you need e.g. to call ClearActiveID().
    /// </summary>
    NoUndoRedo = 1<<16,
    /// <summary>
    /// <para>Elide display / Alignment</para>
    /// When text doesn't fit, elide left side to ensure right side stays visible. Useful for path/filenames. Single-line only!
    /// </summary>
    ElideLeft = 1<<17,
    /// <summary>
    /// <para>Callback features</para>
    /// Callback on pressing TAB (for completion handling)
    /// </summary>
    CallbackCompletion = 1<<18,
    /// <summary>
    /// Callback on pressing Up/Down arrows (for history handling)
    /// </summary>
    CallbackHistory = 1<<19,
    /// <summary>
    /// Callback on each iteration. User code may query cursor position, modify text buffer.
    /// </summary>
    CallbackAlways = 1<<20,
    /// <summary>
    /// Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.
    /// </summary>
    CallbackCharFilter = 1<<21,
    /// <summary>
    /// Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow. Notify when the string wants to be resized (for string types which hold a cache of their Size). You will be provided a new BufSize in the callback and NEED to honor it. (see misc/cpp/imgui_stdlib.h for an example of using this)
    /// </summary>
    CallbackResize = 1<<22,
    /// <summary>
    /// Callback on any edit. Note that InputText() already returns true on edit + you can always use IsItemEdited(). The callback is useful to manipulate the underlying buffer while focus is active.
    /// </summary>
    CallbackEdit = 1<<23
}
