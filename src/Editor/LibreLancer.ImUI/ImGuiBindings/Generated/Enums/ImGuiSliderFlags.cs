// <auto-generated/>
// ReSharper disable InconsistentNaming
using System;

namespace ImGuiNET;

/// <summary>
/// <para>Flags for DragFloat(), DragInt(), SliderFloat(), SliderInt() etc.</para>
/// <para>We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them.</para>
/// (Those are per-item flags. There is shared behavior flag too: ImGuiIO: io.ConfigDragClickToInputText)
/// </summary>
[Flags]
public enum ImGuiSliderFlags
{
    None = 0,
    /// <summary>
    /// Make the widget logarithmic (linear otherwise). Consider using ImGuiSliderFlags_NoRoundToFormat with this if using a format-string with small amount of digits.
    /// </summary>
    Logarithmic = 1<<5,
    /// <summary>
    /// Disable rounding underlying value to match precision of the display format string (e.g. %.3f values are rounded to those 3 digits).
    /// </summary>
    NoRoundToFormat = 1<<6,
    /// <summary>
    /// Disable CTRL+Click or Enter key allowing to input text directly into the widget.
    /// </summary>
    NoInput = 1<<7,
    /// <summary>
    /// Enable wrapping around from max to min and from min to max. Only supported by DragXXX() functions for now.
    /// </summary>
    WrapAround = 1<<8,
    /// <summary>
    /// Clamp value to min/max bounds when input manually with CTRL+Click. By default CTRL+Click allows going out of bounds.
    /// </summary>
    ClampOnInput = 1<<9,
    /// <summary>
    /// Clamp even if min==max==0.0f. Otherwise due to legacy reason DragXXX functions don't clamp with those values. When your clamping limits are dynamic you almost always want to use it.
    /// </summary>
    ClampZeroRange = 1<<10,
    /// <summary>
    /// Disable keyboard modifiers altering tweak speed. Useful if you want to alter tweak speed yourself based on your own logic.
    /// </summary>
    NoSpeedTweaks = 1<<11,
    AlwaysClamp = ClampOnInput | ClampZeroRange,
    /// <summary>
    /// [Internal] We treat using those bits as being potentially a 'float power' argument from the previous API that has got miscast to this enum, and will trigger an assert if needed.
    /// </summary>
    InvalidMask_ = 0x7000000F
}
