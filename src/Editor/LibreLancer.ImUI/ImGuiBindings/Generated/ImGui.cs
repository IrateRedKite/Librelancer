// <auto-generated/>
// ReSharper disable InconsistentNaming
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace ImGuiNET;

public static unsafe partial class ImGui
{
    /// <summary>
    /// <para>Context creation and access</para>
    /// <para>- Each context create its own ImFontAtlas by default. You may instance one yourself and pass it to CreateContext() to share a font atlas between contexts.</para>
    /// <para>- DLL users: heaps and globals are not shared across DLL boundaries! You will need to call SetCurrentContext() + SetAllocatorFunctions()</para>
    /// for each static/DLL boundary you are calling from. Read "Context and Memory Allocators" section of imgui.cpp for details.
    /// </summary>
    public static ImGuiContextPtr CreateContext(ImFontAtlasPtr shared_font_atlas = null)
    {
        return ImGuiContextPtr.Create(ImGuiNative.ImGui_CreateContext(ImFontAtlasPtr.GetHandle(shared_font_atlas)));
    }
    /// <summary>
    /// NULL = destroy current context
    /// </summary>
    public static void DestroyContext(ImGuiContextPtr ctx = null)
    {
        ImGuiNative.ImGui_DestroyContext(ImGuiContextPtr.GetHandle(ctx));
    }
    public static ImGuiContextPtr GetCurrentContext()
    {
        return ImGuiContextPtr.Create(ImGuiNative.ImGui_GetCurrentContext());
    }
    public static void SetCurrentContext(ImGuiContextPtr ctx)
    {
        ImGuiNative.ImGui_SetCurrentContext(ImGuiContextPtr.GetHandle(ctx));
    }
    /// <summary>
    /// <para>Main</para>
    /// access the ImGuiIO structure (mouse/keyboard/gamepad inputs, time, various configuration options/flags)
    /// </summary>
    public static ImGuiIOPtr GetIO()
    {
        return ImGuiIOPtr.Create(ImGuiNative.ImGui_GetIO());
    }
    /// <summary>
    /// access the ImGuiPlatformIO structure (mostly hooks/functions to connect to platform/renderer and OS Clipboard, IME etc.)
    /// </summary>
    public static ImGuiPlatformIOPtr GetPlatformIO()
    {
        return ImGuiPlatformIOPtr.Create(ImGuiNative.ImGui_GetPlatformIO());
    }
    /// <summary>
    /// access the Style structure (colors, sizes). Always use PushStyleColor(), PushStyleVar() to modify style mid-frame!
    /// </summary>
    public static ImGuiStylePtr GetStyle()
    {
        return ImGuiStylePtr.Create(ImGuiNative.ImGui_GetStyle());
    }
    /// <summary>
    /// start a new Dear ImGui frame, you can submit any command from this point until Render()/EndFrame().
    /// </summary>
    public static void NewFrame()
    {
        ImGuiNative.ImGui_NewFrame();
    }
    /// <summary>
    /// ends the Dear ImGui frame. automatically called by Render(). If you don't need to render data (skipping rendering) you may call EndFrame() without Render()... but you'll have wasted CPU already! If you don't need to render, better to not create any windows and not call NewFrame() at all!
    /// </summary>
    public static void EndFrame()
    {
        ImGuiNative.ImGui_EndFrame();
    }
    /// <summary>
    /// ends the Dear ImGui frame, finalize the draw data. You can then get call GetDrawData().
    /// </summary>
    public static void Render()
    {
        ImGuiNative.ImGui_Render();
    }
    /// <summary>
    /// valid after Render() and until the next call to NewFrame(). Call ImGui_ImplXXXX_RenderDrawData() function in your Renderer Backend to render.
    /// </summary>
    public static ImDrawDataPtr GetDrawData()
    {
        return ImDrawDataPtr.Create(ImGuiNative.ImGui_GetDrawData());
    }
    /// <summary>
    /// <para>Demo, Debug, Information</para>
    /// create Demo window. demonstrate most ImGui features. call this to learn about the library! try to make it always available in your application!
    /// </summary>
    public static void ShowDemoWindow()
    {
        ImGuiNative.ImGui_ShowDemoWindow(null);
    }
    /// <summary>
    /// <para>Demo, Debug, Information</para>
    /// create Demo window. demonstrate most ImGui features. call this to learn about the library! try to make it always available in your application!
    /// </summary>
    public static void ShowDemoWindow(ref bool p_open)
    {
        byte __p_open_v = p_open ? (byte)1 : (byte)0;
        try
        {
            ImGuiNative.ImGui_ShowDemoWindow(&__p_open_v);
        }
        finally
        {
            p_open = __p_open_v != 0;
        }
    }
    /// <summary>
    /// create Metrics/Debugger window. display Dear ImGui internals: windows, draw commands, various internal state, etc.
    /// </summary>
    public static void ShowMetricsWindow()
    {
        ImGuiNative.ImGui_ShowMetricsWindow(null);
    }
    /// <summary>
    /// create Metrics/Debugger window. display Dear ImGui internals: windows, draw commands, various internal state, etc.
    /// </summary>
    public static void ShowMetricsWindow(ref bool p_open)
    {
        byte __p_open_v = p_open ? (byte)1 : (byte)0;
        try
        {
            ImGuiNative.ImGui_ShowMetricsWindow(&__p_open_v);
        }
        finally
        {
            p_open = __p_open_v != 0;
        }
    }
    /// <summary>
    /// create Debug Log window. display a simplified log of important dear imgui events.
    /// </summary>
    public static void ShowDebugLogWindow()
    {
        ImGuiNative.ImGui_ShowDebugLogWindow(null);
    }
    /// <summary>
    /// create Debug Log window. display a simplified log of important dear imgui events.
    /// </summary>
    public static void ShowDebugLogWindow(ref bool p_open)
    {
        byte __p_open_v = p_open ? (byte)1 : (byte)0;
        try
        {
            ImGuiNative.ImGui_ShowDebugLogWindow(&__p_open_v);
        }
        finally
        {
            p_open = __p_open_v != 0;
        }
    }
    /// <summary>
    /// create Stack Tool window. hover items with mouse to query information about the source of their unique ID.
    /// </summary>
    public static void ShowIDStackToolWindow()
    {
        ImGuiNative.ImGui_ShowIDStackToolWindow(null);
    }
    /// <summary>
    /// create Stack Tool window. hover items with mouse to query information about the source of their unique ID.
    /// </summary>
    public static void ShowIDStackToolWindow(ref bool p_open)
    {
        byte __p_open_v = p_open ? (byte)1 : (byte)0;
        try
        {
            ImGuiNative.ImGui_ShowIDStackToolWindow(&__p_open_v);
        }
        finally
        {
            p_open = __p_open_v != 0;
        }
    }
    /// <summary>
    /// create About window. display Dear ImGui version, credits and build/system information.
    /// </summary>
    public static void ShowAboutWindow()
    {
        ImGuiNative.ImGui_ShowAboutWindow(null);
    }
    /// <summary>
    /// create About window. display Dear ImGui version, credits and build/system information.
    /// </summary>
    public static void ShowAboutWindow(ref bool p_open)
    {
        byte __p_open_v = p_open ? (byte)1 : (byte)0;
        try
        {
            ImGuiNative.ImGui_ShowAboutWindow(&__p_open_v);
        }
        finally
        {
            p_open = __p_open_v != 0;
        }
    }
    /// <summary>
    /// add style editor block (not a window). you can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it uses the default style)
    /// </summary>
    public static void ShowStyleEditor(ImGuiStylePtr reference = null)
    {
        ImGuiNative.ImGui_ShowStyleEditor(ImGuiStylePtr.GetHandle(reference));
    }
    /// <summary>
    /// add style selector block (not a window), essentially a combo listing the default styles.
    /// </summary>
    public static bool ShowStyleSelector(string label)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        return ImGuiNative.ImGui_ShowStyleSelector(__utf8z_label.Pointer) != 0;
    }
    /// <summary>
    /// add font selector block (not a window), essentially a combo listing the loaded fonts.
    /// </summary>
    public static void ShowFontSelector(string label)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        ImGuiNative.ImGui_ShowFontSelector(__utf8z_label.Pointer);
    }
    /// <summary>
    /// add basic help/info block (not a window): how to manipulate ImGui as an end-user (mouse/keyboard controls).
    /// </summary>
    public static void ShowUserGuide()
    {
        ImGuiNative.ImGui_ShowUserGuide();
    }
    /// <summary>
    /// get the compiled version string e.g. "1.80 WIP" (essentially the value for IMGUI_VERSION from the compiled version of imgui.cpp)
    /// </summary>
    public static string GetVersion()
    {
        return Marshal.PtrToStringUTF8((IntPtr)ImGuiNative.ImGui_GetVersion());
    }
    /// <summary>
    /// <para>Styles</para>
    /// new, recommended style (default)
    /// </summary>
    public static void StyleColorsDark(ImGuiStylePtr dst = null)
    {
        ImGuiNative.ImGui_StyleColorsDark(ImGuiStylePtr.GetHandle(dst));
    }
    /// <summary>
    /// best used with borders and a custom, thicker font
    /// </summary>
    public static void StyleColorsLight(ImGuiStylePtr dst = null)
    {
        ImGuiNative.ImGui_StyleColorsLight(ImGuiStylePtr.GetHandle(dst));
    }
    /// <summary>
    /// classic imgui style
    /// </summary>
    public static void StyleColorsClassic(ImGuiStylePtr dst = null)
    {
        ImGuiNative.ImGui_StyleColorsClassic(ImGuiStylePtr.GetHandle(dst));
    }
    /// <summary>
    /// <para>Windows</para>
    /// <para>- Begin() = push window to the stack and start appending to it. End() = pop window from the stack.</para>
    /// <para>- Passing 'bool* p_open != NULL' shows a window-closing widget in the upper-right corner of the window,</para>
    /// <para>which clicking will set the boolean to false when clicked.</para>
    /// <para>- You may append multiple times to the same window during the same frame by calling Begin()/End() pairs multiple times.</para>
    /// <para>Some information such as 'flags' or 'p_open' will only be considered by the first call to Begin().</para>
    /// <para>- Begin() return false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting</para>
    /// <para>anything to the window. Always call a matching End() for each Begin() call, regardless of its return value!</para>
    /// <para>[Important: due to legacy reason, Begin/End and BeginChild/EndChild are inconsistent with all other functions</para>
    /// <para>such as BeginMenu/EndMenu, BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding</para>
    /// <para>BeginXXX function returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]</para>
    /// - Note that the bottom of window stack always contains a window called "Debug".
    /// </summary>
    public static bool Begin(string name)
    {
        byte* __bytes_name = stackalloc byte[128];
        using var __utf8z_name = new UTF8ZHelper(__bytes_name, 128, name);
        return ImGuiNative.ImGui_Begin(__utf8z_name.Pointer, null, (ImGuiWindowFlags)0) != 0;
    }
    /// <summary>
    /// <para>Windows</para>
    /// <para>- Begin() = push window to the stack and start appending to it. End() = pop window from the stack.</para>
    /// <para>- Passing 'bool* p_open != NULL' shows a window-closing widget in the upper-right corner of the window,</para>
    /// <para>which clicking will set the boolean to false when clicked.</para>
    /// <para>- You may append multiple times to the same window during the same frame by calling Begin()/End() pairs multiple times.</para>
    /// <para>Some information such as 'flags' or 'p_open' will only be considered by the first call to Begin().</para>
    /// <para>- Begin() return false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting</para>
    /// <para>anything to the window. Always call a matching End() for each Begin() call, regardless of its return value!</para>
    /// <para>[Important: due to legacy reason, Begin/End and BeginChild/EndChild are inconsistent with all other functions</para>
    /// <para>such as BeginMenu/EndMenu, BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding</para>
    /// <para>BeginXXX function returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]</para>
    /// - Note that the bottom of window stack always contains a window called "Debug".
    /// </summary>
    public static bool Begin(string name, ref bool p_open)
    {
        byte* __bytes_name = stackalloc byte[128];
        using var __utf8z_name = new UTF8ZHelper(__bytes_name, 128, name);
        byte __p_open_v = p_open ? (byte)1 : (byte)0;
        try
        {
            return ImGuiNative.ImGui_Begin(__utf8z_name.Pointer, &__p_open_v, (ImGuiWindowFlags)0) != 0;
        }
        finally
        {
            p_open = __p_open_v != 0;
        }
    }
    /// <summary>
    /// <para>Windows</para>
    /// <para>- Begin() = push window to the stack and start appending to it. End() = pop window from the stack.</para>
    /// <para>- Passing 'bool* p_open != NULL' shows a window-closing widget in the upper-right corner of the window,</para>
    /// <para>which clicking will set the boolean to false when clicked.</para>
    /// <para>- You may append multiple times to the same window during the same frame by calling Begin()/End() pairs multiple times.</para>
    /// <para>Some information such as 'flags' or 'p_open' will only be considered by the first call to Begin().</para>
    /// <para>- Begin() return false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting</para>
    /// <para>anything to the window. Always call a matching End() for each Begin() call, regardless of its return value!</para>
    /// <para>[Important: due to legacy reason, Begin/End and BeginChild/EndChild are inconsistent with all other functions</para>
    /// <para>such as BeginMenu/EndMenu, BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding</para>
    /// <para>BeginXXX function returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]</para>
    /// - Note that the bottom of window stack always contains a window called "Debug".
    /// </summary>
    public static bool Begin(string name, ref bool p_open, ImGuiWindowFlags flags)
    {
        byte* __bytes_name = stackalloc byte[128];
        using var __utf8z_name = new UTF8ZHelper(__bytes_name, 128, name);
        byte __p_open_v = p_open ? (byte)1 : (byte)0;
        try
        {
            return ImGuiNative.ImGui_Begin(__utf8z_name.Pointer, &__p_open_v, flags) != 0;
        }
        finally
        {
            p_open = __p_open_v != 0;
        }
    }
    public static void End()
    {
        ImGuiNative.ImGui_End();
    }
    /// <summary>
    /// <para>Child Windows</para>
    /// <para>- Use child windows to begin into a self-contained independent scrolling/clipping regions within a host window. Child windows can embed their own child.</para>
    /// <para>- Before 1.90 (November 2023), the "ImGuiChildFlags child_flags = 0" parameter was "bool border = false".</para>
    /// <para>This API is backward compatible with old code, as we guarantee that ImGuiChildFlags_Borders == true.</para>
    /// <para>Consider updating your old code:</para>
    /// <para>BeginChild("Name", size, false)   -&gt; Begin("Name", size, 0); or Begin("Name", size, ImGuiChildFlags_None);</para>
    /// <para>BeginChild("Name", size, true)    -&gt; Begin("Name", size, ImGuiChildFlags_Borders);</para>
    /// <para>- Manual sizing (each axis can use a different setting e.g. ImVec2(0.0f, 400.0f)):</para>
    /// <para>== 0.0f: use remaining parent window size for this axis.</para>
    /// <para>&gt; 0.0f: use specified size for this axis.</para>
    /// <para>&lt; 0.0f: right/bottom-align to specified distance from available content boundaries.</para>
    /// <para>- Specifying ImGuiChildFlags_AutoResizeX or ImGuiChildFlags_AutoResizeY makes the sizing automatic based on child contents.</para>
    /// <para>Combining both ImGuiChildFlags_AutoResizeX _and_ ImGuiChildFlags_AutoResizeY defeats purpose of a scrolling region and is NOT recommended.</para>
    /// <para>- BeginChild() returns false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting</para>
    /// <para>anything to the window. Always call a matching EndChild() for each BeginChild() call, regardless of its return value.</para>
    /// <para>[Important: due to legacy reason, Begin/End and BeginChild/EndChild are inconsistent with all other functions</para>
    /// <para>such as BeginMenu/EndMenu, BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding</para>
    /// BeginXXX function returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]
    /// </summary>
    public static bool BeginChild(string str_id, System.Numerics.Vector2 size = default, ImGuiChildFlags child_flags = (ImGuiChildFlags)0, ImGuiWindowFlags window_flags = (ImGuiWindowFlags)0)
    {
        byte* __bytes_str_id = stackalloc byte[128];
        using var __utf8z_str_id = new UTF8ZHelper(__bytes_str_id, 128, str_id);
        return ImGuiNative.ImGui_BeginChild(__utf8z_str_id.Pointer, size, child_flags, window_flags) != 0;
    }
    public static bool BeginChild(uint id, System.Numerics.Vector2 size = default, ImGuiChildFlags child_flags = (ImGuiChildFlags)0, ImGuiWindowFlags window_flags = (ImGuiWindowFlags)0)
    {
        return ImGuiNative.ImGui_BeginChildID(id, size, child_flags, window_flags) != 0;
    }
    public static void EndChild()
    {
        ImGuiNative.ImGui_EndChild();
    }
    /// <summary>
    /// <para>Windows Utilities</para>
    /// - 'current window' = the window we are appending into while inside a Begin()/End() block. 'next window' = next window we will Begin() into.
    /// </summary>
    public static bool IsWindowAppearing()
    {
        return ImGuiNative.ImGui_IsWindowAppearing() != 0;
    }
    public static bool IsWindowCollapsed()
    {
        return ImGuiNative.ImGui_IsWindowCollapsed() != 0;
    }
    /// <summary>
    /// is current window focused? or its root/child, depending on flags. see flags for options.
    /// </summary>
    public static bool IsWindowFocused(ImGuiFocusedFlags flags = (ImGuiFocusedFlags)0)
    {
        return ImGuiNative.ImGui_IsWindowFocused(flags) != 0;
    }
    /// <summary>
    /// is current window hovered and hoverable (e.g. not blocked by a popup/modal)? See ImGuiHoveredFlags_ for options. IMPORTANT: If you are trying to check whether your mouse should be dispatched to Dear ImGui or to your underlying app, you should not use this function! Use the 'io.WantCaptureMouse' boolean for that! Refer to FAQ entry "How can I tell whether to dispatch mouse/keyboard to Dear ImGui or my application?" for details.
    /// </summary>
    public static bool IsWindowHovered(ImGuiHoveredFlags flags = (ImGuiHoveredFlags)0)
    {
        return ImGuiNative.ImGui_IsWindowHovered(flags) != 0;
    }
    /// <summary>
    /// get draw list associated to the current window, to append your own drawing primitives
    /// </summary>
    public static ImDrawListPtr GetWindowDrawList()
    {
        return ImDrawListPtr.Create(ImGuiNative.ImGui_GetWindowDrawList());
    }
    /// <summary>
    /// get current window position in screen space (IT IS UNLIKELY YOU EVER NEED TO USE THIS. Consider always using GetCursorScreenPos() and GetContentRegionAvail() instead)
    /// </summary>
    public static System.Numerics.Vector2 GetWindowPos()
    {
        return ImGuiNative.ImGui_GetWindowPos();
    }
    /// <summary>
    /// get current window size (IT IS UNLIKELY YOU EVER NEED TO USE THIS. Consider always using GetCursorScreenPos() and GetContentRegionAvail() instead)
    /// </summary>
    public static System.Numerics.Vector2 GetWindowSize()
    {
        return ImGuiNative.ImGui_GetWindowSize();
    }
    /// <summary>
    /// get current window width (IT IS UNLIKELY YOU EVER NEED TO USE THIS). Shortcut for GetWindowSize().x.
    /// </summary>
    public static float GetWindowWidth()
    {
        return ImGuiNative.ImGui_GetWindowWidth();
    }
    /// <summary>
    /// get current window height (IT IS UNLIKELY YOU EVER NEED TO USE THIS). Shortcut for GetWindowSize().y.
    /// </summary>
    public static float GetWindowHeight()
    {
        return ImGuiNative.ImGui_GetWindowHeight();
    }
    /// <summary>
    /// <para>Window manipulation</para>
    /// <para>- Prefer using SetNextXXX functions (before Begin) rather that SetXXX functions (after Begin).</para>
    /// set next window position. call before Begin(). use pivot=(0.5f,0.5f) to center on given point, etc.
    /// </summary>
    public static void SetNextWindowPos(System.Numerics.Vector2 pos, ImGuiCond cond = (ImGuiCond)0, System.Numerics.Vector2 pivot = default)
    {
        ImGuiNative.ImGui_SetNextWindowPos(pos, cond, pivot);
    }
    /// <summary>
    /// set next window size. set axis to 0.0f to force an auto-fit on this axis. call before Begin()
    /// </summary>
    public static void SetNextWindowSize(System.Numerics.Vector2 size, ImGuiCond cond = (ImGuiCond)0)
    {
        ImGuiNative.ImGui_SetNextWindowSize(size, cond);
    }
    /// <summary>
    /// set next window size limits. use 0.0f or FLT_MAX if you don't want limits. Use -1 for both min and max of same axis to preserve current size (which itself is a constraint). Use callback to apply non-trivial programmatic constraints.
    /// </summary>
    public static void SetNextWindowSizeConstraints(System.Numerics.Vector2 size_min, System.Numerics.Vector2 size_max, ImGuiSizeCallback custom_callback = null, IntPtr custom_callback_data = 0)
    {
        var __custom_callback_p = custom_callback == null ? null : (delegate* unmanaged<ImGuiSizeCallbackData*, void>)Marshal.GetFunctionPointerForDelegate(custom_callback);
        try
        {
            ImGuiNative.ImGui_SetNextWindowSizeConstraints(size_min, size_max, __custom_callback_p, custom_callback_data);
        }
        finally
        {
            GC.KeepAlive(custom_callback);
        }
    }
    /// <summary>
    /// set next window content size (~ scrollable client area, which enforce the range of scrollbars). Not including window decorations (title bar, menu bar, etc.) nor WindowPadding. set an axis to 0.0f to leave it automatic. call before Begin()
    /// </summary>
    public static void SetNextWindowContentSize(System.Numerics.Vector2 size)
    {
        ImGuiNative.ImGui_SetNextWindowContentSize(size);
    }
    /// <summary>
    /// set next window collapsed state. call before Begin()
    /// </summary>
    public static void SetNextWindowCollapsed(bool collapsed, ImGuiCond cond = (ImGuiCond)0)
    {
        ImGuiNative.ImGui_SetNextWindowCollapsed(collapsed ? (byte)1 : (byte)0, cond);
    }
    /// <summary>
    /// set next window to be focused / top-most. call before Begin()
    /// </summary>
    public static void SetNextWindowFocus()
    {
        ImGuiNative.ImGui_SetNextWindowFocus();
    }
    /// <summary>
    /// set next window scrolling value (use &lt; 0.0f to not affect a given axis).
    /// </summary>
    public static void SetNextWindowScroll(System.Numerics.Vector2 scroll)
    {
        ImGuiNative.ImGui_SetNextWindowScroll(scroll);
    }
    /// <summary>
    /// set next window background color alpha. helper to easily override the Alpha component of ImGuiCol_WindowBg/ChildBg/PopupBg. you may also use ImGuiWindowFlags_NoBackground.
    /// </summary>
    public static void SetNextWindowBgAlpha(float alpha)
    {
        ImGuiNative.ImGui_SetNextWindowBgAlpha(alpha);
    }
    /// <summary>
    /// (not recommended) set current window position - call within Begin()/End(). prefer using SetNextWindowPos(), as this may incur tearing and side-effects.
    /// </summary>
    public static void SetWindowPos(System.Numerics.Vector2 pos, ImGuiCond cond = (ImGuiCond)0)
    {
        ImGuiNative.ImGui_SetWindowPos(pos, cond);
    }
    /// <summary>
    /// (not recommended) set current window size - call within Begin()/End(). set to ImVec2(0, 0) to force an auto-fit. prefer using SetNextWindowSize(), as this may incur tearing and minor side-effects.
    /// </summary>
    public static void SetWindowSize(System.Numerics.Vector2 size, ImGuiCond cond = (ImGuiCond)0)
    {
        ImGuiNative.ImGui_SetWindowSize(size, cond);
    }
    /// <summary>
    /// (not recommended) set current window collapsed state. prefer using SetNextWindowCollapsed().
    /// </summary>
    public static void SetWindowCollapsed(bool collapsed, ImGuiCond cond = (ImGuiCond)0)
    {
        ImGuiNative.ImGui_SetWindowCollapsed(collapsed ? (byte)1 : (byte)0, cond);
    }
    /// <summary>
    /// (not recommended) set current window to be focused / top-most. prefer using SetNextWindowFocus().
    /// </summary>
    public static void SetWindowFocus()
    {
        ImGuiNative.ImGui_SetWindowFocus();
    }
    /// <summary>
    /// set named window position.
    /// </summary>
    public static void SetWindowPos(string name, System.Numerics.Vector2 pos, ImGuiCond cond = (ImGuiCond)0)
    {
        byte* __bytes_name = stackalloc byte[128];
        using var __utf8z_name = new UTF8ZHelper(__bytes_name, 128, name);
        ImGuiNative.ImGui_SetWindowPosStr(__utf8z_name.Pointer, pos, cond);
    }
    /// <summary>
    /// set named window size. set axis to 0.0f to force an auto-fit on this axis.
    /// </summary>
    public static void SetWindowSize(string name, System.Numerics.Vector2 size, ImGuiCond cond = (ImGuiCond)0)
    {
        byte* __bytes_name = stackalloc byte[128];
        using var __utf8z_name = new UTF8ZHelper(__bytes_name, 128, name);
        ImGuiNative.ImGui_SetWindowSizeStr(__utf8z_name.Pointer, size, cond);
    }
    /// <summary>
    /// set named window collapsed state
    /// </summary>
    public static void SetWindowCollapsed(string name, bool collapsed, ImGuiCond cond = (ImGuiCond)0)
    {
        byte* __bytes_name = stackalloc byte[128];
        using var __utf8z_name = new UTF8ZHelper(__bytes_name, 128, name);
        ImGuiNative.ImGui_SetWindowCollapsedStr(__utf8z_name.Pointer, collapsed ? (byte)1 : (byte)0, cond);
    }
    /// <summary>
    /// set named window to be focused / top-most. use NULL to remove focus.
    /// </summary>
    public static void SetWindowFocus(string name)
    {
        byte* __bytes_name = stackalloc byte[128];
        using var __utf8z_name = new UTF8ZHelper(__bytes_name, 128, name);
        ImGuiNative.ImGui_SetWindowFocusStr(__utf8z_name.Pointer);
    }
    /// <summary>
    /// <para>Windows Scrolling</para>
    /// <para>- Any change of Scroll will be applied at the beginning of next frame in the first call to Begin().</para>
    /// <para>- You may instead use SetNextWindowScroll() prior to calling Begin() to avoid this delay, as an alternative to using SetScrollX()/SetScrollY().</para>
    /// get scrolling amount [0 .. GetScrollMaxX()]
    /// </summary>
    public static float GetScrollX()
    {
        return ImGuiNative.ImGui_GetScrollX();
    }
    /// <summary>
    /// get scrolling amount [0 .. GetScrollMaxY()]
    /// </summary>
    public static float GetScrollY()
    {
        return ImGuiNative.ImGui_GetScrollY();
    }
    /// <summary>
    /// set scrolling amount [0 .. GetScrollMaxX()]
    /// </summary>
    public static void SetScrollX(float scroll_x)
    {
        ImGuiNative.ImGui_SetScrollX(scroll_x);
    }
    /// <summary>
    /// set scrolling amount [0 .. GetScrollMaxY()]
    /// </summary>
    public static void SetScrollY(float scroll_y)
    {
        ImGuiNative.ImGui_SetScrollY(scroll_y);
    }
    /// <summary>
    /// get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x
    /// </summary>
    public static float GetScrollMaxX()
    {
        return ImGuiNative.ImGui_GetScrollMaxX();
    }
    /// <summary>
    /// get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y
    /// </summary>
    public static float GetScrollMaxY()
    {
        return ImGuiNative.ImGui_GetScrollMaxY();
    }
    /// <summary>
    /// adjust scrolling amount to make current cursor position visible. center_x_ratio=0.0: left, 0.5: center, 1.0: right. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead.
    /// </summary>
    public static void SetScrollHereX(float center_x_ratio = 0.5f)
    {
        ImGuiNative.ImGui_SetScrollHereX(center_x_ratio);
    }
    /// <summary>
    /// adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead.
    /// </summary>
    public static void SetScrollHereY(float center_y_ratio = 0.5f)
    {
        ImGuiNative.ImGui_SetScrollHereY(center_y_ratio);
    }
    /// <summary>
    /// adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.
    /// </summary>
    public static void SetScrollFromPosX(float local_x, float center_x_ratio = 0.5f)
    {
        ImGuiNative.ImGui_SetScrollFromPosX(local_x, center_x_ratio);
    }
    /// <summary>
    /// adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.
    /// </summary>
    public static void SetScrollFromPosY(float local_y, float center_y_ratio = 0.5f)
    {
        ImGuiNative.ImGui_SetScrollFromPosY(local_y, center_y_ratio);
    }
    /// <summary>
    /// <para>Parameters stacks (font)</para>
    /// <para>- PushFont(font, 0.0f)                       // Change font and keep current size</para>
    /// <para>- PushFont(NULL, 20.0f)                      // Keep font and change current size</para>
    /// <para>- PushFont(font, 20.0f)                      // Change font and set size to 20.0f</para>
    /// <para>- PushFont(font, style.FontSizeBase * 2.0f)  // Change font and set size to be twice bigger than current size.</para>
    /// <para>- PushFont(font, font-&gt;LegacySize)           // Change font and set size to size passed to AddFontXXX() function. Same as pre-1.92 behavior.</para>
    /// <para>*IMPORTANT* before 1.92, fonts had a single size. They can now be dynamically be adjusted.</para>
    /// <para>- In 1.92 we have REMOVED the single parameter version of PushFont() because it seems like the easiest way to provide an error-proof transition.</para>
    /// <para>- PushFont(font) before 1.92 = PushFont(font, font-&gt;LegacySize) after 1.92          // Use default font size as passed to AddFontXXX() function.</para>
    /// <para>*IMPORTANT* global scale factors are applied over the provided size.</para>
    /// <para>- Global scale factors are: 'style.FontScaleMain', 'style.FontScaleDpi' and maybe more.</para>
    /// <para>-  If you want to apply a factor to the _current_ font size:</para>
    /// <para>- CORRECT:   PushFont(NULL, style.FontSizeBase)         // use current unscaled size    == does nothing</para>
    /// <para>- CORRECT:   PushFont(NULL, style.FontSizeBase * 2.0f)  // use current unscaled size x2 == make text twice bigger</para>
    /// <para>- INCORRECT: PushFont(NULL, GetFontSize())              // INCORRECT! using size after global factors already applied == GLOBAL SCALING FACTORS WILL APPLY TWICE!</para>
    /// <para>- INCORRECT: PushFont(NULL, GetFontSize() * 2.0f)       // INCORRECT! using size after global factors already applied == GLOBAL SCALING FACTORS WILL APPLY TWICE!</para>
    /// Use NULL as a shortcut to keep current font. Use 0.0f to keep current size.
    /// </summary>
    public static void PushFont(ImFontPtr font, float font_size_base_unscaled)
    {
        ImGuiNative.ImGui_PushFontFloat(ImFontPtr.GetHandle(font), font_size_base_unscaled);
    }
    public static void PopFont()
    {
        ImGuiNative.ImGui_PopFont();
    }
    /// <summary>
    /// get current font
    /// </summary>
    public static ImFontPtr GetFont()
    {
        return ImFontPtr.Create(ImGuiNative.ImGui_GetFont());
    }
    /// <summary>
    /// get current scaled font size (= height in pixels). AFTER global scale factors applied. *IMPORTANT* DO NOT PASS THIS VALUE TO PushFont()! Use ImGui::GetStyle().FontSizeBase to get value before global scale factors.
    /// </summary>
    public static float GetFontSize()
    {
        return ImGuiNative.ImGui_GetFontSize();
    }
    /// <summary>
    /// get current font bound at current size // == GetFont()-&gt;GetFontBaked(GetFontSize())
    /// </summary>
    public static ImFontBakedPtr GetFontBaked()
    {
        return ImFontBakedPtr.Create(ImGuiNative.ImGui_GetFontBaked());
    }
    /// <summary>
    /// <para>Parameters stacks (shared)</para>
    /// modify a style color. always use this if you modify the style after NewFrame().
    /// </summary>
    public static void PushStyleColor(ImGuiCol idx, uint col)
    {
        ImGuiNative.ImGui_PushStyleColor(idx, col);
    }
    public static void PushStyleColor(ImGuiCol idx, System.Numerics.Vector4 col)
    {
        ImGuiNative.ImGui_PushStyleColorImVec4(idx, col);
    }
    public static void PopStyleColor(int count = 1)
    {
        ImGuiNative.ImGui_PopStyleColor(count);
    }
    /// <summary>
    /// modify a style float variable. always use this if you modify the style after NewFrame()!
    /// </summary>
    public static void PushStyleVar(ImGuiStyleVar idx, float val)
    {
        ImGuiNative.ImGui_PushStyleVar(idx, val);
    }
    /// <summary>
    /// modify a style ImVec2 variable. "
    /// </summary>
    public static void PushStyleVar(ImGuiStyleVar idx, System.Numerics.Vector2 val)
    {
        ImGuiNative.ImGui_PushStyleVarImVec2(idx, val);
    }
    /// <summary>
    /// modify X component of a style ImVec2 variable. "
    /// </summary>
    public static void PushStyleVarX(ImGuiStyleVar idx, float val_x)
    {
        ImGuiNative.ImGui_PushStyleVarX(idx, val_x);
    }
    /// <summary>
    /// modify Y component of a style ImVec2 variable. "
    /// </summary>
    public static void PushStyleVarY(ImGuiStyleVar idx, float val_y)
    {
        ImGuiNative.ImGui_PushStyleVarY(idx, val_y);
    }
    public static void PopStyleVar(int count = 1)
    {
        ImGuiNative.ImGui_PopStyleVar(count);
    }
    /// <summary>
    /// modify specified shared item flag, e.g. PushItemFlag(ImGuiItemFlags_NoTabStop, true)
    /// </summary>
    public static void PushItemFlag(ImGuiItemFlags option, bool enabled)
    {
        ImGuiNative.ImGui_PushItemFlag(option, enabled ? (byte)1 : (byte)0);
    }
    public static void PopItemFlag()
    {
        ImGuiNative.ImGui_PopItemFlag();
    }
    /// <summary>
    /// <para>Parameters stacks (current window)</para>
    /// push width of items for common large "item+label" widgets. &gt;0.0f: width in pixels, &lt;0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side).
    /// </summary>
    public static void PushItemWidth(float item_width)
    {
        ImGuiNative.ImGui_PushItemWidth(item_width);
    }
    public static void PopItemWidth()
    {
        ImGuiNative.ImGui_PopItemWidth();
    }
    /// <summary>
    /// set width of the _next_ common large "item+label" widget. &gt;0.0f: width in pixels, &lt;0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side)
    /// </summary>
    public static void SetNextItemWidth(float item_width)
    {
        ImGuiNative.ImGui_SetNextItemWidth(item_width);
    }
    /// <summary>
    /// width of item given pushed settings and current cursor position. NOT necessarily the width of last item unlike most 'Item' functions.
    /// </summary>
    public static float CalcItemWidth()
    {
        return ImGuiNative.ImGui_CalcItemWidth();
    }
    /// <summary>
    /// push word-wrapping position for Text*() commands. &lt; 0.0f: no wrapping; 0.0f: wrap to end of window (or column); &gt; 0.0f: wrap at 'wrap_pos_x' position in window local space
    /// </summary>
    public static void PushTextWrapPos(float wrap_local_pos_x = 0.0f)
    {
        ImGuiNative.ImGui_PushTextWrapPos(wrap_local_pos_x);
    }
    public static void PopTextWrapPos()
    {
        ImGuiNative.ImGui_PopTextWrapPos();
    }
    /// <summary>
    /// <para>Style read access</para>
    /// <para>- Use the ShowStyleEditor() function to interactively see/edit the colors.</para>
    /// get UV coordinate for a white pixel, useful to draw custom shapes via the ImDrawList API
    /// </summary>
    public static System.Numerics.Vector2 GetFontTexUvWhitePixel()
    {
        return ImGuiNative.ImGui_GetFontTexUvWhitePixel();
    }
    /// <summary>
    /// retrieve given style color with style alpha applied and optional extra alpha multiplier, packed as a 32-bit value suitable for ImDrawList
    /// </summary>
    public static uint GetColorU32(ImGuiCol idx, float alpha_mul = 1.0f)
    {
        return ImGuiNative.ImGui_GetColorU32(idx, alpha_mul);
    }
    /// <summary>
    /// retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList
    /// </summary>
    public static uint GetColorU32(System.Numerics.Vector4 col)
    {
        return ImGuiNative.ImGui_GetColorU32ImVec4(col);
    }
    /// <summary>
    /// retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList
    /// </summary>
    public static uint GetColorU32(uint col, float alpha_mul = 1.0f)
    {
        return ImGuiNative.ImGui_GetColorU32ImU32(col, alpha_mul);
    }
    /// <summary>
    /// retrieve style color as stored in ImGuiStyle structure. use to feed back into PushStyleColor(), otherwise use GetColorU32() to get style color with style alpha baked in.
    /// </summary>
    public static ref System.Numerics.Vector4 GetStyleColorVec4(ImGuiCol idx)
    {
        return ref Unsafe.AsRef<System.Numerics.Vector4>((System.Numerics.Vector4*)ImGuiNative.ImGui_GetStyleColorVec4(idx));
    }
    /// <summary>
    /// <para>Layout cursor positioning</para>
    /// <para>- By "cursor" we mean the current output position.</para>
    /// <para>- The typical widget behavior is to output themselves at the current cursor position, then move the cursor one line down.</para>
    /// <para>- You can call SameLine() between widgets to undo the last carriage return and output at the right of the preceding widget.</para>
    /// <para>- YOU CAN DO 99% OF WHAT YOU NEED WITH ONLY GetCursorScreenPos() and GetContentRegionAvail().</para>
    /// <para>- Attention! We currently have inconsistencies between window-local and absolute positions we will aim to fix with future API:</para>
    /// <para>- Absolute coordinate:        GetCursorScreenPos(), SetCursorScreenPos(), all ImDrawList:: functions. -&gt; this is the preferred way forward.</para>
    /// <para>- Window-local coordinates:   SameLine(offset), GetCursorPos(), SetCursorPos(), GetCursorStartPos(), PushTextWrapPos()</para>
    /// <para>- Window-local coordinates:   GetContentRegionMax(), GetWindowContentRegionMin(), GetWindowContentRegionMax() --&gt; all obsoleted. YOU DON'T NEED THEM.</para>
    /// <para>- GetCursorScreenPos() = GetCursorPos() + GetWindowPos(). GetWindowPos() is almost only ever useful to convert from window-local to absolute coordinates. Try not to use it.</para>
    /// cursor position, absolute coordinates. THIS IS YOUR BEST FRIEND (prefer using this rather than GetCursorPos(), also more useful to work with ImDrawList API).
    /// </summary>
    public static System.Numerics.Vector2 GetCursorScreenPos()
    {
        return ImGuiNative.ImGui_GetCursorScreenPos();
    }
    /// <summary>
    /// cursor position, absolute coordinates. THIS IS YOUR BEST FRIEND.
    /// </summary>
    public static void SetCursorScreenPos(System.Numerics.Vector2 pos)
    {
        ImGuiNative.ImGui_SetCursorScreenPos(pos);
    }
    /// <summary>
    /// available space from current position. THIS IS YOUR BEST FRIEND.
    /// </summary>
    public static System.Numerics.Vector2 GetContentRegionAvail()
    {
        return ImGuiNative.ImGui_GetContentRegionAvail();
    }
    /// <summary>
    /// [window-local] cursor position in window-local coordinates. This is not your best friend.
    /// </summary>
    public static System.Numerics.Vector2 GetCursorPos()
    {
        return ImGuiNative.ImGui_GetCursorPos();
    }
    /// <summary>
    /// [window-local] "
    /// </summary>
    public static float GetCursorPosX()
    {
        return ImGuiNative.ImGui_GetCursorPosX();
    }
    /// <summary>
    /// [window-local] "
    /// </summary>
    public static float GetCursorPosY()
    {
        return ImGuiNative.ImGui_GetCursorPosY();
    }
    /// <summary>
    /// [window-local] "
    /// </summary>
    public static void SetCursorPos(System.Numerics.Vector2 local_pos)
    {
        ImGuiNative.ImGui_SetCursorPos(local_pos);
    }
    /// <summary>
    /// [window-local] "
    /// </summary>
    public static void SetCursorPosX(float local_x)
    {
        ImGuiNative.ImGui_SetCursorPosX(local_x);
    }
    /// <summary>
    /// [window-local] "
    /// </summary>
    public static void SetCursorPosY(float local_y)
    {
        ImGuiNative.ImGui_SetCursorPosY(local_y);
    }
    /// <summary>
    /// [window-local] initial cursor position, in window-local coordinates. Call GetCursorScreenPos() after Begin() to get the absolute coordinates version.
    /// </summary>
    public static System.Numerics.Vector2 GetCursorStartPos()
    {
        return ImGuiNative.ImGui_GetCursorStartPos();
    }
    /// <summary>
    /// <para>Other layout functions</para>
    /// separator, generally horizontal. inside a menu bar or in horizontal layout mode, this becomes a vertical separator.
    /// </summary>
    public static void Separator()
    {
        ImGuiNative.ImGui_Separator();
    }
    /// <summary>
    /// call between widgets or groups to layout them horizontally. X position given in window coordinates.
    /// </summary>
    public static void SameLine(float offset_from_start_x = 0.0f, float spacing = -1.0f)
    {
        ImGuiNative.ImGui_SameLine(offset_from_start_x, spacing);
    }
    /// <summary>
    /// undo a SameLine() or force a new line when in a horizontal-layout context.
    /// </summary>
    public static void NewLine()
    {
        ImGuiNative.ImGui_NewLine();
    }
    /// <summary>
    /// add vertical spacing.
    /// </summary>
    public static void Spacing()
    {
        ImGuiNative.ImGui_Spacing();
    }
    /// <summary>
    /// add a dummy item of given size. unlike InvisibleButton(), Dummy() won't take the mouse click or be navigable into.
    /// </summary>
    public static void Dummy(System.Numerics.Vector2 size)
    {
        ImGuiNative.ImGui_Dummy(size);
    }
    /// <summary>
    /// move content position toward the right, by indent_w, or style.IndentSpacing if indent_w &lt;= 0
    /// </summary>
    public static void Indent(float indent_w = 0.0f)
    {
        ImGuiNative.ImGui_Indent(indent_w);
    }
    /// <summary>
    /// move content position back to the left, by indent_w, or style.IndentSpacing if indent_w &lt;= 0
    /// </summary>
    public static void Unindent(float indent_w = 0.0f)
    {
        ImGuiNative.ImGui_Unindent(indent_w);
    }
    /// <summary>
    /// lock horizontal starting position
    /// </summary>
    public static void BeginGroup()
    {
        ImGuiNative.ImGui_BeginGroup();
    }
    /// <summary>
    /// unlock horizontal starting position + capture the whole group bounding box into one "item" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)
    /// </summary>
    public static void EndGroup()
    {
        ImGuiNative.ImGui_EndGroup();
    }
    /// <summary>
    /// vertically align upcoming text baseline to FramePadding.y so that it will align properly to regularly framed items (call if you have text on a line before a framed item)
    /// </summary>
    public static void AlignTextToFramePadding()
    {
        ImGuiNative.ImGui_AlignTextToFramePadding();
    }
    /// <summary>
    /// ~ FontSize
    /// </summary>
    public static float GetTextLineHeight()
    {
        return ImGuiNative.ImGui_GetTextLineHeight();
    }
    /// <summary>
    /// ~ FontSize + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of text)
    /// </summary>
    public static float GetTextLineHeightWithSpacing()
    {
        return ImGuiNative.ImGui_GetTextLineHeightWithSpacing();
    }
    /// <summary>
    /// ~ FontSize + style.FramePadding.y * 2
    /// </summary>
    public static float GetFrameHeight()
    {
        return ImGuiNative.ImGui_GetFrameHeight();
    }
    /// <summary>
    /// ~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)
    /// </summary>
    public static float GetFrameHeightWithSpacing()
    {
        return ImGuiNative.ImGui_GetFrameHeightWithSpacing();
    }
    /// <summary>
    /// <para>ID stack/scopes</para>
    /// <para>Read the FAQ (docs/FAQ.md or http://dearimgui.com/faq) for more details about how ID are handled in dear imgui.</para>
    /// <para>- Those questions are answered and impacted by understanding of the ID stack system:</para>
    /// <para>- "Q: Why is my widget not reacting when I click on it?"</para>
    /// <para>- "Q: How can I have widgets with an empty label?"</para>
    /// <para>- "Q: How can I have multiple widgets with the same label?"</para>
    /// <para>- Short version: ID are hashes of the entire ID stack. If you are creating widgets in a loop you most likely</para>
    /// <para>want to push a unique identifier (e.g. object pointer, loop index) to uniquely differentiate them.</para>
    /// <para>- You can also use the "Label##foobar" syntax within widget label to distinguish them from each others.</para>
    /// <para>- In this header file we use the "label"/"name" terminology to denote a string that will be displayed + used as an ID,</para>
    /// <para>whereas "str_id" denote a string that is only used as an ID and not normally displayed.</para>
    /// push string into the ID stack (will hash string).
    /// </summary>
    public static void PushID(string str_id)
    {
        byte* __bytes_str_id = stackalloc byte[128];
        using var __utf8z_str_id = new UTF8ZHelper(__bytes_str_id, 128, str_id);
        ImGuiNative.ImGui_PushID(__utf8z_str_id.Pointer);
    }
    /// <summary>
    /// push string into the ID stack (will hash string).
    /// </summary>
    public static void PushID(string str_id_begin, string str_id_end)
    {
        byte* __bytes_str_id_begin = stackalloc byte[128];
        using var __utf8z_str_id_begin = new UTF8ZHelper(__bytes_str_id_begin, 128, str_id_begin);
        byte* __bytes_str_id_end = stackalloc byte[128];
        using var __utf8z_str_id_end = new UTF8ZHelper(__bytes_str_id_end, 128, str_id_end);
        ImGuiNative.ImGui_PushIDStr(__utf8z_str_id_begin.Pointer, __utf8z_str_id_end.Pointer);
    }
    /// <summary>
    /// push pointer into the ID stack (will hash pointer).
    /// </summary>
    public static void PushID(IntPtr ptr_id)
    {
        ImGuiNative.ImGui_PushIDPtr(ptr_id);
    }
    /// <summary>
    /// push integer into the ID stack (will hash integer).
    /// </summary>
    public static void PushID(int int_id)
    {
        ImGuiNative.ImGui_PushIDInt(int_id);
    }
    /// <summary>
    /// pop from the ID stack.
    /// </summary>
    public static void PopID()
    {
        ImGuiNative.ImGui_PopID();
    }
    /// <summary>
    /// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself
    /// </summary>
    public static uint GetID(string str_id)
    {
        byte* __bytes_str_id = stackalloc byte[128];
        using var __utf8z_str_id = new UTF8ZHelper(__bytes_str_id, 128, str_id);
        return ImGuiNative.ImGui_GetID(__utf8z_str_id.Pointer);
    }
    public static uint GetID(string str_id_begin, string str_id_end)
    {
        byte* __bytes_str_id_begin = stackalloc byte[128];
        using var __utf8z_str_id_begin = new UTF8ZHelper(__bytes_str_id_begin, 128, str_id_begin);
        byte* __bytes_str_id_end = stackalloc byte[128];
        using var __utf8z_str_id_end = new UTF8ZHelper(__bytes_str_id_end, 128, str_id_end);
        return ImGuiNative.ImGui_GetIDStr(__utf8z_str_id_begin.Pointer, __utf8z_str_id_end.Pointer);
    }
    public static uint GetID(IntPtr ptr_id)
    {
        return ImGuiNative.ImGui_GetIDPtr(ptr_id);
    }
    public static uint GetID(int int_id)
    {
        return ImGuiNative.ImGui_GetIDInt(int_id);
    }
    /// <summary>
    /// <para>Widgets: Text</para>
    /// raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.
    /// </summary>
    public static void Text(string text, int? text_end = null)
    {
        byte* __bytes_text = stackalloc byte[128];
        using var __utf8z_text = new UTF8ZHelper(__bytes_text, 128, text);
        ImGuiNative.ImGui_TextUnformatted(__utf8z_text.Pointer, __utf8z_text.GetTextEnd(text_end));
    }
    /// <summary>
    /// shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();
    /// </summary>
    public static void TextColored(System.Numerics.Vector4 col, string text)
    {
        byte* __bytes_text = stackalloc byte[128];
        using var __utf8z_text = new UTF8ZHelper(__bytes_text, 128, text);
        ImGuiNative.ImGui_TextColoredUnformatted(col, __utf8z_text.Pointer);
    }
    /// <summary>
    /// shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();
    /// </summary>
    public static void TextDisabled(string text)
    {
        byte* __bytes_text = stackalloc byte[128];
        using var __utf8z_text = new UTF8ZHelper(__bytes_text, 128, text);
        ImGuiNative.ImGui_TextDisabledUnformatted(__utf8z_text.Pointer);
    }
    /// <summary>
    /// shortcut for PushTextWrapPos(0.0f); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize().
    /// </summary>
    public static void TextWrapped(string text)
    {
        byte* __bytes_text = stackalloc byte[128];
        using var __utf8z_text = new UTF8ZHelper(__bytes_text, 128, text);
        ImGuiNative.ImGui_TextWrappedUnformatted(__utf8z_text.Pointer);
    }
    /// <summary>
    /// display text+label aligned the same way as value+label widgets
    /// </summary>
    public static void LabelText(string label, string text)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte* __bytes_text = stackalloc byte[128];
        using var __utf8z_text = new UTF8ZHelper(__bytes_text, 128, text);
        ImGuiNative.ImGui_LabelTextUnformatted(__utf8z_label.Pointer, __utf8z_text.Pointer);
    }
    /// <summary>
    /// shortcut for Bullet()+Text()
    /// </summary>
    public static void BulletText(string text)
    {
        byte* __bytes_text = stackalloc byte[128];
        using var __utf8z_text = new UTF8ZHelper(__bytes_text, 128, text);
        ImGuiNative.ImGui_BulletTextUnformatted(__utf8z_text.Pointer);
    }
    /// <summary>
    /// currently: formatted text with a horizontal line
    /// </summary>
    public static void SeparatorText(string label)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        ImGuiNative.ImGui_SeparatorText(__utf8z_label.Pointer);
    }
    /// <summary>
    /// <para>Widgets: Main</para>
    /// <para>- Most widgets return true when the value has been changed or when pressed/selected</para>
    /// <para>- You may also use one of the many IsItemXXX functions (e.g. IsItemActive, IsItemHovered, etc.) to query widget state.</para>
    /// button
    /// </summary>
    public static bool Button(string label, System.Numerics.Vector2 size = default)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        return ImGuiNative.ImGui_Button(__utf8z_label.Pointer, size) != 0;
    }
    /// <summary>
    /// button with (FramePadding.y == 0) to easily embed within text
    /// </summary>
    public static bool SmallButton(string label)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        return ImGuiNative.ImGui_SmallButton(__utf8z_label.Pointer) != 0;
    }
    /// <summary>
    /// flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)
    /// </summary>
    public static bool InvisibleButton(string str_id, System.Numerics.Vector2 size, ImGuiButtonFlags flags = (ImGuiButtonFlags)0)
    {
        byte* __bytes_str_id = stackalloc byte[128];
        using var __utf8z_str_id = new UTF8ZHelper(__bytes_str_id, 128, str_id);
        return ImGuiNative.ImGui_InvisibleButton(__utf8z_str_id.Pointer, size, flags) != 0;
    }
    /// <summary>
    /// square button with an arrow shape
    /// </summary>
    public static bool ArrowButton(string str_id, ImGuiDir dir)
    {
        byte* __bytes_str_id = stackalloc byte[128];
        using var __utf8z_str_id = new UTF8ZHelper(__bytes_str_id, 128, str_id);
        return ImGuiNative.ImGui_ArrowButton(__utf8z_str_id.Pointer, dir) != 0;
    }
    public static bool Checkbox(string label, ref bool v)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte __v_v = v ? (byte)1 : (byte)0;
        try
        {
            return ImGuiNative.ImGui_Checkbox(__utf8z_label.Pointer, &__v_v) != 0;
        }
        finally
        {
            v = __v_v != 0;
        }
    }
    public static bool CheckboxFlags(string label, ref int flags, int flags_value)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(int* __flags_p = &flags)
        {
            return ImGuiNative.ImGui_CheckboxFlagsIntPtr(__utf8z_label.Pointer, __flags_p, flags_value) != 0;
        }
    }
    public static bool CheckboxFlags(string label, ref uint flags, uint flags_value)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(uint* __flags_p = &flags)
        {
            return ImGuiNative.ImGui_CheckboxFlagsUintPtr(__utf8z_label.Pointer, __flags_p, flags_value) != 0;
        }
    }
    /// <summary>
    /// use with e.g. if (RadioButton("one", my_value==1)) { my_value = 1; }
    /// </summary>
    public static bool RadioButton(string label, bool active)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        return ImGuiNative.ImGui_RadioButton(__utf8z_label.Pointer, active ? (byte)1 : (byte)0) != 0;
    }
    /// <summary>
    /// shortcut to handle the above pattern when value is an integer
    /// </summary>
    public static bool RadioButton(string label, ref int v, int v_button)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(int* __v_p = &v)
        {
            return ImGuiNative.ImGui_RadioButtonIntPtr(__utf8z_label.Pointer, __v_p, v_button) != 0;
        }
    }
    public static void ProgressBar(float fraction, ImOptionalArg<System.Numerics.Vector2> size_arg = default, string overlay = null)
    {
        byte* __bytes_overlay = stackalloc byte[128];
        using var __utf8z_overlay = new UTF8ZHelper(__bytes_overlay, 128, overlay);
        ImGuiNative.ImGui_ProgressBar(fraction, size_arg.Get(new System.Numerics.Vector2(-float.Epsilon, 0)), __utf8z_overlay.Pointer);
    }
    /// <summary>
    /// draw a small circle + keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses
    /// </summary>
    public static void Bullet()
    {
        ImGuiNative.ImGui_Bullet();
    }
    /// <summary>
    /// hyperlink text button, return true when clicked
    /// </summary>
    public static bool TextLink(string label)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        return ImGuiNative.ImGui_TextLink(__utf8z_label.Pointer) != 0;
    }
    /// <summary>
    /// hyperlink text button, automatically open file/url when clicked
    /// </summary>
    public static bool TextLinkOpenURL(string label, string url = null)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte* __bytes_url = stackalloc byte[128];
        using var __utf8z_url = new UTF8ZHelper(__bytes_url, 128, url);
        return ImGuiNative.ImGui_TextLinkOpenURL(__utf8z_label.Pointer, __utf8z_url.Pointer) != 0;
    }
    /// <summary>
    /// <para>Widgets: Images</para>
    /// <para>- Read about ImTextureID/ImTextureRef  here: https://github.com/ocornut/imgui/wiki/Image-Loading-and-Displaying-Examples</para>
    /// <para>- 'uv0' and 'uv1' are texture coordinates. Read about them from the same link above.</para>
    /// <para>- Image() pads adds style.ImageBorderSize on each side, ImageButton() adds style.FramePadding on each side.</para>
    /// <para>- ImageButton() draws a background based on regular Button() color + optionally an inner background if specified.</para>
    /// - An obsolete version of Image(), before 1.91.9 (March 2025), had a 'tint_col' parameter which is now supported by the ImageWithBg() function.
    /// </summary>
    public static void Image(ImTextureRef tex_ref, System.Numerics.Vector2 image_size, System.Numerics.Vector2 uv0 = default, ImOptionalArg<System.Numerics.Vector2> uv1 = default)
    {
        ImGuiNative.ImGui_Image(tex_ref, image_size, uv0, uv1.Get(new System.Numerics.Vector2(1, 1)));
    }
    public static void ImageWithBg(ImTextureRef tex_ref, System.Numerics.Vector2 image_size, System.Numerics.Vector2 uv0 = default, ImOptionalArg<System.Numerics.Vector2> uv1 = default, System.Numerics.Vector4 bg_col = default, ImOptionalArg<System.Numerics.Vector4> tint_col = default)
    {
        ImGuiNative.ImGui_ImageWithBg(tex_ref, image_size, uv0, uv1.Get(new System.Numerics.Vector2(1, 1)), bg_col, tint_col.Get(new System.Numerics.Vector4(1, 1, 1, 1)));
    }
    public static bool ImageButton(string str_id, ImTextureRef tex_ref, System.Numerics.Vector2 image_size, System.Numerics.Vector2 uv0 = default, ImOptionalArg<System.Numerics.Vector2> uv1 = default, System.Numerics.Vector4 bg_col = default, ImOptionalArg<System.Numerics.Vector4> tint_col = default)
    {
        byte* __bytes_str_id = stackalloc byte[128];
        using var __utf8z_str_id = new UTF8ZHelper(__bytes_str_id, 128, str_id);
        return ImGuiNative.ImGui_ImageButton(__utf8z_str_id.Pointer, tex_ref, image_size, uv0, uv1.Get(new System.Numerics.Vector2(1, 1)), bg_col, tint_col.Get(new System.Numerics.Vector4(1, 1, 1, 1))) != 0;
    }
    /// <summary>
    /// <para>Widgets: Combo Box (Dropdown)</para>
    /// <para>- The BeginCombo()/EndCombo() api allows you to manage your contents and selection state however you want it, by creating e.g. Selectable() items.</para>
    /// - The old Combo() api are helpers over BeginCombo()/EndCombo() which are kept available for convenience purpose. This is analogous to how ListBox are created.
    /// </summary>
    public static bool BeginCombo(string label, string preview_value, ImGuiComboFlags flags = (ImGuiComboFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte* __bytes_preview_value = stackalloc byte[128];
        using var __utf8z_preview_value = new UTF8ZHelper(__bytes_preview_value, 128, preview_value);
        return ImGuiNative.ImGui_BeginCombo(__utf8z_label.Pointer, __utf8z_preview_value.Pointer, flags) != 0;
    }
    /// <summary>
    /// only call EndCombo() if BeginCombo() returns true!
    /// </summary>
    public static void EndCombo()
    {
        ImGuiNative.ImGui_EndCombo();
    }
    public static bool Combo(string label, ref int current_item, string[] items, int items_count, int popup_max_height_in_items = -1)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(int* __current_item_p = &current_item)
        {
            byte** __array_items = stackalloc byte*[items.Length];
            byte* __storage_items = stackalloc byte[1024];
            using var __utf8z_items = new UTF8ZArrayHelper(__storage_items, 1024, __array_items, items);
            return ImGuiNative.ImGui_ComboChar(__utf8z_label.Pointer, __current_item_p, __array_items, items_count, popup_max_height_in_items) != 0;
        }
    }
    /// <summary>
    /// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"
    /// </summary>
    public static bool Combo(string label, ref int current_item, string items_separated_by_zeros, int popup_max_height_in_items = -1)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(int* __current_item_p = &current_item)
        {
            byte* __bytes_items_separated_by_zeros = stackalloc byte[128];
            using var __utf8z_items_separated_by_zeros = new UTF8ZHelper(__bytes_items_separated_by_zeros, 128, items_separated_by_zeros);
            return ImGuiNative.ImGui_Combo(__utf8z_label.Pointer, __current_item_p, __utf8z_items_separated_by_zeros.Pointer, popup_max_height_in_items) != 0;
        }
    }
    public static bool Combo(string label, ref int current_item, ImGui_ComboCallback_getterDelegate getter, IntPtr user_data, int items_count, int popup_max_height_in_items = -1)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(int* __current_item_p = &current_item)
        {
            var __getter_p = getter == null ? null : (delegate* unmanaged<IntPtr, int, byte*>)Marshal.GetFunctionPointerForDelegate(getter);
            try
            {
                return ImGuiNative.ImGui_ComboCallback(__utf8z_label.Pointer, __current_item_p, __getter_p, user_data, items_count, popup_max_height_in_items) != 0;
            }
            finally
            {
                GC.KeepAlive(getter);
            }
        }
    }
    /// <summary>
    /// <para>Widgets: Drag Sliders</para>
    /// <para>- CTRL+Click on any drag box to turn them into an input box. Manually input values aren't clamped by default and can go off-bounds. Use ImGuiSliderFlags_AlwaysClamp to always clamp.</para>
    /// <para>- For all the Float2/Float3/Float4/Int2/Int3/Int4 versions of every function, note that a 'float v[X]' function argument is the same as 'float* v',</para>
    /// <para>the array syntax is just a way to document the number of elements that are expected to be accessible. You can pass address of your first element out of a contiguous set, e.g. &amp;myvector.x</para>
    /// <para>- Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. "%.3f" -&gt; 1.234; "%5.2f secs" -&gt; 01.23 secs; "Biscuit: %.0f" -&gt; Biscuit: 1; etc.</para>
    /// <para>- Format string may also be set to NULL or use the default format ("%f" or "%d").</para>
    /// <para>- Speed are per-pixel of mouse movement (v_speed=0.2f: mouse needs to move by 5 pixels to increase value by 1). For keyboard/gamepad navigation, minimum speed is Max(v_speed, minimum_step_at_given_precision).</para>
    /// <para>- Use v_min &lt; v_max to clamp edits to given limits. Note that CTRL+Click manual input can override those limits if ImGuiSliderFlags_AlwaysClamp is not used.</para>
    /// <para>- Use v_max = FLT_MAX / INT_MAX etc to avoid clamping to a maximum, same with v_min = -FLT_MAX / INT_MIN to avoid clamping to a minimum.</para>
    /// <para>- We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them.</para>
    /// <para>- Legacy: Pre-1.78 there are DragXXX() function signatures that take a final `float power=1.0f' argument instead of the `ImGuiSliderFlags flags=0' argument.</para>
    /// <para>If you get a warning converting a float to ImGuiSliderFlags, read https://github.com/ocornut/imgui/issues/3361</para>
    /// If v_min &gt;= v_max we have no bound
    /// </summary>
    public static bool DragFloat(string label, ref float v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, string format = "%.3f", ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(float* __v_p = &v)
        {
            byte* __bytes_format = stackalloc byte[128];
            using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
            return ImGuiNative.ImGui_DragFloat(__utf8z_label.Pointer, __v_p, v_speed, v_min, v_max, __utf8z_format.Pointer, flags) != 0;
        }
    }
    public static bool DragFloat2(string label, ref System.Numerics.Vector2 v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, string format = "%.3f", ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(System.Numerics.Vector2* __v_p2 = &v)
        {
            var __v_p = (float*)__v_p2;
            byte* __bytes_format = stackalloc byte[128];
            using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
            return ImGuiNative.ImGui_DragFloat2(__utf8z_label.Pointer, __v_p, v_speed, v_min, v_max, __utf8z_format.Pointer, flags) != 0;
        }
    }
    public static bool DragFloat3(string label, ref System.Numerics.Vector3 v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, string format = "%.3f", ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(System.Numerics.Vector3* __v_p2 = &v)
        {
            var __v_p = (float*)__v_p2;
            byte* __bytes_format = stackalloc byte[128];
            using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
            return ImGuiNative.ImGui_DragFloat3(__utf8z_label.Pointer, __v_p, v_speed, v_min, v_max, __utf8z_format.Pointer, flags) != 0;
        }
    }
    public static bool DragFloat4(string label, ref System.Numerics.Vector4 v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, string format = "%.3f", ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(System.Numerics.Vector4* __v_p2 = &v)
        {
            var __v_p = (float*)__v_p2;
            byte* __bytes_format = stackalloc byte[128];
            using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
            return ImGuiNative.ImGui_DragFloat4(__utf8z_label.Pointer, __v_p, v_speed, v_min, v_max, __utf8z_format.Pointer, flags) != 0;
        }
    }
    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, string format = "%.3f", string format_max = null, ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(float* __v_current_min_p = &v_current_min)
        {
            fixed(float* __v_current_max_p = &v_current_max)
            {
                byte* __bytes_format = stackalloc byte[128];
                using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
                byte* __bytes_format_max = stackalloc byte[128];
                using var __utf8z_format_max = new UTF8ZHelper(__bytes_format_max, 128, format_max);
                return ImGuiNative.ImGui_DragFloatRange2(__utf8z_label.Pointer, __v_current_min_p, __v_current_max_p, v_speed, v_min, v_max, __utf8z_format.Pointer, __utf8z_format_max.Pointer, flags) != 0;
            }
        }
    }
    /// <summary>
    /// If v_min &gt;= v_max we have no bound
    /// </summary>
    public static bool DragInt(string label, ref int v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, string format = "%d", ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(int* __v_p = &v)
        {
            byte* __bytes_format = stackalloc byte[128];
            using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
            return ImGuiNative.ImGui_DragInt(__utf8z_label.Pointer, __v_p, v_speed, v_min, v_max, __utf8z_format.Pointer, flags) != 0;
        }
    }
    public static bool DragInt2(string label, int* v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, string format = "%d", ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte* __bytes_format = stackalloc byte[128];
        using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
        return ImGuiNative.ImGui_DragInt2(__utf8z_label.Pointer, v, v_speed, v_min, v_max, __utf8z_format.Pointer, flags) != 0;
    }
    public static bool DragInt3(string label, int* v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, string format = "%d", ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte* __bytes_format = stackalloc byte[128];
        using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
        return ImGuiNative.ImGui_DragInt3(__utf8z_label.Pointer, v, v_speed, v_min, v_max, __utf8z_format.Pointer, flags) != 0;
    }
    public static bool DragInt4(string label, int* v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, string format = "%d", ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte* __bytes_format = stackalloc byte[128];
        using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
        return ImGuiNative.ImGui_DragInt4(__utf8z_label.Pointer, v, v_speed, v_min, v_max, __utf8z_format.Pointer, flags) != 0;
    }
    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed = 1.0f, int v_min = 0, int v_max = 0, string format = "%d", string format_max = null, ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(int* __v_current_min_p = &v_current_min)
        {
            fixed(int* __v_current_max_p = &v_current_max)
            {
                byte* __bytes_format = stackalloc byte[128];
                using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
                byte* __bytes_format_max = stackalloc byte[128];
                using var __utf8z_format_max = new UTF8ZHelper(__bytes_format_max, 128, format_max);
                return ImGuiNative.ImGui_DragIntRange2(__utf8z_label.Pointer, __v_current_min_p, __v_current_max_p, v_speed, v_min, v_max, __utf8z_format.Pointer, __utf8z_format_max.Pointer, flags) != 0;
            }
        }
    }
    public static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, float v_speed = 1.0f, IntPtr p_min = 0, IntPtr p_max = 0, string format = null, ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte* __bytes_format = stackalloc byte[128];
        using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
        return ImGuiNative.ImGui_DragScalar(__utf8z_label.Pointer, data_type, p_data, v_speed, p_min, p_max, __utf8z_format.Pointer, flags) != 0;
    }
    public static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, float v_speed = 1.0f, IntPtr p_min = 0, IntPtr p_max = 0, string format = null, ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte* __bytes_format = stackalloc byte[128];
        using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
        return ImGuiNative.ImGui_DragScalarN(__utf8z_label.Pointer, data_type, p_data, components, v_speed, p_min, p_max, __utf8z_format.Pointer, flags) != 0;
    }
    /// <summary>
    /// <para>Widgets: Regular Sliders</para>
    /// <para>- CTRL+Click on any slider to turn them into an input box. Manually input values aren't clamped by default and can go off-bounds. Use ImGuiSliderFlags_AlwaysClamp to always clamp.</para>
    /// <para>- Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. "%.3f" -&gt; 1.234; "%5.2f secs" -&gt; 01.23 secs; "Biscuit: %.0f" -&gt; Biscuit: 1; etc.</para>
    /// <para>- Format string may also be set to NULL or use the default format ("%f" or "%d").</para>
    /// <para>- Legacy: Pre-1.78 there are SliderXXX() function signatures that take a final `float power=1.0f' argument instead of the `ImGuiSliderFlags flags=0' argument.</para>
    /// <para>If you get a warning converting a float to ImGuiSliderFlags, read https://github.com/ocornut/imgui/issues/3361</para>
    /// adjust format to decorate the value with a prefix or a suffix for in-slider labels or unit display.
    /// </summary>
    public static bool SliderFloat(string label, ref float v, float v_min, float v_max, string format = "%.3f", ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(float* __v_p = &v)
        {
            byte* __bytes_format = stackalloc byte[128];
            using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
            return ImGuiNative.ImGui_SliderFloat(__utf8z_label.Pointer, __v_p, v_min, v_max, __utf8z_format.Pointer, flags) != 0;
        }
    }
    public static bool SliderFloat2(string label, ref System.Numerics.Vector2 v, float v_min, float v_max, string format = "%.3f", ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(System.Numerics.Vector2* __v_p2 = &v)
        {
            var __v_p = (float*)__v_p2;
            byte* __bytes_format = stackalloc byte[128];
            using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
            return ImGuiNative.ImGui_SliderFloat2(__utf8z_label.Pointer, __v_p, v_min, v_max, __utf8z_format.Pointer, flags) != 0;
        }
    }
    public static bool SliderFloat3(string label, ref System.Numerics.Vector3 v, float v_min, float v_max, string format = "%.3f", ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(System.Numerics.Vector3* __v_p2 = &v)
        {
            var __v_p = (float*)__v_p2;
            byte* __bytes_format = stackalloc byte[128];
            using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
            return ImGuiNative.ImGui_SliderFloat3(__utf8z_label.Pointer, __v_p, v_min, v_max, __utf8z_format.Pointer, flags) != 0;
        }
    }
    public static bool SliderFloat4(string label, ref System.Numerics.Vector4 v, float v_min, float v_max, string format = "%.3f", ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(System.Numerics.Vector4* __v_p2 = &v)
        {
            var __v_p = (float*)__v_p2;
            byte* __bytes_format = stackalloc byte[128];
            using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
            return ImGuiNative.ImGui_SliderFloat4(__utf8z_label.Pointer, __v_p, v_min, v_max, __utf8z_format.Pointer, flags) != 0;
        }
    }
    public static bool SliderAngle(string label, ref float v_rad, float v_degrees_min = -360.0f, float v_degrees_max = +360.0f, string format = "%.0f deg", ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(float* __v_rad_p = &v_rad)
        {
            byte* __bytes_format = stackalloc byte[128];
            using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
            return ImGuiNative.ImGui_SliderAngle(__utf8z_label.Pointer, __v_rad_p, v_degrees_min, v_degrees_max, __utf8z_format.Pointer, flags) != 0;
        }
    }
    public static bool SliderInt(string label, ref int v, int v_min, int v_max, string format = "%d", ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(int* __v_p = &v)
        {
            byte* __bytes_format = stackalloc byte[128];
            using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
            return ImGuiNative.ImGui_SliderInt(__utf8z_label.Pointer, __v_p, v_min, v_max, __utf8z_format.Pointer, flags) != 0;
        }
    }
    public static bool SliderInt2(string label, int* v, int v_min, int v_max, string format = "%d", ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte* __bytes_format = stackalloc byte[128];
        using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
        return ImGuiNative.ImGui_SliderInt2(__utf8z_label.Pointer, v, v_min, v_max, __utf8z_format.Pointer, flags) != 0;
    }
    public static bool SliderInt3(string label, int* v, int v_min, int v_max, string format = "%d", ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte* __bytes_format = stackalloc byte[128];
        using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
        return ImGuiNative.ImGui_SliderInt3(__utf8z_label.Pointer, v, v_min, v_max, __utf8z_format.Pointer, flags) != 0;
    }
    public static bool SliderInt4(string label, int* v, int v_min, int v_max, string format = "%d", ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte* __bytes_format = stackalloc byte[128];
        using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
        return ImGuiNative.ImGui_SliderInt4(__utf8z_label.Pointer, v, v_min, v_max, __utf8z_format.Pointer, flags) != 0;
    }
    public static bool SliderScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max, string format = null, ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte* __bytes_format = stackalloc byte[128];
        using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
        return ImGuiNative.ImGui_SliderScalar(__utf8z_label.Pointer, data_type, p_data, p_min, p_max, __utf8z_format.Pointer, flags) != 0;
    }
    public static bool SliderScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_min, IntPtr p_max, string format = null, ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte* __bytes_format = stackalloc byte[128];
        using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
        return ImGuiNative.ImGui_SliderScalarN(__utf8z_label.Pointer, data_type, p_data, components, p_min, p_max, __utf8z_format.Pointer, flags) != 0;
    }
    public static bool VSliderFloat(string label, System.Numerics.Vector2 size, ref float v, float v_min, float v_max, string format = "%.3f", ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(float* __v_p = &v)
        {
            byte* __bytes_format = stackalloc byte[128];
            using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
            return ImGuiNative.ImGui_VSliderFloat(__utf8z_label.Pointer, size, __v_p, v_min, v_max, __utf8z_format.Pointer, flags) != 0;
        }
    }
    public static bool VSliderInt(string label, System.Numerics.Vector2 size, ref int v, int v_min, int v_max, string format = "%d", ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(int* __v_p = &v)
        {
            byte* __bytes_format = stackalloc byte[128];
            using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
            return ImGuiNative.ImGui_VSliderInt(__utf8z_label.Pointer, size, __v_p, v_min, v_max, __utf8z_format.Pointer, flags) != 0;
        }
    }
    public static bool VSliderScalar(string label, System.Numerics.Vector2 size, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max, string format = null, ImGuiSliderFlags flags = (ImGuiSliderFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte* __bytes_format = stackalloc byte[128];
        using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
        return ImGuiNative.ImGui_VSliderScalar(__utf8z_label.Pointer, size, data_type, p_data, p_min, p_max, __utf8z_format.Pointer, flags) != 0;
    }
    /// <summary>
    /// <para>Widgets: Input with Keyboard</para>
    /// <para>- If you want to use InputText() with std::string or any custom dynamic string type, see misc/cpp/imgui_stdlib.h and comments in imgui_demo.cpp.</para>
    /// - Most of the ImGuiInputTextFlags flags are only useful for InputText() and not for InputFloatX, InputIntX, InputDouble etc.
    /// </summary>
    public static bool InputText(string label, IntPtr buf, nint buf_size, ImGuiInputTextFlags flags = (ImGuiInputTextFlags)0, ImGuiInputTextCallback callback = null, IntPtr user_data = 0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        var __callback_p = callback == null ? null : (delegate* unmanaged<ImGuiInputTextCallbackData*, int>)Marshal.GetFunctionPointerForDelegate(callback);
        try
        {
            return ImGuiNative.ImGui_InputText(__utf8z_label.Pointer, buf, buf_size, flags, __callback_p, user_data) != 0;
        }
        finally
        {
            GC.KeepAlive(callback);
        }
    }
    public static bool InputTextMultiline(string label, IntPtr buf, nint buf_size, System.Numerics.Vector2 size = default, ImGuiInputTextFlags flags = (ImGuiInputTextFlags)0, ImGuiInputTextCallback callback = null, IntPtr user_data = 0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        var __callback_p = callback == null ? null : (delegate* unmanaged<ImGuiInputTextCallbackData*, int>)Marshal.GetFunctionPointerForDelegate(callback);
        try
        {
            return ImGuiNative.ImGui_InputTextMultiline(__utf8z_label.Pointer, buf, buf_size, size, flags, __callback_p, user_data) != 0;
        }
        finally
        {
            GC.KeepAlive(callback);
        }
    }
    public static bool InputTextWithHint(string label, string hint, IntPtr buf, nint buf_size, ImGuiInputTextFlags flags = (ImGuiInputTextFlags)0, ImGuiInputTextCallback callback = null, IntPtr user_data = 0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte* __bytes_hint = stackalloc byte[128];
        using var __utf8z_hint = new UTF8ZHelper(__bytes_hint, 128, hint);
        var __callback_p = callback == null ? null : (delegate* unmanaged<ImGuiInputTextCallbackData*, int>)Marshal.GetFunctionPointerForDelegate(callback);
        try
        {
            return ImGuiNative.ImGui_InputTextWithHint(__utf8z_label.Pointer, __utf8z_hint.Pointer, buf, buf_size, flags, __callback_p, user_data) != 0;
        }
        finally
        {
            GC.KeepAlive(callback);
        }
    }
    public static bool InputFloat(string label, ref float v, float step = 0.0f, float step_fast = 0.0f, string format = "%.3f", ImGuiInputTextFlags flags = (ImGuiInputTextFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(float* __v_p = &v)
        {
            byte* __bytes_format = stackalloc byte[128];
            using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
            return ImGuiNative.ImGui_InputFloat(__utf8z_label.Pointer, __v_p, step, step_fast, __utf8z_format.Pointer, flags) != 0;
        }
    }
    public static bool InputFloat2(string label, ref System.Numerics.Vector2 v, string format = "%.3f", ImGuiInputTextFlags flags = (ImGuiInputTextFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(System.Numerics.Vector2* __v_p2 = &v)
        {
            var __v_p = (float*)__v_p2;
            byte* __bytes_format = stackalloc byte[128];
            using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
            return ImGuiNative.ImGui_InputFloat2(__utf8z_label.Pointer, __v_p, __utf8z_format.Pointer, flags) != 0;
        }
    }
    public static bool InputFloat3(string label, ref System.Numerics.Vector3 v, string format = "%.3f", ImGuiInputTextFlags flags = (ImGuiInputTextFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(System.Numerics.Vector3* __v_p2 = &v)
        {
            var __v_p = (float*)__v_p2;
            byte* __bytes_format = stackalloc byte[128];
            using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
            return ImGuiNative.ImGui_InputFloat3(__utf8z_label.Pointer, __v_p, __utf8z_format.Pointer, flags) != 0;
        }
    }
    public static bool InputFloat4(string label, ref System.Numerics.Vector4 v, string format = "%.3f", ImGuiInputTextFlags flags = (ImGuiInputTextFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(System.Numerics.Vector4* __v_p2 = &v)
        {
            var __v_p = (float*)__v_p2;
            byte* __bytes_format = stackalloc byte[128];
            using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
            return ImGuiNative.ImGui_InputFloat4(__utf8z_label.Pointer, __v_p, __utf8z_format.Pointer, flags) != 0;
        }
    }
    public static bool InputInt(string label, ref int v, int step = 1, int step_fast = 100, ImGuiInputTextFlags flags = (ImGuiInputTextFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(int* __v_p = &v)
        {
            return ImGuiNative.ImGui_InputInt(__utf8z_label.Pointer, __v_p, step, step_fast, flags) != 0;
        }
    }
    public static bool InputInt2(string label, int* v, ImGuiInputTextFlags flags = (ImGuiInputTextFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        return ImGuiNative.ImGui_InputInt2(__utf8z_label.Pointer, v, flags) != 0;
    }
    public static bool InputInt3(string label, int* v, ImGuiInputTextFlags flags = (ImGuiInputTextFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        return ImGuiNative.ImGui_InputInt3(__utf8z_label.Pointer, v, flags) != 0;
    }
    public static bool InputInt4(string label, int* v, ImGuiInputTextFlags flags = (ImGuiInputTextFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        return ImGuiNative.ImGui_InputInt4(__utf8z_label.Pointer, v, flags) != 0;
    }
    public static bool InputDouble(string label, ref double v, double step = 0.0, double step_fast = 0.0, string format = "%.6f", ImGuiInputTextFlags flags = (ImGuiInputTextFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(double* __v_p = &v)
        {
            byte* __bytes_format = stackalloc byte[128];
            using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
            return ImGuiNative.ImGui_InputDouble(__utf8z_label.Pointer, __v_p, step, step_fast, __utf8z_format.Pointer, flags) != 0;
        }
    }
    public static bool InputScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_step = 0, IntPtr p_step_fast = 0, string format = null, ImGuiInputTextFlags flags = (ImGuiInputTextFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte* __bytes_format = stackalloc byte[128];
        using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
        return ImGuiNative.ImGui_InputScalar(__utf8z_label.Pointer, data_type, p_data, p_step, p_step_fast, __utf8z_format.Pointer, flags) != 0;
    }
    public static bool InputScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_step = 0, IntPtr p_step_fast = 0, string format = null, ImGuiInputTextFlags flags = (ImGuiInputTextFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte* __bytes_format = stackalloc byte[128];
        using var __utf8z_format = new UTF8ZHelper(__bytes_format, 128, format);
        return ImGuiNative.ImGui_InputScalarN(__utf8z_label.Pointer, data_type, p_data, components, p_step, p_step_fast, __utf8z_format.Pointer, flags) != 0;
    }
    /// <summary>
    /// <para>Widgets: Color Editor/Picker (tip: the ColorEdit* functions have a little color square that can be left-clicked to open a picker, and right-clicked to open an option menu.)</para>
    /// <para>- Note that in C++ a 'float v[X]' function argument is the _same_ as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible.</para>
    /// - You can pass the address of a first float element out of a contiguous structure, e.g. &amp;myvector.x
    /// </summary>
    public static bool ColorEdit3(string label, ref System.Numerics.Vector3 col, ImGuiColorEditFlags flags = (ImGuiColorEditFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(System.Numerics.Vector3* __col_p2 = &col)
        {
            var __col_p = (float*)__col_p2;
            return ImGuiNative.ImGui_ColorEdit3(__utf8z_label.Pointer, __col_p, flags) != 0;
        }
    }
    public static bool ColorEdit4(string label, ref System.Numerics.Vector4 col, ImGuiColorEditFlags flags = (ImGuiColorEditFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(System.Numerics.Vector4* __col_p2 = &col)
        {
            var __col_p = (float*)__col_p2;
            return ImGuiNative.ImGui_ColorEdit4(__utf8z_label.Pointer, __col_p, flags) != 0;
        }
    }
    public static bool ColorPicker3(string label, ref System.Numerics.Vector3 col, ImGuiColorEditFlags flags = (ImGuiColorEditFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(System.Numerics.Vector3* __col_p2 = &col)
        {
            var __col_p = (float*)__col_p2;
            return ImGuiNative.ImGui_ColorPicker3(__utf8z_label.Pointer, __col_p, flags) != 0;
        }
    }
    public static bool ColorPicker4(string label, ref System.Numerics.Vector4 col, ImGuiColorEditFlags flags = (ImGuiColorEditFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(System.Numerics.Vector4* __col_p2 = &col)
        {
            var __col_p = (float*)__col_p2;
            return ImGuiNative.ImGui_ColorPicker4(__utf8z_label.Pointer, __col_p, flags, null) != 0;
        }
    }
    public static bool ColorPicker4(string label, ref System.Numerics.Vector4 col, ImGuiColorEditFlags flags, ref float ref_col)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(System.Numerics.Vector4* __col_p2 = &col)
        {
            var __col_p = (float*)__col_p2;
            fixed(float* __ref_col_p = &ref_col)
            {
                return ImGuiNative.ImGui_ColorPicker4(__utf8z_label.Pointer, __col_p, flags, __ref_col_p) != 0;
            }
        }
    }
    /// <summary>
    /// display a color square/button, hover for details, return true when pressed.
    /// </summary>
    public static bool ColorButton(string desc_id, System.Numerics.Vector4 col, ImGuiColorEditFlags flags = (ImGuiColorEditFlags)0, System.Numerics.Vector2 size = default)
    {
        byte* __bytes_desc_id = stackalloc byte[128];
        using var __utf8z_desc_id = new UTF8ZHelper(__bytes_desc_id, 128, desc_id);
        return ImGuiNative.ImGui_ColorButton(__utf8z_desc_id.Pointer, col, flags, size) != 0;
    }
    /// <summary>
    /// initialize current options (generally on application startup) if you want to select a default format, picker type, etc. User will be able to change many settings, unless you pass the _NoOptions flag to your calls.
    /// </summary>
    public static void SetColorEditOptions(ImGuiColorEditFlags flags)
    {
        ImGuiNative.ImGui_SetColorEditOptions(flags);
    }
    /// <summary>
    /// <para>Widgets: Trees</para>
    /// - TreeNode functions return true when the node is open, in which case you need to also call TreePop() when you are finished displaying the tree node contents.
    /// </summary>
    public static bool TreeNode(string label)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        return ImGuiNative.ImGui_TreeNode(__utf8z_label.Pointer) != 0;
    }
    /// <summary>
    /// helper variation to easily decorelate the id from the displayed string. Read the FAQ about why and how to use ID. to align arbitrary text at the same level as a TreeNode() you can use Bullet().
    /// </summary>
    public static bool TreeNodeStr(string str_id, string text)
    {
        byte* __bytes_str_id = stackalloc byte[128];
        using var __utf8z_str_id = new UTF8ZHelper(__bytes_str_id, 128, str_id);
        byte* __bytes_text = stackalloc byte[128];
        using var __utf8z_text = new UTF8ZHelper(__bytes_text, 128, text);
        return ImGuiNative.ImGui_TreeNodeStrUnformatted(__utf8z_str_id.Pointer, __utf8z_text.Pointer) != 0;
    }
    /// <summary>
    /// "
    /// </summary>
    public static bool TreeNodePtr(IntPtr ptr_id, string text)
    {
        byte* __bytes_text = stackalloc byte[128];
        using var __utf8z_text = new UTF8ZHelper(__bytes_text, 128, text);
        return ImGuiNative.ImGui_TreeNodePtrUnformatted(ptr_id, __utf8z_text.Pointer) != 0;
    }
    public static bool TreeNodeEx(string label, ImGuiTreeNodeFlags flags = (ImGuiTreeNodeFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        return ImGuiNative.ImGui_TreeNodeEx(__utf8z_label.Pointer, flags) != 0;
    }
    public static bool TreeNodeExStr(string str_id, ImGuiTreeNodeFlags flags, string text)
    {
        byte* __bytes_str_id = stackalloc byte[128];
        using var __utf8z_str_id = new UTF8ZHelper(__bytes_str_id, 128, str_id);
        byte* __bytes_text = stackalloc byte[128];
        using var __utf8z_text = new UTF8ZHelper(__bytes_text, 128, text);
        return ImGuiNative.ImGui_TreeNodeExStrUnformatted(__utf8z_str_id.Pointer, flags, __utf8z_text.Pointer) != 0;
    }
    public static bool TreeNodeExPtr(IntPtr ptr_id, ImGuiTreeNodeFlags flags, string text)
    {
        byte* __bytes_text = stackalloc byte[128];
        using var __utf8z_text = new UTF8ZHelper(__bytes_text, 128, text);
        return ImGuiNative.ImGui_TreeNodeExPtrUnformatted(ptr_id, flags, __utf8z_text.Pointer) != 0;
    }
    /// <summary>
    /// ~ Indent()+PushID(). Already called by TreeNode() when returning true, but you can call TreePush/TreePop yourself if desired.
    /// </summary>
    public static void TreePush(string str_id)
    {
        byte* __bytes_str_id = stackalloc byte[128];
        using var __utf8z_str_id = new UTF8ZHelper(__bytes_str_id, 128, str_id);
        ImGuiNative.ImGui_TreePush(__utf8z_str_id.Pointer);
    }
    /// <summary>
    /// "
    /// </summary>
    public static void TreePush(IntPtr ptr_id)
    {
        ImGuiNative.ImGui_TreePushPtr(ptr_id);
    }
    /// <summary>
    /// ~ Unindent()+PopID()
    /// </summary>
    public static void TreePop()
    {
        ImGuiNative.ImGui_TreePop();
    }
    /// <summary>
    /// horizontal distance preceding label when using TreeNode*() or Bullet() == (g.FontSize + style.FramePadding.x*2) for a regular unframed TreeNode
    /// </summary>
    public static float GetTreeNodeToLabelSpacing()
    {
        return ImGuiNative.ImGui_GetTreeNodeToLabelSpacing();
    }
    /// <summary>
    /// if returning 'true' the header is open. doesn't indent nor push on ID stack. user doesn't have to call TreePop().
    /// </summary>
    public static bool CollapsingHeader(string label, ImGuiTreeNodeFlags flags = (ImGuiTreeNodeFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        return ImGuiNative.ImGui_CollapsingHeader(__utf8z_label.Pointer, flags) != 0;
    }
    /// <summary>
    /// when 'p_visible != NULL': if '*p_visible==true' display an additional small close button on upper right of the header which will set the bool to false when clicked, if '*p_visible==false' don't display the header.
    /// </summary>
    public static bool CollapsingHeader(string label, ref bool p_visible, ImGuiTreeNodeFlags flags = (ImGuiTreeNodeFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte __p_visible_v = p_visible ? (byte)1 : (byte)0;
        try
        {
            return ImGuiNative.ImGui_CollapsingHeaderBoolPtr(__utf8z_label.Pointer, &__p_visible_v, flags) != 0;
        }
        finally
        {
            p_visible = __p_visible_v != 0;
        }
    }
    /// <summary>
    /// set next TreeNode/CollapsingHeader open state.
    /// </summary>
    public static void SetNextItemOpen(bool is_open, ImGuiCond cond = (ImGuiCond)0)
    {
        ImGuiNative.ImGui_SetNextItemOpen(is_open ? (byte)1 : (byte)0, cond);
    }
    /// <summary>
    /// set id to use for open/close storage (default to same as item id).
    /// </summary>
    public static void SetNextItemStorageID(uint storage_id)
    {
        ImGuiNative.ImGui_SetNextItemStorageID(storage_id);
    }
    /// <summary>
    /// <para>Widgets: Selectables</para>
    /// <para>- A selectable highlights when hovered, and can display another color when selected.</para>
    /// <para>- Neighbors selectable extend their highlight bounds in order to leave no gap between them. This is so a series of selected Selectable appear contiguous.</para>
    /// "bool selected" carry the selection state (read-only). Selectable() is clicked is returns true so you can modify your selection state. size.x==0.0: use remaining width, size.x&gt;0.0: specify width. size.y==0.0: use label height, size.y&gt;0.0: specify height
    /// </summary>
    public static bool Selectable(string label, bool selected = false, ImGuiSelectableFlags flags = (ImGuiSelectableFlags)0, System.Numerics.Vector2 size = default)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        return ImGuiNative.ImGui_Selectable(__utf8z_label.Pointer, selected ? (byte)1 : (byte)0, flags, size) != 0;
    }
    /// <summary>
    /// "bool* p_selected" point to the selection state (read-write), as a convenient helper.
    /// </summary>
    public static bool Selectable(string label, ref bool p_selected, ImGuiSelectableFlags flags = (ImGuiSelectableFlags)0, System.Numerics.Vector2 size = default)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte __p_selected_v = p_selected ? (byte)1 : (byte)0;
        try
        {
            return ImGuiNative.ImGui_SelectableBoolPtr(__utf8z_label.Pointer, &__p_selected_v, flags, size) != 0;
        }
        finally
        {
            p_selected = __p_selected_v != 0;
        }
    }
    /// <summary>
    /// <para>Multi-selection system for Selectable(), Checkbox(), TreeNode() functions [BETA]</para>
    /// <para>- This enables standard multi-selection/range-selection idioms (CTRL+Mouse/Keyboard, SHIFT+Mouse/Keyboard, etc.) in a way that also allow a clipper to be used.</para>
    /// <para>- ImGuiSelectionUserData is often used to store your item index within the current view (but may store something else).</para>
    /// <para>- Read comments near ImGuiMultiSelectIO for instructions/details and see 'Demo-&gt;Widgets-&gt;Selection State &amp; Multi-Select' for demo.</para>
    /// <para>- TreeNode() is technically supported but... using this correctly is more complicated. You need some sort of linear/random access to your tree,</para>
    /// <para>which is suited to advanced trees setups already implementing filters and clipper. We will work simplifying the current demo.</para>
    /// - 'selection_size' and 'items_count' parameters are optional and used by a few features. If they are costly for you to compute, you may avoid them.
    /// </summary>
    public static ImGuiMultiSelectIOPtr BeginMultiSelect(ImGuiMultiSelectFlags flags, int selection_size = -1, int items_count = -1)
    {
        return ImGuiMultiSelectIOPtr.Create(ImGuiNative.ImGui_BeginMultiSelect(flags, selection_size, items_count));
    }
    public static ImGuiMultiSelectIOPtr EndMultiSelect()
    {
        return ImGuiMultiSelectIOPtr.Create(ImGuiNative.ImGui_EndMultiSelect());
    }
    public static void SetNextItemSelectionUserData(long selection_user_data)
    {
        ImGuiNative.ImGui_SetNextItemSelectionUserData(selection_user_data);
    }
    /// <summary>
    /// Was the last item selection state toggled? Useful if you need the per-item information _before_ reaching EndMultiSelect(). We only returns toggle _event_ in order to handle clipping correctly.
    /// </summary>
    public static bool IsItemToggledSelection()
    {
        return ImGuiNative.ImGui_IsItemToggledSelection() != 0;
    }
    /// <summary>
    /// <para>Widgets: List Boxes</para>
    /// <para>- This is essentially a thin wrapper to using BeginChild/EndChild with the ImGuiChildFlags_FrameStyle flag for stylistic changes + displaying a label.</para>
    /// <para>- If you don't need a label you can probably simply use BeginChild() with the ImGuiChildFlags_FrameStyle flag for the same result.</para>
    /// <para>- You can submit contents and manage your selection state however you want it, by creating e.g. Selectable() or any other items.</para>
    /// <para>- The simplified/old ListBox() api are helpers over BeginListBox()/EndListBox() which are kept available for convenience purpose. This is analogous to how Combos are created.</para>
    /// <para>- Choose frame width:   size.x &gt; 0.0f: custom  /  size.x &lt; 0.0f or -FLT_MIN: right-align   /  size.x = 0.0f (default): use current ItemWidth</para>
    /// <para>- Choose frame height:  size.y &gt; 0.0f: custom  /  size.y &lt; 0.0f or -FLT_MIN: bottom-align  /  size.y = 0.0f (default): arbitrary default height which can fit ~7 items</para>
    /// open a framed scrolling region
    /// </summary>
    public static bool BeginListBox(string label, System.Numerics.Vector2 size = default)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        return ImGuiNative.ImGui_BeginListBox(__utf8z_label.Pointer, size) != 0;
    }
    /// <summary>
    /// only call EndListBox() if BeginListBox() returned true!
    /// </summary>
    public static void EndListBox()
    {
        ImGuiNative.ImGui_EndListBox();
    }
    public static bool ListBox(string label, ref int current_item, string[] items, int items_count, int height_in_items = -1)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(int* __current_item_p = &current_item)
        {
            byte** __array_items = stackalloc byte*[items.Length];
            byte* __storage_items = stackalloc byte[1024];
            using var __utf8z_items = new UTF8ZArrayHelper(__storage_items, 1024, __array_items, items);
            return ImGuiNative.ImGui_ListBox(__utf8z_label.Pointer, __current_item_p, __array_items, items_count, height_in_items) != 0;
        }
    }
    public static bool ListBox(string label, ref int current_item, ImGui_ListBoxCallback_getterDelegate getter, IntPtr user_data, int items_count, int height_in_items = -1)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(int* __current_item_p = &current_item)
        {
            var __getter_p = getter == null ? null : (delegate* unmanaged<IntPtr, int, byte*>)Marshal.GetFunctionPointerForDelegate(getter);
            try
            {
                return ImGuiNative.ImGui_ListBoxCallback(__utf8z_label.Pointer, __current_item_p, __getter_p, user_data, items_count, height_in_items) != 0;
            }
            finally
            {
                GC.KeepAlive(getter);
            }
        }
    }
    /// <summary>
    /// <para>Widgets: Data Plotting</para>
    /// - Consider using ImPlot (https://github.com/epezent/implot) which is much better!
    /// </summary>
    public static void PlotLines(string label, ref float values, int values_count, int values_offset = 0, string overlay_text = null, float scale_min = float.MaxValue, float scale_max = float.MaxValue, System.Numerics.Vector2 graph_size = default, int stride = sizeof(float))
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(float* __values_p = &values)
        {
            byte* __bytes_overlay_text = stackalloc byte[128];
            using var __utf8z_overlay_text = new UTF8ZHelper(__bytes_overlay_text, 128, overlay_text);
            ImGuiNative.ImGui_PlotLines(__utf8z_label.Pointer, __values_p, values_count, values_offset, __utf8z_overlay_text.Pointer, scale_min, scale_max, graph_size, stride);
        }
    }
    public static void PlotLines(string label, ImGui_PlotLinesCallback_values_getterDelegate values_getter, IntPtr data, int values_count, int values_offset = 0, string overlay_text = null, float scale_min = float.MaxValue, float scale_max = float.MaxValue, System.Numerics.Vector2 graph_size = default)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        var __values_getter_p = values_getter == null ? null : (delegate* unmanaged<IntPtr, int, float>)Marshal.GetFunctionPointerForDelegate(values_getter);
        byte* __bytes_overlay_text = stackalloc byte[128];
        using var __utf8z_overlay_text = new UTF8ZHelper(__bytes_overlay_text, 128, overlay_text);
        try
        {
            ImGuiNative.ImGui_PlotLinesCallback(__utf8z_label.Pointer, __values_getter_p, data, values_count, values_offset, __utf8z_overlay_text.Pointer, scale_min, scale_max, graph_size);
        }
        finally
        {
            GC.KeepAlive(values_getter);
        }
    }
    public static void PlotHistogram(string label, ref float values, int values_count, int values_offset = 0, string overlay_text = null, float scale_min = float.MaxValue, float scale_max = float.MaxValue, System.Numerics.Vector2 graph_size = default, int stride = sizeof(float))
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        fixed(float* __values_p = &values)
        {
            byte* __bytes_overlay_text = stackalloc byte[128];
            using var __utf8z_overlay_text = new UTF8ZHelper(__bytes_overlay_text, 128, overlay_text);
            ImGuiNative.ImGui_PlotHistogram(__utf8z_label.Pointer, __values_p, values_count, values_offset, __utf8z_overlay_text.Pointer, scale_min, scale_max, graph_size, stride);
        }
    }
    public static void PlotHistogram(string label, ImGui_PlotHistogramCallback_values_getterDelegate values_getter, IntPtr data, int values_count, int values_offset = 0, string overlay_text = null, float scale_min = float.MaxValue, float scale_max = float.MaxValue, System.Numerics.Vector2 graph_size = default)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        var __values_getter_p = values_getter == null ? null : (delegate* unmanaged<IntPtr, int, float>)Marshal.GetFunctionPointerForDelegate(values_getter);
        byte* __bytes_overlay_text = stackalloc byte[128];
        using var __utf8z_overlay_text = new UTF8ZHelper(__bytes_overlay_text, 128, overlay_text);
        try
        {
            ImGuiNative.ImGui_PlotHistogramCallback(__utf8z_label.Pointer, __values_getter_p, data, values_count, values_offset, __utf8z_overlay_text.Pointer, scale_min, scale_max, graph_size);
        }
        finally
        {
            GC.KeepAlive(values_getter);
        }
    }
    /// <summary>
    /// <para>Widgets: Menus</para>
    /// <para>- Use BeginMenuBar() on a window ImGuiWindowFlags_MenuBar to append to its menu bar.</para>
    /// <para>- Use BeginMainMenuBar() to create a menu bar at the top of the screen and append to it.</para>
    /// <para>- Use BeginMenu() to create a menu. You can call BeginMenu() multiple time with the same identifier to append more items to it.</para>
    /// <para>- Not that MenuItem() keyboardshortcuts are displayed as a convenience but _not processed_ by Dear ImGui at the moment.</para>
    /// append to menu-bar of current window (requires ImGuiWindowFlags_MenuBar flag set on parent window).
    /// </summary>
    public static bool BeginMenuBar()
    {
        return ImGuiNative.ImGui_BeginMenuBar() != 0;
    }
    /// <summary>
    /// only call EndMenuBar() if BeginMenuBar() returns true!
    /// </summary>
    public static void EndMenuBar()
    {
        ImGuiNative.ImGui_EndMenuBar();
    }
    /// <summary>
    /// create and append to a full screen menu-bar.
    /// </summary>
    public static bool BeginMainMenuBar()
    {
        return ImGuiNative.ImGui_BeginMainMenuBar() != 0;
    }
    /// <summary>
    /// only call EndMainMenuBar() if BeginMainMenuBar() returns true!
    /// </summary>
    public static void EndMainMenuBar()
    {
        ImGuiNative.ImGui_EndMainMenuBar();
    }
    /// <summary>
    /// create a sub-menu entry. only call EndMenu() if this returns true!
    /// </summary>
    public static bool BeginMenu(string label, bool enabled = true)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        return ImGuiNative.ImGui_BeginMenu(__utf8z_label.Pointer, enabled ? (byte)1 : (byte)0) != 0;
    }
    /// <summary>
    /// only call EndMenu() if BeginMenu() returns true!
    /// </summary>
    public static void EndMenu()
    {
        ImGuiNative.ImGui_EndMenu();
    }
    /// <summary>
    /// return true when activated.
    /// </summary>
    public static bool MenuItem(string label, string shortcut = null, bool selected = false, bool enabled = true)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte* __bytes_shortcut = stackalloc byte[128];
        using var __utf8z_shortcut = new UTF8ZHelper(__bytes_shortcut, 128, shortcut);
        return ImGuiNative.ImGui_MenuItem(__utf8z_label.Pointer, __utf8z_shortcut.Pointer, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0) != 0;
    }
    /// <summary>
    /// return true when activated + toggle (*p_selected) if p_selected != NULL
    /// </summary>
    public static bool MenuItem(string label, string shortcut, ref bool p_selected, bool enabled = true)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte* __bytes_shortcut = stackalloc byte[128];
        using var __utf8z_shortcut = new UTF8ZHelper(__bytes_shortcut, 128, shortcut);
        byte __p_selected_v = p_selected ? (byte)1 : (byte)0;
        try
        {
            return ImGuiNative.ImGui_MenuItemBoolPtr(__utf8z_label.Pointer, __utf8z_shortcut.Pointer, &__p_selected_v, enabled ? (byte)1 : (byte)0) != 0;
        }
        finally
        {
            p_selected = __p_selected_v != 0;
        }
    }
    /// <summary>
    /// <para>Tooltips</para>
    /// <para>- Tooltips are windows following the mouse. They do not take focus away.</para>
    /// <para>- A tooltip window can contain items of any types.</para>
    /// <para>- SetTooltip() is more or less a shortcut for the 'if (BeginTooltip()) { Text(...); EndTooltip(); }' idiom (with a subtlety that it discard any previously submitted tooltip)</para>
    /// begin/append a tooltip window.
    /// </summary>
    public static bool BeginTooltip()
    {
        return ImGuiNative.ImGui_BeginTooltip() != 0;
    }
    /// <summary>
    /// only call EndTooltip() if BeginTooltip()/BeginItemTooltip() returns true!
    /// </summary>
    public static void EndTooltip()
    {
        ImGuiNative.ImGui_EndTooltip();
    }
    /// <summary>
    /// set a text-only tooltip. Often used after a ImGui::IsItemHovered() check. Override any previous call to SetTooltip().
    /// </summary>
    public static void SetTooltip(string text)
    {
        byte* __bytes_text = stackalloc byte[128];
        using var __utf8z_text = new UTF8ZHelper(__bytes_text, 128, text);
        ImGuiNative.ImGui_SetTooltipUnformatted(__utf8z_text.Pointer);
    }
    /// <summary>
    /// <para>Tooltips: helpers for showing a tooltip when hovering an item</para>
    /// <para>- BeginItemTooltip() is a shortcut for the 'if (IsItemHovered(ImGuiHoveredFlags_ForTooltip) &amp;&amp; BeginTooltip())' idiom.</para>
    /// <para>- SetItemTooltip() is a shortcut for the 'if (IsItemHovered(ImGuiHoveredFlags_ForTooltip)) { SetTooltip(...); }' idiom.</para>
    /// <para>- Where 'ImGuiHoveredFlags_ForTooltip' itself is a shortcut to use 'style.HoverFlagsForTooltipMouse' or 'style.HoverFlagsForTooltipNav' depending on active input type. For mouse it defaults to 'ImGuiHoveredFlags_Stationary | ImGuiHoveredFlags_DelayShort'.</para>
    /// begin/append a tooltip window if preceding item was hovered.
    /// </summary>
    public static bool BeginItemTooltip()
    {
        return ImGuiNative.ImGui_BeginItemTooltip() != 0;
    }
    /// <summary>
    /// set a text-only tooltip if preceding item was hovered. override any previous call to SetTooltip().
    /// </summary>
    public static void SetItemTooltip(string text)
    {
        byte* __bytes_text = stackalloc byte[128];
        using var __utf8z_text = new UTF8ZHelper(__bytes_text, 128, text);
        ImGuiNative.ImGui_SetItemTooltipUnformatted(__utf8z_text.Pointer);
    }
    /// <summary>
    /// <para>Popups, Modals</para>
    /// <para>- They block normal mouse hovering detection (and therefore most mouse interactions) behind them.</para>
    /// <para>- If not modal: they can be closed by clicking anywhere outside them, or by pressing ESCAPE.</para>
    /// <para>- Their visibility state (~bool) is held internally instead of being held by the programmer as we are used to with regular Begin*() calls.</para>
    /// <para>- The 3 properties above are related: we need to retain popup visibility state in the library because popups may be closed as any time.</para>
    /// <para>- You can bypass the hovering restriction by using ImGuiHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered() or IsWindowHovered().</para>
    /// <para>- IMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup and BeginPopup generally needs to be at the same level of the stack.</para>
    /// <para>This is sometimes leading to confusing mistakes. May rework this in the future.</para>
    /// <para>- BeginPopup(): query popup state, if open start appending into the window. Call EndPopup() afterwards if returned true. ImGuiWindowFlags are forwarded to the window.</para>
    /// <para>- BeginPopupModal(): block every interaction behind the window, cannot be closed by user, add a dimming background, has a title bar.</para>
    /// return true if the popup is open, and you can start outputting to it.
    /// </summary>
    public static bool BeginPopup(string str_id, ImGuiWindowFlags flags = (ImGuiWindowFlags)0)
    {
        byte* __bytes_str_id = stackalloc byte[128];
        using var __utf8z_str_id = new UTF8ZHelper(__bytes_str_id, 128, str_id);
        return ImGuiNative.ImGui_BeginPopup(__utf8z_str_id.Pointer, flags) != 0;
    }
    /// <summary>
    /// return true if the modal is open, and you can start outputting to it.
    /// </summary>
    public static bool BeginPopupModal(string name)
    {
        byte* __bytes_name = stackalloc byte[128];
        using var __utf8z_name = new UTF8ZHelper(__bytes_name, 128, name);
        return ImGuiNative.ImGui_BeginPopupModal(__utf8z_name.Pointer, null, (ImGuiWindowFlags)0) != 0;
    }
    /// <summary>
    /// return true if the modal is open, and you can start outputting to it.
    /// </summary>
    public static bool BeginPopupModal(string name, ref bool p_open)
    {
        byte* __bytes_name = stackalloc byte[128];
        using var __utf8z_name = new UTF8ZHelper(__bytes_name, 128, name);
        byte __p_open_v = p_open ? (byte)1 : (byte)0;
        try
        {
            return ImGuiNative.ImGui_BeginPopupModal(__utf8z_name.Pointer, &__p_open_v, (ImGuiWindowFlags)0) != 0;
        }
        finally
        {
            p_open = __p_open_v != 0;
        }
    }
    /// <summary>
    /// return true if the modal is open, and you can start outputting to it.
    /// </summary>
    public static bool BeginPopupModal(string name, ref bool p_open, ImGuiWindowFlags flags)
    {
        byte* __bytes_name = stackalloc byte[128];
        using var __utf8z_name = new UTF8ZHelper(__bytes_name, 128, name);
        byte __p_open_v = p_open ? (byte)1 : (byte)0;
        try
        {
            return ImGuiNative.ImGui_BeginPopupModal(__utf8z_name.Pointer, &__p_open_v, flags) != 0;
        }
        finally
        {
            p_open = __p_open_v != 0;
        }
    }
    /// <summary>
    /// only call EndPopup() if BeginPopupXXX() returns true!
    /// </summary>
    public static void EndPopup()
    {
        ImGuiNative.ImGui_EndPopup();
    }
    /// <summary>
    /// <para>Popups: open/close functions</para>
    /// <para>- OpenPopup(): set popup state to open. ImGuiPopupFlags are available for opening options.</para>
    /// <para>- If not modal: they can be closed by clicking anywhere outside them, or by pressing ESCAPE.</para>
    /// <para>- CloseCurrentPopup(): use inside the BeginPopup()/EndPopup() scope to close manually.</para>
    /// <para>- CloseCurrentPopup() is called by default by Selectable()/MenuItem() when activated (FIXME: need some options).</para>
    /// <para>- Use ImGuiPopupFlags_NoOpenOverExistingPopup to avoid opening a popup if there's already one at the same level. This is equivalent to e.g. testing for !IsAnyPopupOpen() prior to OpenPopup().</para>
    /// <para>- Use IsWindowAppearing() after BeginPopup() to tell if a window just opened.</para>
    /// <para>- IMPORTANT: Notice that for OpenPopupOnItemClick() we exceptionally default flags to 1 (== ImGuiPopupFlags_MouseButtonRight) for backward compatibility with older API taking 'int mouse_button = 1' parameter</para>
    /// call to mark popup as open (don't call every frame!).
    /// </summary>
    public static void OpenPopup(string str_id, ImGuiPopupFlags popup_flags = (ImGuiPopupFlags)0)
    {
        byte* __bytes_str_id = stackalloc byte[128];
        using var __utf8z_str_id = new UTF8ZHelper(__bytes_str_id, 128, str_id);
        ImGuiNative.ImGui_OpenPopup(__utf8z_str_id.Pointer, popup_flags);
    }
    /// <summary>
    /// id overload to facilitate calling from nested stacks
    /// </summary>
    public static void OpenPopup(uint id, ImGuiPopupFlags popup_flags = (ImGuiPopupFlags)0)
    {
        ImGuiNative.ImGui_OpenPopupID(id, popup_flags);
    }
    /// <summary>
    /// helper to open popup when clicked on last item. Default to ImGuiPopupFlags_MouseButtonRight == 1. (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors)
    /// </summary>
    public static void OpenPopupOnItemClick(string str_id = null, ImGuiPopupFlags popup_flags = (ImGuiPopupFlags)1)
    {
        byte* __bytes_str_id = stackalloc byte[128];
        using var __utf8z_str_id = new UTF8ZHelper(__bytes_str_id, 128, str_id);
        ImGuiNative.ImGui_OpenPopupOnItemClick(__utf8z_str_id.Pointer, popup_flags);
    }
    /// <summary>
    /// manually close the popup we have begin-ed into.
    /// </summary>
    public static void CloseCurrentPopup()
    {
        ImGuiNative.ImGui_CloseCurrentPopup();
    }
    /// <summary>
    /// <para>Popups: open+begin combined functions helpers</para>
    /// <para>- Helpers to do OpenPopup+BeginPopup where the Open action is triggered by e.g. hovering an item and right-clicking.</para>
    /// <para>- They are convenient to easily create context menus, hence the name.</para>
    /// <para>- IMPORTANT: Notice that BeginPopupContextXXX takes ImGuiPopupFlags just like OpenPopup() and unlike BeginPopup(). For full consistency, we may add ImGuiWindowFlags to the BeginPopupContextXXX functions in the future.</para>
    /// <para>- IMPORTANT: Notice that we exceptionally default their flags to 1 (== ImGuiPopupFlags_MouseButtonRight) for backward compatibility with older API taking 'int mouse_button = 1' parameter, so if you add other flags remember to re-add the ImGuiPopupFlags_MouseButtonRight.</para>
    /// open+begin popup when clicked on last item. Use str_id==NULL to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!
    /// </summary>
    public static bool BeginPopupContextItem(string str_id = null, ImGuiPopupFlags popup_flags = (ImGuiPopupFlags)1)
    {
        byte* __bytes_str_id = stackalloc byte[128];
        using var __utf8z_str_id = new UTF8ZHelper(__bytes_str_id, 128, str_id);
        return ImGuiNative.ImGui_BeginPopupContextItem(__utf8z_str_id.Pointer, popup_flags) != 0;
    }
    /// <summary>
    /// open+begin popup when clicked on current window.
    /// </summary>
    public static bool BeginPopupContextWindow(string str_id = null, ImGuiPopupFlags popup_flags = (ImGuiPopupFlags)1)
    {
        byte* __bytes_str_id = stackalloc byte[128];
        using var __utf8z_str_id = new UTF8ZHelper(__bytes_str_id, 128, str_id);
        return ImGuiNative.ImGui_BeginPopupContextWindow(__utf8z_str_id.Pointer, popup_flags) != 0;
    }
    /// <summary>
    /// open+begin popup when clicked in void (where there are no windows).
    /// </summary>
    public static bool BeginPopupContextVoid(string str_id = null, ImGuiPopupFlags popup_flags = (ImGuiPopupFlags)1)
    {
        byte* __bytes_str_id = stackalloc byte[128];
        using var __utf8z_str_id = new UTF8ZHelper(__bytes_str_id, 128, str_id);
        return ImGuiNative.ImGui_BeginPopupContextVoid(__utf8z_str_id.Pointer, popup_flags) != 0;
    }
    /// <summary>
    /// <para>Popups: query functions</para>
    /// <para>- IsPopupOpen(): return true if the popup is open at the current BeginPopup() level of the popup stack.</para>
    /// <para>- IsPopupOpen() with ImGuiPopupFlags_AnyPopupId: return true if any popup is open at the current BeginPopup() level of the popup stack.</para>
    /// <para>- IsPopupOpen() with ImGuiPopupFlags_AnyPopupId + ImGuiPopupFlags_AnyPopupLevel: return true if any popup is open.</para>
    /// return true if the popup is open.
    /// </summary>
    public static bool IsPopupOpen(string str_id, ImGuiPopupFlags flags = (ImGuiPopupFlags)0)
    {
        byte* __bytes_str_id = stackalloc byte[128];
        using var __utf8z_str_id = new UTF8ZHelper(__bytes_str_id, 128, str_id);
        return ImGuiNative.ImGui_IsPopupOpen(__utf8z_str_id.Pointer, flags) != 0;
    }
    /// <summary>
    /// <para>Tables</para>
    /// <para>- Full-featured replacement for old Columns API.</para>
    /// <para>- See Demo-&gt;Tables for demo code. See top of imgui_tables.cpp for general commentary.</para>
    /// <para>- See ImGuiTableFlags_ and ImGuiTableColumnFlags_ enums for a description of available flags.</para>
    /// <para>The typical call flow is:</para>
    /// <para>- 1. Call BeginTable(), early out if returning false.</para>
    /// <para>- 2. Optionally call TableSetupColumn() to submit column name/flags/defaults.</para>
    /// <para>- 3. Optionally call TableSetupScrollFreeze() to request scroll freezing of columns/rows.</para>
    /// <para>- 4. Optionally call TableHeadersRow() to submit a header row. Names are pulled from TableSetupColumn() data.</para>
    /// <para>- 5. Populate contents:</para>
    /// <para>- In most situations you can use TableNextRow() + TableSetColumnIndex(N) to start appending into a column.</para>
    /// <para>- If you are using tables as a sort of grid, where every column is holding the same type of contents,</para>
    /// <para>you may prefer using TableNextColumn() instead of TableNextRow() + TableSetColumnIndex().</para>
    /// <para>TableNextColumn() will automatically wrap-around into the next row if needed.</para>
    /// <para>- IMPORTANT: Comparatively to the old Columns() API, we need to call TableNextColumn() for the first column!</para>
    /// <para>- Summary of possible call flow:</para>
    /// <para>- TableNextRow() -&gt; TableSetColumnIndex(0) -&gt; Text("Hello 0") -&gt; TableSetColumnIndex(1) -&gt; Text("Hello 1")  // OK</para>
    /// <para>- TableNextRow() -&gt; TableNextColumn()      -&gt; Text("Hello 0") -&gt; TableNextColumn()      -&gt; Text("Hello 1")  // OK</para>
    /// <para>-                   TableNextColumn()      -&gt; Text("Hello 0") -&gt; TableNextColumn()      -&gt; Text("Hello 1")  // OK: TableNextColumn() automatically gets to next row!</para>
    /// <para>- TableNextRow()                           -&gt; Text("Hello 0")                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!</para>
    /// - 5. Call EndTable()
    /// </summary>
    public static bool BeginTable(string str_id, int columns, ImGuiTableFlags flags = (ImGuiTableFlags)0, ImOptionalArg<System.Numerics.Vector2> outer_size = default, float inner_width = 0.0f)
    {
        byte* __bytes_str_id = stackalloc byte[128];
        using var __utf8z_str_id = new UTF8ZHelper(__bytes_str_id, 128, str_id);
        return ImGuiNative.ImGui_BeginTable(__utf8z_str_id.Pointer, columns, flags, outer_size.Get(new System.Numerics.Vector2(0.0f, 0.0f)), inner_width) != 0;
    }
    /// <summary>
    /// only call EndTable() if BeginTable() returns true!
    /// </summary>
    public static void EndTable()
    {
        ImGuiNative.ImGui_EndTable();
    }
    /// <summary>
    /// append into the first cell of a new row.
    /// </summary>
    public static void TableNextRow(ImGuiTableRowFlags row_flags = (ImGuiTableRowFlags)0, float min_row_height = 0.0f)
    {
        ImGuiNative.ImGui_TableNextRow(row_flags, min_row_height);
    }
    /// <summary>
    /// append into the next column (or first column of next row if currently in last column). Return true when column is visible.
    /// </summary>
    public static bool TableNextColumn()
    {
        return ImGuiNative.ImGui_TableNextColumn() != 0;
    }
    /// <summary>
    /// append into the specified column. Return true when column is visible.
    /// </summary>
    public static bool TableSetColumnIndex(int column_n)
    {
        return ImGuiNative.ImGui_TableSetColumnIndex(column_n) != 0;
    }
    /// <summary>
    /// <para>Tables: Headers &amp; Columns declaration</para>
    /// <para>- Use TableSetupColumn() to specify label, resizing policy, default width/weight, id, various other flags etc.</para>
    /// <para>- Use TableHeadersRow() to create a header row and automatically submit a TableHeader() for each column.</para>
    /// <para>Headers are required to perform: reordering, sorting, and opening the context menu.</para>
    /// <para>The context menu can also be made available in columns body using ImGuiTableFlags_ContextMenuInBody.</para>
    /// <para>- You may manually submit headers using TableNextRow() + TableHeader() calls, but this is only useful in</para>
    /// <para>some advanced use cases (e.g. adding custom widgets in header row).</para>
    /// - Use TableSetupScrollFreeze() to lock columns/rows so they stay visible when scrolled.
    /// </summary>
    public static void TableSetupColumn(string label, ImGuiTableColumnFlags flags = (ImGuiTableColumnFlags)0, float init_width_or_weight = 0.0f, uint user_id = 0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        ImGuiNative.ImGui_TableSetupColumn(__utf8z_label.Pointer, flags, init_width_or_weight, user_id);
    }
    /// <summary>
    /// lock columns/rows so they stay visible when scrolled.
    /// </summary>
    public static void TableSetupScrollFreeze(int cols, int rows)
    {
        ImGuiNative.ImGui_TableSetupScrollFreeze(cols, rows);
    }
    /// <summary>
    /// submit one header cell manually (rarely used)
    /// </summary>
    public static void TableHeader(string label)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        ImGuiNative.ImGui_TableHeader(__utf8z_label.Pointer);
    }
    /// <summary>
    /// submit a row with headers cells based on data provided to TableSetupColumn() + submit context menu
    /// </summary>
    public static void TableHeadersRow()
    {
        ImGuiNative.ImGui_TableHeadersRow();
    }
    /// <summary>
    /// submit a row with angled headers for every column with the ImGuiTableColumnFlags_AngledHeader flag. MUST BE FIRST ROW.
    /// </summary>
    public static void TableAngledHeadersRow()
    {
        ImGuiNative.ImGui_TableAngledHeadersRow();
    }
    /// <summary>
    /// <para>Tables: Sorting &amp; Miscellaneous functions</para>
    /// <para>- Sorting: call TableGetSortSpecs() to retrieve latest sort specs for the table. NULL when not sorting.</para>
    /// <para>When 'sort_specs-&gt;SpecsDirty == true' you should sort your data. It will be true when sorting specs have</para>
    /// <para>changed since last call, or the first time. Make sure to set 'SpecsDirty = false' after sorting,</para>
    /// <para>else you may wastefully sort your data every frame!</para>
    /// <para>- Functions args 'int column_n' treat the default value of -1 as the same as passing the current column index.</para>
    /// get latest sort specs for the table (NULL if not sorting).  Lifetime: don't hold on this pointer over multiple frames or past any subsequent call to BeginTable().
    /// </summary>
    public static ImGuiTableSortSpecsPtr TableGetSortSpecs()
    {
        return ImGuiTableSortSpecsPtr.Create(ImGuiNative.ImGui_TableGetSortSpecs());
    }
    /// <summary>
    /// return number of columns (value passed to BeginTable)
    /// </summary>
    public static int TableGetColumnCount()
    {
        return ImGuiNative.ImGui_TableGetColumnCount();
    }
    /// <summary>
    /// return current column index.
    /// </summary>
    public static int TableGetColumnIndex()
    {
        return ImGuiNative.ImGui_TableGetColumnIndex();
    }
    /// <summary>
    /// return current row index.
    /// </summary>
    public static int TableGetRowIndex()
    {
        return ImGuiNative.ImGui_TableGetRowIndex();
    }
    /// <summary>
    /// return "" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column.
    /// </summary>
    public static string TableGetColumnName(int column_n = -1)
    {
        return Marshal.PtrToStringUTF8((IntPtr)ImGuiNative.ImGui_TableGetColumnName(column_n));
    }
    /// <summary>
    /// return column flags so you can query their Enabled/Visible/Sorted/Hovered status flags. Pass -1 to use current column.
    /// </summary>
    public static ImGuiTableColumnFlags TableGetColumnFlags(int column_n = -1)
    {
        return ImGuiNative.ImGui_TableGetColumnFlags(column_n);
    }
    /// <summary>
    /// change user accessible enabled/disabled state of a column. Set to false to hide the column. User can use the context menu to change this themselves (right-click in headers, or right-click in columns body with ImGuiTableFlags_ContextMenuInBody)
    /// </summary>
    public static void TableSetColumnEnabled(int column_n, bool v)
    {
        ImGuiNative.ImGui_TableSetColumnEnabled(column_n, v ? (byte)1 : (byte)0);
    }
    /// <summary>
    /// return hovered column. return -1 when table is not hovered. return columns_count if the unused space at the right of visible columns is hovered. Can also use (TableGetColumnFlags() &amp; ImGuiTableColumnFlags_IsHovered) instead.
    /// </summary>
    public static int TableGetHoveredColumn()
    {
        return ImGuiNative.ImGui_TableGetHoveredColumn();
    }
    /// <summary>
    /// change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details.
    /// </summary>
    public static void TableSetBgColor(ImGuiTableBgTarget target, uint color, int column_n = -1)
    {
        ImGuiNative.ImGui_TableSetBgColor(target, color, column_n);
    }
    /// <summary>
    /// <para>Legacy Columns API (prefer using Tables!)</para>
    /// - You can also use SameLine(pos_x) to mimic simplified columns.
    /// </summary>
    public static void Columns(int count = 1, string id = null, bool borders = true)
    {
        byte* __bytes_id = stackalloc byte[128];
        using var __utf8z_id = new UTF8ZHelper(__bytes_id, 128, id);
        ImGuiNative.ImGui_Columns(count, __utf8z_id.Pointer, borders ? (byte)1 : (byte)0);
    }
    /// <summary>
    /// next column, defaults to current row or next row if the current row is finished
    /// </summary>
    public static void NextColumn()
    {
        ImGuiNative.ImGui_NextColumn();
    }
    /// <summary>
    /// get current column index
    /// </summary>
    public static int GetColumnIndex()
    {
        return ImGuiNative.ImGui_GetColumnIndex();
    }
    /// <summary>
    /// get column width (in pixels). pass -1 to use current column
    /// </summary>
    public static float GetColumnWidth(int column_index = -1)
    {
        return ImGuiNative.ImGui_GetColumnWidth(column_index);
    }
    /// <summary>
    /// set column width (in pixels). pass -1 to use current column
    /// </summary>
    public static void SetColumnWidth(int column_index, float width)
    {
        ImGuiNative.ImGui_SetColumnWidth(column_index, width);
    }
    /// <summary>
    /// get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0f
    /// </summary>
    public static float GetColumnOffset(int column_index = -1)
    {
        return ImGuiNative.ImGui_GetColumnOffset(column_index);
    }
    /// <summary>
    /// set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column
    /// </summary>
    public static void SetColumnOffset(int column_index, float offset_x)
    {
        ImGuiNative.ImGui_SetColumnOffset(column_index, offset_x);
    }
    public static int GetColumnsCount()
    {
        return ImGuiNative.ImGui_GetColumnsCount();
    }
    /// <summary>
    /// <para>Tab Bars, Tabs</para>
    /// <para>- Note: Tabs are automatically created by the docking system (when in 'docking' branch). Use this to create tab bars/tabs yourself.</para>
    /// create and append into a TabBar
    /// </summary>
    public static bool BeginTabBar(string str_id, ImGuiTabBarFlags flags = (ImGuiTabBarFlags)0)
    {
        byte* __bytes_str_id = stackalloc byte[128];
        using var __utf8z_str_id = new UTF8ZHelper(__bytes_str_id, 128, str_id);
        return ImGuiNative.ImGui_BeginTabBar(__utf8z_str_id.Pointer, flags) != 0;
    }
    /// <summary>
    /// only call EndTabBar() if BeginTabBar() returns true!
    /// </summary>
    public static void EndTabBar()
    {
        ImGuiNative.ImGui_EndTabBar();
    }
    /// <summary>
    /// create a Tab. Returns true if the Tab is selected.
    /// </summary>
    public static bool BeginTabItem(string label)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        return ImGuiNative.ImGui_BeginTabItem(__utf8z_label.Pointer, null, (ImGuiTabItemFlags)0) != 0;
    }
    /// <summary>
    /// create a Tab. Returns true if the Tab is selected.
    /// </summary>
    public static bool BeginTabItem(string label, ref bool p_open)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte __p_open_v = p_open ? (byte)1 : (byte)0;
        try
        {
            return ImGuiNative.ImGui_BeginTabItem(__utf8z_label.Pointer, &__p_open_v, (ImGuiTabItemFlags)0) != 0;
        }
        finally
        {
            p_open = __p_open_v != 0;
        }
    }
    /// <summary>
    /// create a Tab. Returns true if the Tab is selected.
    /// </summary>
    public static bool BeginTabItem(string label, ref bool p_open, ImGuiTabItemFlags flags)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        byte __p_open_v = p_open ? (byte)1 : (byte)0;
        try
        {
            return ImGuiNative.ImGui_BeginTabItem(__utf8z_label.Pointer, &__p_open_v, flags) != 0;
        }
        finally
        {
            p_open = __p_open_v != 0;
        }
    }
    /// <summary>
    /// only call EndTabItem() if BeginTabItem() returns true!
    /// </summary>
    public static void EndTabItem()
    {
        ImGuiNative.ImGui_EndTabItem();
    }
    /// <summary>
    /// create a Tab behaving like a button. return true when clicked. cannot be selected in the tab bar.
    /// </summary>
    public static bool TabItemButton(string label, ImGuiTabItemFlags flags = (ImGuiTabItemFlags)0)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        return ImGuiNative.ImGui_TabItemButton(__utf8z_label.Pointer, flags) != 0;
    }
    /// <summary>
    /// notify TabBar or Docking system of a closed tab/window ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name.
    /// </summary>
    public static void SetTabItemClosed(string tab_or_docked_window_label)
    {
        byte* __bytes_tab_or_docked_window_label = stackalloc byte[128];
        using var __utf8z_tab_or_docked_window_label = new UTF8ZHelper(__bytes_tab_or_docked_window_label, 128, tab_or_docked_window_label);
        ImGuiNative.ImGui_SetTabItemClosed(__utf8z_tab_or_docked_window_label.Pointer);
    }
    /// <summary>
    /// <para>Logging/Capture</para>
    /// <para>- All text output from the interface can be captured into tty/file/clipboard. By default, tree nodes are automatically opened during logging.</para>
    /// start logging to tty (stdout)
    /// </summary>
    public static void LogToTTY(int auto_open_depth = -1)
    {
        ImGuiNative.ImGui_LogToTTY(auto_open_depth);
    }
    /// <summary>
    /// start logging to file
    /// </summary>
    public static void LogToFile(int auto_open_depth = -1, string filename = null)
    {
        byte* __bytes_filename = stackalloc byte[128];
        using var __utf8z_filename = new UTF8ZHelper(__bytes_filename, 128, filename);
        ImGuiNative.ImGui_LogToFile(auto_open_depth, __utf8z_filename.Pointer);
    }
    /// <summary>
    /// start logging to OS clipboard
    /// </summary>
    public static void LogToClipboard(int auto_open_depth = -1)
    {
        ImGuiNative.ImGui_LogToClipboard(auto_open_depth);
    }
    /// <summary>
    /// stop logging (close file, etc.)
    /// </summary>
    public static void LogFinish()
    {
        ImGuiNative.ImGui_LogFinish();
    }
    /// <summary>
    /// helper to display buttons for logging to tty/file/clipboard
    /// </summary>
    public static void LogButtons()
    {
        ImGuiNative.ImGui_LogButtons();
    }
    /// <summary>
    /// pass text data straight to log (without being displayed)
    /// </summary>
    public static void LogText(string text)
    {
        byte* __bytes_text = stackalloc byte[128];
        using var __utf8z_text = new UTF8ZHelper(__bytes_text, 128, text);
        ImGuiNative.ImGui_LogTextUnformatted(__utf8z_text.Pointer);
    }
    /// <summary>
    /// <para>Drag and Drop</para>
    /// <para>- On source items, call BeginDragDropSource(), if it returns true also call SetDragDropPayload() + EndDragDropSource().</para>
    /// <para>- On target candidates, call BeginDragDropTarget(), if it returns true also call AcceptDragDropPayload() + EndDragDropTarget().</para>
    /// <para>- If you stop calling BeginDragDropSource() the payload is preserved however it won't have a preview tooltip (we currently display a fallback "..." tooltip, see #1725)</para>
    /// <para>- An item can be both drag source and drop target.</para>
    /// call after submitting an item which may be dragged. when this return true, you can call SetDragDropPayload() + EndDragDropSource()
    /// </summary>
    public static bool BeginDragDropSource(ImGuiDragDropFlags flags = (ImGuiDragDropFlags)0)
    {
        return ImGuiNative.ImGui_BeginDragDropSource(flags) != 0;
    }
    /// <summary>
    /// type is a user defined string of maximum 32 characters. Strings starting with '_' are reserved for dear imgui internal types. Data is copied and held by imgui. Return true when payload has been accepted.
    /// </summary>
    public static bool SetDragDropPayload(string type, IntPtr data, nint sz, ImGuiCond cond = (ImGuiCond)0)
    {
        byte* __bytes_type = stackalloc byte[128];
        using var __utf8z_type = new UTF8ZHelper(__bytes_type, 128, type);
        return ImGuiNative.ImGui_SetDragDropPayload(__utf8z_type.Pointer, data, sz, cond) != 0;
    }
    /// <summary>
    /// only call EndDragDropSource() if BeginDragDropSource() returns true!
    /// </summary>
    public static void EndDragDropSource()
    {
        ImGuiNative.ImGui_EndDragDropSource();
    }
    /// <summary>
    /// call after submitting an item that may receive a payload. If this returns true, you can call AcceptDragDropPayload() + EndDragDropTarget()
    /// </summary>
    public static bool BeginDragDropTarget()
    {
        return ImGuiNative.ImGui_BeginDragDropTarget() != 0;
    }
    /// <summary>
    /// accept contents of a given type. If ImGuiDragDropFlags_AcceptBeforeDelivery is set you can peek into the payload before the mouse button is released.
    /// </summary>
    public static ImGuiPayloadPtr AcceptDragDropPayload(string type, ImGuiDragDropFlags flags = (ImGuiDragDropFlags)0)
    {
        byte* __bytes_type = stackalloc byte[128];
        using var __utf8z_type = new UTF8ZHelper(__bytes_type, 128, type);
        return ImGuiPayloadPtr.Create(ImGuiNative.ImGui_AcceptDragDropPayload(__utf8z_type.Pointer, flags));
    }
    /// <summary>
    /// only call EndDragDropTarget() if BeginDragDropTarget() returns true!
    /// </summary>
    public static void EndDragDropTarget()
    {
        ImGuiNative.ImGui_EndDragDropTarget();
    }
    /// <summary>
    /// peek directly into the current payload from anywhere. returns NULL when drag and drop is finished or inactive. use ImGuiPayload::IsDataType() to test for the payload type.
    /// </summary>
    public static ImGuiPayloadPtr GetDragDropPayload()
    {
        return ImGuiPayloadPtr.Create(ImGuiNative.ImGui_GetDragDropPayload());
    }
    /// <summary>
    /// <para>Disabling [BETA API]</para>
    /// <para>- Disable all user interactions and dim items visuals (applying style.DisabledAlpha over current colors)</para>
    /// <para>- Those can be nested but it cannot be used to enable an already disabled section (a single BeginDisabled(true) in the stack is enough to keep everything disabled)</para>
    /// <para>- Tooltips windows by exception are opted out of disabling.</para>
    /// - BeginDisabled(false)/EndDisabled() essentially does nothing but is provided to facilitate use of boolean expressions (as a micro-optimization: if you have tens of thousands of BeginDisabled(false)/EndDisabled() pairs, you might want to reformulate your code to avoid making those calls)
    /// </summary>
    public static void BeginDisabled(bool disabled = true)
    {
        ImGuiNative.ImGui_BeginDisabled(disabled ? (byte)1 : (byte)0);
    }
    public static void EndDisabled()
    {
        ImGuiNative.ImGui_EndDisabled();
    }
    /// <summary>
    /// <para>Clipping</para>
    /// - Mouse hovering is affected by ImGui::PushClipRect() calls, unlike direct calls to ImDrawList::PushClipRect() which are render only.
    /// </summary>
    public static void PushClipRect(System.Numerics.Vector2 clip_rect_min, System.Numerics.Vector2 clip_rect_max, bool intersect_with_current_clip_rect)
    {
        ImGuiNative.ImGui_PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect ? (byte)1 : (byte)0);
    }
    public static void PopClipRect()
    {
        ImGuiNative.ImGui_PopClipRect();
    }
    /// <summary>
    /// <para>Focus, Activation</para>
    /// make last item the default focused item of a newly appearing window.
    /// </summary>
    public static void SetItemDefaultFocus()
    {
        ImGuiNative.ImGui_SetItemDefaultFocus();
    }
    /// <summary>
    /// focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.
    /// </summary>
    public static void SetKeyboardFocusHere(int offset = 0)
    {
        ImGuiNative.ImGui_SetKeyboardFocusHere(offset);
    }
    /// <summary>
    /// <para>Keyboard/Gamepad Navigation</para>
    /// alter visibility of keyboard/gamepad cursor. by default: show when using an arrow key, hide when clicking with mouse.
    /// </summary>
    public static void SetNavCursorVisible(bool visible)
    {
        ImGuiNative.ImGui_SetNavCursorVisible(visible ? (byte)1 : (byte)0);
    }
    /// <summary>
    /// <para>Overlapping mode</para>
    /// allow next item to be overlapped by a subsequent item. Useful with invisible buttons, selectable, treenode covering an area where subsequent items may need to be added. Note that both Selectable() and TreeNode() have dedicated flags doing this.
    /// </summary>
    public static void SetNextItemAllowOverlap()
    {
        ImGuiNative.ImGui_SetNextItemAllowOverlap();
    }
    /// <summary>
    /// <para>Item/Widgets Utilities and Query Functions</para>
    /// <para>- Most of the functions are referring to the previous Item that has been submitted.</para>
    /// <para>- See Demo Window under "Widgets-&gt;Querying Status" for an interactive visualization of most of those functions.</para>
    /// is the last item hovered? (and usable, aka not blocked by a popup, etc.). See ImGuiHoveredFlags for more options.
    /// </summary>
    public static bool IsItemHovered(ImGuiHoveredFlags flags = (ImGuiHoveredFlags)0)
    {
        return ImGuiNative.ImGui_IsItemHovered(flags) != 0;
    }
    /// <summary>
    /// is the last item active? (e.g. button being held, text field being edited. This will continuously return true while holding mouse button on an item. Items that don't interact will always return false)
    /// </summary>
    public static bool IsItemActive()
    {
        return ImGuiNative.ImGui_IsItemActive() != 0;
    }
    /// <summary>
    /// is the last item focused for keyboard/gamepad navigation?
    /// </summary>
    public static bool IsItemFocused()
    {
        return ImGuiNative.ImGui_IsItemFocused() != 0;
    }
    /// <summary>
    /// is the last item hovered and mouse clicked on? (**)  == IsMouseClicked(mouse_button) &amp;&amp; IsItemHovered()Important. (**) this is NOT equivalent to the behavior of e.g. Button(). Read comments in function definition.
    /// </summary>
    public static bool IsItemClicked(ImGuiMouseButton mouse_button = (ImGuiMouseButton)0)
    {
        return ImGuiNative.ImGui_IsItemClicked(mouse_button) != 0;
    }
    /// <summary>
    /// is the last item visible? (items may be out of sight because of clipping/scrolling)
    /// </summary>
    public static bool IsItemVisible()
    {
        return ImGuiNative.ImGui_IsItemVisible() != 0;
    }
    /// <summary>
    /// did the last item modify its underlying value this frame? or was pressed? This is generally the same as the "bool" return value of many widgets.
    /// </summary>
    public static bool IsItemEdited()
    {
        return ImGuiNative.ImGui_IsItemEdited() != 0;
    }
    /// <summary>
    /// was the last item just made active (item was previously inactive).
    /// </summary>
    public static bool IsItemActivated()
    {
        return ImGuiNative.ImGui_IsItemActivated() != 0;
    }
    /// <summary>
    /// was the last item just made inactive (item was previously active). Useful for Undo/Redo patterns with widgets that require continuous editing.
    /// </summary>
    public static bool IsItemDeactivated()
    {
        return ImGuiNative.ImGui_IsItemDeactivated() != 0;
    }
    /// <summary>
    /// was the last item just made inactive and made a value change when it was active? (e.g. Slider/Drag moved). Useful for Undo/Redo patterns with widgets that require continuous editing. Note that you may get false positives (some widgets such as Combo()/ListBox()/Selectable() will return true even when clicking an already selected item).
    /// </summary>
    public static bool IsItemDeactivatedAfterEdit()
    {
        return ImGuiNative.ImGui_IsItemDeactivatedAfterEdit() != 0;
    }
    /// <summary>
    /// was the last item open state toggled? set by TreeNode().
    /// </summary>
    public static bool IsItemToggledOpen()
    {
        return ImGuiNative.ImGui_IsItemToggledOpen() != 0;
    }
    /// <summary>
    /// is any item hovered?
    /// </summary>
    public static bool IsAnyItemHovered()
    {
        return ImGuiNative.ImGui_IsAnyItemHovered() != 0;
    }
    /// <summary>
    /// is any item active?
    /// </summary>
    public static bool IsAnyItemActive()
    {
        return ImGuiNative.ImGui_IsAnyItemActive() != 0;
    }
    /// <summary>
    /// is any item focused?
    /// </summary>
    public static bool IsAnyItemFocused()
    {
        return ImGuiNative.ImGui_IsAnyItemFocused() != 0;
    }
    /// <summary>
    /// get ID of last item (~~ often same ImGui::GetID(label) beforehand)
    /// </summary>
    public static uint GetItemID()
    {
        return ImGuiNative.ImGui_GetItemID();
    }
    /// <summary>
    /// get upper-left bounding rectangle of the last item (screen space)
    /// </summary>
    public static System.Numerics.Vector2 GetItemRectMin()
    {
        return ImGuiNative.ImGui_GetItemRectMin();
    }
    /// <summary>
    /// get lower-right bounding rectangle of the last item (screen space)
    /// </summary>
    public static System.Numerics.Vector2 GetItemRectMax()
    {
        return ImGuiNative.ImGui_GetItemRectMax();
    }
    /// <summary>
    /// get size of last item
    /// </summary>
    public static System.Numerics.Vector2 GetItemRectSize()
    {
        return ImGuiNative.ImGui_GetItemRectSize();
    }
    /// <summary>
    /// <para>Viewports</para>
    /// <para>- Currently represents the Platform Window created by the application which is hosting our Dear ImGui windows.</para>
    /// <para>- In 'docking' branch with multi-viewport enabled, we extend this concept to have multiple active viewports.</para>
    /// <para>- In the future we will extend this concept further to also represent Platform Monitor and support a "no main platform window" operation mode.</para>
    /// return primary/default viewport. This can never be NULL.
    /// </summary>
    public static ImGuiViewportPtr GetMainViewport()
    {
        return ImGuiViewportPtr.Create(ImGuiNative.ImGui_GetMainViewport());
    }
    /// <summary>
    /// <para>Background/Foreground Draw Lists</para>
    /// this draw list will be the first rendered one. Useful to quickly draw shapes/text behind dear imgui contents.
    /// </summary>
    public static ImDrawListPtr GetBackgroundDrawList()
    {
        return ImDrawListPtr.Create(ImGuiNative.ImGui_GetBackgroundDrawList());
    }
    /// <summary>
    /// this draw list will be the last rendered one. Useful to quickly draw shapes/text over dear imgui contents.
    /// </summary>
    public static ImDrawListPtr GetForegroundDrawList()
    {
        return ImDrawListPtr.Create(ImGuiNative.ImGui_GetForegroundDrawList());
    }
    /// <summary>
    /// <para>Miscellaneous Utilities</para>
    /// test if rectangle (of given size, starting from cursor position) is visible / not clipped.
    /// </summary>
    public static bool IsRectVisible(System.Numerics.Vector2 size)
    {
        return ImGuiNative.ImGui_IsRectVisibleBySize(size) != 0;
    }
    /// <summary>
    /// test if rectangle (in screen space) is visible / not clipped. to perform coarse clipping on user's side.
    /// </summary>
    public static bool IsRectVisible(System.Numerics.Vector2 rect_min, System.Numerics.Vector2 rect_max)
    {
        return ImGuiNative.ImGui_IsRectVisible(rect_min, rect_max) != 0;
    }
    /// <summary>
    /// get global imgui time. incremented by io.DeltaTime every frame.
    /// </summary>
    public static double GetTime()
    {
        return ImGuiNative.ImGui_GetTime();
    }
    /// <summary>
    /// get global imgui frame count. incremented by 1 every frame.
    /// </summary>
    public static int GetFrameCount()
    {
        return ImGuiNative.ImGui_GetFrameCount();
    }
    /// <summary>
    /// you may use this when creating your own ImDrawList instances.
    /// </summary>
    public static ImDrawListSharedDataPtr GetDrawListSharedData()
    {
        return ImDrawListSharedDataPtr.Create(ImGuiNative.ImGui_GetDrawListSharedData());
    }
    /// <summary>
    /// get a string corresponding to the enum value (for display, saving, etc.).
    /// </summary>
    public static string GetStyleColorName(ImGuiCol idx)
    {
        return Marshal.PtrToStringUTF8((IntPtr)ImGuiNative.ImGui_GetStyleColorName(idx));
    }
    /// <summary>
    /// replace current window storage with our own (if you want to manipulate it yourself, typically clear subsection of it)
    /// </summary>
    public static void SetStateStorage(ImGuiStoragePtr storage)
    {
        ImGuiNative.ImGui_SetStateStorage(ImGuiStoragePtr.GetHandle(storage));
    }
    public static ImGuiStoragePtr GetStateStorage()
    {
        return ImGuiStoragePtr.Create(ImGuiNative.ImGui_GetStateStorage());
    }
    /// <summary>
    /// Text Utilities
    /// </summary>
    public static System.Numerics.Vector2 CalcTextSize(string text, int? text_end = null, bool hide_text_after_double_hash = false, float wrap_width = -1.0f)
    {
        byte* __bytes_text = stackalloc byte[128];
        using var __utf8z_text = new UTF8ZHelper(__bytes_text, 128, text);
        return ImGuiNative.ImGui_CalcTextSize(__utf8z_text.Pointer, __utf8z_text.GetTextEnd(text_end), hide_text_after_double_hash ? (byte)1 : (byte)0, wrap_width);
    }
    /// <summary>
    /// Color Utilities
    /// </summary>
    public static System.Numerics.Vector4 ColorConvertU32ToFloat4(uint input)
    {
        return ImGuiNative.ImGui_ColorConvertU32ToFloat4(input);
    }
    public static uint ColorConvertFloat4ToU32(System.Numerics.Vector4 input)
    {
        return ImGuiNative.ImGui_ColorConvertFloat4ToU32(input);
    }
    public static void ColorConvertRGBtoHSV(float r, float g, float b, ref float out_h, ref float out_s, ref float out_v)
    {
        fixed(float* __out_h_p = &out_h)
        {
            fixed(float* __out_s_p = &out_s)
            {
                fixed(float* __out_v_p = &out_v)
                {
                    ImGuiNative.ImGui_ColorConvertRGBtoHSV(r, g, b, __out_h_p, __out_s_p, __out_v_p);
                }
            }
        }
    }
    public static void ColorConvertHSVtoRGB(float h, float s, float v, ref float out_r, ref float out_g, ref float out_b)
    {
        fixed(float* __out_r_p = &out_r)
        {
            fixed(float* __out_g_p = &out_g)
            {
                fixed(float* __out_b_p = &out_b)
                {
                    ImGuiNative.ImGui_ColorConvertHSVtoRGB(h, s, v, __out_r_p, __out_g_p, __out_b_p);
                }
            }
        }
    }
    /// <summary>
    /// <para>Inputs Utilities: Keyboard/Mouse/Gamepad</para>
    /// <para>- the ImGuiKey enum contains all possible keyboard, mouse and gamepad inputs (e.g. ImGuiKey_A, ImGuiKey_MouseLeft, ImGuiKey_GamepadDpadUp...).</para>
    /// <para>- (legacy: before v1.87, we used ImGuiKey to carry native/user indices as defined by each backends. This was obsoleted in 1.87 (2022-02) and completely removed in 1.91.5 (2024-11). See https://github.com/ocornut/imgui/issues/4921)</para>
    /// <para>- (legacy: any use of ImGuiKey will assert when key &lt; 512 to detect passing legacy native/user indices)</para>
    /// is key being held.
    /// </summary>
    public static bool IsKeyDown(ImGuiKey key)
    {
        return ImGuiNative.ImGui_IsKeyDown(key) != 0;
    }
    /// <summary>
    /// was key pressed (went from !Down to Down)? if repeat=true, uses io.KeyRepeatDelay / KeyRepeatRate
    /// </summary>
    public static bool IsKeyPressed(ImGuiKey key, bool repeat = true)
    {
        return ImGuiNative.ImGui_IsKeyPressed(key, repeat ? (byte)1 : (byte)0) != 0;
    }
    /// <summary>
    /// was key released (went from Down to !Down)?
    /// </summary>
    public static bool IsKeyReleased(ImGuiKey key)
    {
        return ImGuiNative.ImGui_IsKeyReleased(key) != 0;
    }
    /// <summary>
    /// was key chord (mods + key) pressed, e.g. you can pass 'ImGuiMod_Ctrl | ImGuiKey_S' as a key-chord. This doesn't do any routing or focus check, please consider using Shortcut() function instead.
    /// </summary>
    public static bool IsKeyChordPressed(int key_chord)
    {
        return ImGuiNative.ImGui_IsKeyChordPressed(key_chord) != 0;
    }
    /// <summary>
    /// uses provided repeat rate/delay. return a count, most often 0 or 1 but might be &gt;1 if RepeatRate is small enough that DeltaTime &gt; RepeatRate
    /// </summary>
    public static int GetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate)
    {
        return ImGuiNative.ImGui_GetKeyPressedAmount(key, repeat_delay, rate);
    }
    /// <summary>
    /// [DEBUG] returns English name of the key. Those names are provided for debugging purpose and are not meant to be saved persistently nor compared.
    /// </summary>
    public static string GetKeyName(ImGuiKey key)
    {
        return Marshal.PtrToStringUTF8((IntPtr)ImGuiNative.ImGui_GetKeyName(key));
    }
    /// <summary>
    /// Override io.WantCaptureKeyboard flag next frame (said flag is left for your application to handle, typically when true it instructs your app to ignore inputs). e.g. force capture keyboard when your widget is being hovered. This is equivalent to setting "io.WantCaptureKeyboard = want_capture_keyboard"; after the next NewFrame() call.
    /// </summary>
    public static void SetNextFrameWantCaptureKeyboard(bool want_capture_keyboard)
    {
        ImGuiNative.ImGui_SetNextFrameWantCaptureKeyboard(want_capture_keyboard ? (byte)1 : (byte)0);
    }
    /// <summary>
    /// <para>Inputs Utilities: Shortcut Testing &amp; Routing [BETA]</para>
    /// <para>- ImGuiKeyChord = a ImGuiKey + optional ImGuiMod_Alt/ImGuiMod_Ctrl/ImGuiMod_Shift/ImGuiMod_Super.</para>
    /// <para>ImGuiKey_C                          // Accepted by functions taking ImGuiKey or ImGuiKeyChord arguments)</para>
    /// <para>ImGuiMod_Ctrl | ImGuiKey_C          // Accepted by functions taking ImGuiKeyChord arguments)</para>
    /// <para>only ImGuiMod_XXX values are legal to combine with an ImGuiKey. You CANNOT combine two ImGuiKey values.</para>
    /// <para>- The general idea is that several callers may register interest in a shortcut, and only one owner gets it.</para>
    /// <para>Parent   -&gt; call Shortcut(Ctrl+S)    // When Parent is focused, Parent gets the shortcut.</para>
    /// <para>Child1 -&gt; call Shortcut(Ctrl+S)    // When Child1 is focused, Child1 gets the shortcut (Child1 overrides Parent shortcuts)</para>
    /// <para>Child2 -&gt; no call                  // When Child2 is focused, Parent gets the shortcut.</para>
    /// <para>The whole system is order independent, so if Child1 makes its calls before Parent, results will be identical.</para>
    /// <para>This is an important property as it facilitate working with foreign code or larger codebase.</para>
    /// <para>- To understand the difference:</para>
    /// <para>- IsKeyChordPressed() compares mods and call IsKeyPressed() -&gt; function has no side-effect.</para>
    /// <para>- Shortcut() submits a route, routes are resolved, if it currently can be routed it calls IsKeyChordPressed() -&gt; function has (desirable) side-effects as it can prevents another call from getting the route.</para>
    /// - Visualize registered routes in 'Metrics/Debugger-&gt;Inputs'.
    /// </summary>
    public static bool Shortcut(int key_chord, ImGuiInputFlags flags = (ImGuiInputFlags)0)
    {
        return ImGuiNative.ImGui_Shortcut(key_chord, flags) != 0;
    }
    public static void SetNextItemShortcut(int key_chord, ImGuiInputFlags flags = (ImGuiInputFlags)0)
    {
        ImGuiNative.ImGui_SetNextItemShortcut(key_chord, flags);
    }
    /// <summary>
    /// <para>Inputs Utilities: Key/Input Ownership [BETA]</para>
    /// <para>- One common use case would be to allow your items to disable standard inputs behaviors such</para>
    /// <para>as Tab or Alt key handling, Mouse Wheel scrolling, etc.</para>
    /// <para>e.g. Button(...); SetItemKeyOwner(ImGuiKey_MouseWheelY); to make hovering/activating a button disable wheel for scrolling.</para>
    /// <para>- Reminder ImGuiKey enum include access to mouse buttons and gamepad, so key ownership can apply to them.</para>
    /// <para>- Many related features are still in imgui_internal.h. For instance, most IsKeyXXX()/IsMouseXXX() functions have an owner-id-aware version.</para>
    /// Set key owner to last item ID if it is hovered or active. Equivalent to 'if (IsItemHovered() || IsItemActive()) { SetKeyOwner(key, GetItemID());'.
    /// </summary>
    public static void SetItemKeyOwner(ImGuiKey key)
    {
        ImGuiNative.ImGui_SetItemKeyOwner(key);
    }
    /// <summary>
    /// <para>Inputs Utilities: Mouse</para>
    /// <para>- To refer to a mouse button, you may use named enums in your code e.g. ImGuiMouseButton_Left, ImGuiMouseButton_Right.</para>
    /// <para>- You can also use regular integer: it is forever guaranteed that 0=Left, 1=Right, 2=Middle.</para>
    /// <para>- Dragging operations are only reported after mouse has moved a certain distance away from the initial clicking position (see 'lock_threshold' and 'io.MouseDraggingThreshold')</para>
    /// is mouse button held?
    /// </summary>
    public static bool IsMouseDown(ImGuiMouseButton button)
    {
        return ImGuiNative.ImGui_IsMouseDown(button) != 0;
    }
    /// <summary>
    /// did mouse button clicked? (went from !Down to Down). Same as GetMouseClickedCount() == 1.
    /// </summary>
    public static bool IsMouseClicked(ImGuiMouseButton button, bool repeat = false)
    {
        return ImGuiNative.ImGui_IsMouseClicked(button, repeat ? (byte)1 : (byte)0) != 0;
    }
    /// <summary>
    /// did mouse button released? (went from Down to !Down)
    /// </summary>
    public static bool IsMouseReleased(ImGuiMouseButton button)
    {
        return ImGuiNative.ImGui_IsMouseReleased(button) != 0;
    }
    /// <summary>
    /// did mouse button double-clicked? Same as GetMouseClickedCount() == 2. (note that a double-click will also report IsMouseClicked() == true)
    /// </summary>
    public static bool IsMouseDoubleClicked(ImGuiMouseButton button)
    {
        return ImGuiNative.ImGui_IsMouseDoubleClicked(button) != 0;
    }
    /// <summary>
    /// delayed mouse release (use very sparingly!). Generally used with 'delay &gt;= io.MouseDoubleClickTime' + combined with a 'io.MouseClickedLastCount==1' test. This is a very rarely used UI idiom, but some apps use this: e.g. MS Explorer single click on an icon to rename.
    /// </summary>
    public static bool IsMouseReleasedWithDelay(ImGuiMouseButton button, float delay)
    {
        return ImGuiNative.ImGui_IsMouseReleasedWithDelay(button, delay) != 0;
    }
    /// <summary>
    /// return the number of successive mouse-clicks at the time where a click happen (otherwise 0).
    /// </summary>
    public static int GetMouseClickedCount(ImGuiMouseButton button)
    {
        return ImGuiNative.ImGui_GetMouseClickedCount(button);
    }
    /// <summary>
    /// is mouse hovering given bounding rect (in screen space). clipped by current clipping settings, but disregarding of other consideration of focus/window ordering/popup-block.
    /// </summary>
    public static bool IsMouseHoveringRect(System.Numerics.Vector2 r_min, System.Numerics.Vector2 r_max, bool clip = true)
    {
        return ImGuiNative.ImGui_IsMouseHoveringRect(r_min, r_max, clip ? (byte)1 : (byte)0) != 0;
    }
    /// <summary>
    /// by convention we use (-FLT_MAX,-FLT_MAX) to denote that there is no mouse available
    /// </summary>
    public static bool IsMousePosValid()
    {
        return ImGuiNative.ImGui_IsMousePosValid(null) != 0;
    }
    /// <summary>
    /// by convention we use (-FLT_MAX,-FLT_MAX) to denote that there is no mouse available
    /// </summary>
    public static bool IsMousePosValid(ref System.Numerics.Vector2 mouse_pos)
    {
        fixed(System.Numerics.Vector2* __mouse_pos_p = &mouse_pos)
        {
            return ImGuiNative.ImGui_IsMousePosValid(__mouse_pos_p) != 0;
        }
    }
    /// <summary>
    /// [WILL OBSOLETE] is any mouse button held? This was designed for backends, but prefer having backend maintain a mask of held mouse buttons, because upcoming input queue system will make this invalid.
    /// </summary>
    public static bool IsAnyMouseDown()
    {
        return ImGuiNative.ImGui_IsAnyMouseDown() != 0;
    }
    /// <summary>
    /// shortcut to ImGui::GetIO().MousePos provided by user, to be consistent with other calls
    /// </summary>
    public static System.Numerics.Vector2 GetMousePos()
    {
        return ImGuiNative.ImGui_GetMousePos();
    }
    /// <summary>
    /// retrieve mouse position at the time of opening popup we have BeginPopup() into (helper to avoid user backing that value themselves)
    /// </summary>
    public static System.Numerics.Vector2 GetMousePosOnOpeningCurrentPopup()
    {
        return ImGuiNative.ImGui_GetMousePosOnOpeningCurrentPopup();
    }
    /// <summary>
    /// is mouse dragging? (uses io.MouseDraggingThreshold if lock_threshold &lt; 0.0f)
    /// </summary>
    public static bool IsMouseDragging(ImGuiMouseButton button, float lock_threshold = -1.0f)
    {
        return ImGuiNative.ImGui_IsMouseDragging(button, lock_threshold) != 0;
    }
    /// <summary>
    /// return the delta from the initial clicking position while the mouse button is pressed or was just released. This is locked and return 0.0f until the mouse moves past a distance threshold at least once (uses io.MouseDraggingThreshold if lock_threshold &lt; 0.0f)
    /// </summary>
    public static System.Numerics.Vector2 GetMouseDragDelta(ImGuiMouseButton button = (ImGuiMouseButton)0, float lock_threshold = -1.0f)
    {
        return ImGuiNative.ImGui_GetMouseDragDelta(button, lock_threshold);
    }
    public static void ResetMouseDragDelta(ImGuiMouseButton button = (ImGuiMouseButton)0)
    {
        ImGuiNative.ImGui_ResetMouseDragDelta(button);
    }
    /// <summary>
    /// get desired mouse cursor shape. Important: reset in ImGui::NewFrame(), this is updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you
    /// </summary>
    public static ImGuiMouseCursor GetMouseCursor()
    {
        return ImGuiNative.ImGui_GetMouseCursor();
    }
    /// <summary>
    /// set desired mouse cursor shape
    /// </summary>
    public static void SetMouseCursor(ImGuiMouseCursor cursor_type)
    {
        ImGuiNative.ImGui_SetMouseCursor(cursor_type);
    }
    /// <summary>
    /// Override io.WantCaptureMouse flag next frame (said flag is left for your application to handle, typical when true it instructs your app to ignore inputs). This is equivalent to setting "io.WantCaptureMouse = want_capture_mouse;" after the next NewFrame() call.
    /// </summary>
    public static void SetNextFrameWantCaptureMouse(bool want_capture_mouse)
    {
        ImGuiNative.ImGui_SetNextFrameWantCaptureMouse(want_capture_mouse ? (byte)1 : (byte)0);
    }
    /// <summary>
    /// <para>Clipboard Utilities</para>
    /// - Also see the LogToClipboard() function to capture GUI into clipboard, or easily output text data to the clipboard.
    /// </summary>
    public static string GetClipboardText()
    {
        return Marshal.PtrToStringUTF8((IntPtr)ImGuiNative.ImGui_GetClipboardText());
    }
    public static void SetClipboardText(string text)
    {
        byte* __bytes_text = stackalloc byte[128];
        using var __utf8z_text = new UTF8ZHelper(__bytes_text, 128, text);
        ImGuiNative.ImGui_SetClipboardText(__utf8z_text.Pointer);
    }
    /// <summary>
    /// <para>Settings/.Ini Utilities</para>
    /// <para>- The disk functions are automatically called if io.IniFilename != NULL (default is "imgui.ini").</para>
    /// <para>- Set io.IniFilename to NULL to load/save manually. Read io.WantSaveIniSettings description about handling .ini saving manually.</para>
    /// <para>- Important: default value "imgui.ini" is relative to current working dir! Most apps will want to lock this to an absolute path (e.g. same path as executables).</para>
    /// call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename).
    /// </summary>
    public static void LoadIniSettingsFromDisk(string ini_filename)
    {
        byte* __bytes_ini_filename = stackalloc byte[128];
        using var __utf8z_ini_filename = new UTF8ZHelper(__bytes_ini_filename, 128, ini_filename);
        ImGuiNative.ImGui_LoadIniSettingsFromDisk(__utf8z_ini_filename.Pointer);
    }
    /// <summary>
    /// call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.
    /// </summary>
    public static void LoadIniSettingsFromMemory(string ini_data, nint ini_size = 0)
    {
        byte* __bytes_ini_data = stackalloc byte[128];
        using var __utf8z_ini_data = new UTF8ZHelper(__bytes_ini_data, 128, ini_data);
        ImGuiNative.ImGui_LoadIniSettingsFromMemory(__utf8z_ini_data.Pointer, ini_size);
    }
    /// <summary>
    /// this is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext).
    /// </summary>
    public static void SaveIniSettingsToDisk(string ini_filename)
    {
        byte* __bytes_ini_filename = stackalloc byte[128];
        using var __utf8z_ini_filename = new UTF8ZHelper(__bytes_ini_filename, 128, ini_filename);
        ImGuiNative.ImGui_SaveIniSettingsToDisk(__utf8z_ini_filename.Pointer);
    }
    /// <summary>
    /// return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.
    /// </summary>
    public static string SaveIniSettingsToMemory()
    {
        return Marshal.PtrToStringUTF8((IntPtr)ImGuiNative.ImGui_SaveIniSettingsToMemory(null));
    }
    /// <summary>
    /// return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.
    /// </summary>
    public static string SaveIniSettingsToMemory(ref nint out_ini_size)
    {
        fixed(nint* __out_ini_size_p = &out_ini_size)
        {
            return Marshal.PtrToStringUTF8((IntPtr)ImGuiNative.ImGui_SaveIniSettingsToMemory(__out_ini_size_p));
        }
    }
    /// <summary>
    /// <para>Debug Utilities</para>
    /// - Your main debugging friend is the ShowMetricsWindow() function, which is also accessible from Demo-&gt;Tools-&gt;Metrics Debugger
    /// </summary>
    public static void DebugTextEncoding(string text)
    {
        byte* __bytes_text = stackalloc byte[128];
        using var __utf8z_text = new UTF8ZHelper(__bytes_text, 128, text);
        ImGuiNative.ImGui_DebugTextEncoding(__utf8z_text.Pointer);
    }
    public static void DebugFlashStyleColor(ImGuiCol idx)
    {
        ImGuiNative.ImGui_DebugFlashStyleColor(idx);
    }
    public static void DebugStartItemPicker()
    {
        ImGuiNative.ImGui_DebugStartItemPicker();
    }
    /// <summary>
    /// This is called by IMGUI_CHECKVERSION() macro.
    /// </summary>
    public static bool DebugCheckVersionAndDataLayout(string version_str, nint sz_io, nint sz_style, nint sz_vec2, nint sz_vec4, nint sz_drawvert, nint sz_drawidx)
    {
        byte* __bytes_version_str = stackalloc byte[128];
        using var __utf8z_version_str = new UTF8ZHelper(__bytes_version_str, 128, version_str);
        return ImGuiNative.ImGui_DebugCheckVersionAndDataLayout(__utf8z_version_str.Pointer, sz_io, sz_style, sz_vec2, sz_vec4, sz_drawvert, sz_drawidx) != 0;
    }
    /// <summary>
    /// Call via IMGUI_DEBUG_LOG() for maximum stripping in caller code!
    /// </summary>
    public static void DebugLog(string text)
    {
        byte* __bytes_text = stackalloc byte[128];
        using var __utf8z_text = new UTF8ZHelper(__bytes_text, 128, text);
        ImGuiNative.ImGui_DebugLogUnformatted(__utf8z_text.Pointer);
    }
    /// <summary>
    /// <para>Memory Allocators</para>
    /// <para>- Those functions are not reliant on the current context.</para>
    /// <para>- DLL users: heaps and globals are not shared across DLL boundaries! You will need to call SetCurrentContext() + SetAllocatorFunctions()</para>
    /// for each static/DLL boundary you are calling from. Read "Context and Memory Allocators" section of imgui.cpp for more details.
    /// </summary>
    public static void SetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, IntPtr user_data = 0)
    {
        var __alloc_func_p = alloc_func == null ? null : (delegate* unmanaged<nint, IntPtr, IntPtr>)Marshal.GetFunctionPointerForDelegate(alloc_func);
        var __free_func_p = free_func == null ? null : (delegate* unmanaged<IntPtr, IntPtr, void>)Marshal.GetFunctionPointerForDelegate(free_func);
        try
        {
            ImGuiNative.ImGui_SetAllocatorFunctions(__alloc_func_p, __free_func_p, user_data);
        }
        finally
        {
            GC.KeepAlive(alloc_func);
            GC.KeepAlive(free_func);
        }
    }
    public static void GetAllocatorFunctions(ref IntPtr p_alloc_func, ref IntPtr p_free_func, IntPtr* p_user_data)
    {
        fixed(IntPtr* __p_alloc_func_p = &p_alloc_func)
        {
            fixed(IntPtr* __p_free_func_p = &p_free_func)
            {
                ImGuiNative.ImGui_GetAllocatorFunctions(__p_alloc_func_p, __p_free_func_p, p_user_data);
            }
        }
    }
    public static IntPtr MemAlloc(nint size)
    {
        return ImGuiNative.ImGui_MemAlloc(size);
    }
    public static void MemFree(IntPtr ptr)
    {
        ImGuiNative.ImGui_MemFree(ptr);
    }
    /// <summary>
    /// Construct a zero-size ImVector&lt;&gt; (of any type). This is primarily useful when calling ImFontGlyphRangesBuilder_BuildRanges()
    /// </summary>
    public static void ImVector_Construct(IntPtr vector)
    {
        ImGuiNative.ImVector_Construct(vector);
    }
    /// <summary>
    /// Destruct an ImVector&lt;&gt; (of any type). Important: Frees the vector memory but does not call destructors on contained objects (if they have them)
    /// </summary>
    public static void ImVector_Destruct(IntPtr vector)
    {
        ImGuiNative.ImVector_Destruct(vector);
    }
}
