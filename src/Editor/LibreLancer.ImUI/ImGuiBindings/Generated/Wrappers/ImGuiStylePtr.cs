// <auto-generated/>
// ReSharper disable InconsistentNaming
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace ImGuiNET;

public unsafe partial class ImGuiStylePtr
{
    public ImGuiStyle* Handle { get; private set; }

    public ImGuiStylePtr (ImGuiStyle* handle)
    {
        Handle = handle;
    }

    internal static ImGuiStylePtr Create(ImGuiStyle* handle)
    {
        return handle == null ? null : new(handle);
    }

    internal static ImGuiStyle* GetHandle(ImGuiStylePtr self)
    {
        return self == null ? null : self.Handle;
    }

    /// <summary>
    /// <para>Font scaling</para>
    /// <para>- recap: ImGui::GetFontSize() == FontSizeBase * (FontScaleMain * FontScaleDpi * other_scaling_factors)</para>
    /// Current base font size before external global factors are applied. Use PushFont(NULL, size) to modify. Use ImGui::GetFontSize() to obtain scaled value.
    /// </summary>
    public ref float FontSizeBase => ref Unsafe.AsRef<float>(&Handle->FontSizeBase);

    /// <summary>
    /// Main global scale factor. May be set by application once, or exposed to end-user.
    /// </summary>
    public ref float FontScaleMain => ref Unsafe.AsRef<float>(&Handle->FontScaleMain);

    /// <summary>
    /// Additional global scale factor from viewport/monitor contents scale. When io.ConfigDpiScaleFonts is enabled, this is automatically overwritten when changing monitor DPI.
    /// </summary>
    public ref float FontScaleDpi => ref Unsafe.AsRef<float>(&Handle->FontScaleDpi);

    /// <summary>
    /// Global alpha applies to everything in Dear ImGui.
    /// </summary>
    public ref float Alpha => ref Unsafe.AsRef<float>(&Handle->Alpha);

    /// <summary>
    /// Additional alpha multiplier applied by BeginDisabled(). Multiply over current value of Alpha.
    /// </summary>
    public ref float DisabledAlpha => ref Unsafe.AsRef<float>(&Handle->DisabledAlpha);

    /// <summary>
    /// Padding within a window.
    /// </summary>
    public ref System.Numerics.Vector2 WindowPadding => ref Unsafe.AsRef<System.Numerics.Vector2>(&Handle->WindowPadding);

    /// <summary>
    /// Radius of window corners rounding. Set to 0.0f to have rectangular windows. Large values tend to lead to variety of artifacts and are not recommended.
    /// </summary>
    public ref float WindowRounding => ref Unsafe.AsRef<float>(&Handle->WindowRounding);

    /// <summary>
    /// Thickness of border around windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
    /// </summary>
    public ref float WindowBorderSize => ref Unsafe.AsRef<float>(&Handle->WindowBorderSize);

    /// <summary>
    /// Hit-testing extent outside/inside resizing border. Also extend determination of hovered window. Generally meaningfully larger than WindowBorderSize to make it easy to reach borders.
    /// </summary>
    public ref float WindowBorderHoverPadding => ref Unsafe.AsRef<float>(&Handle->WindowBorderHoverPadding);

    /// <summary>
    /// Minimum window size. This is a global setting. If you want to constrain individual windows, use SetNextWindowSizeConstraints().
    /// </summary>
    public ref System.Numerics.Vector2 WindowMinSize => ref Unsafe.AsRef<System.Numerics.Vector2>(&Handle->WindowMinSize);

    /// <summary>
    /// Alignment for title bar text. Defaults to (0.0f,0.5f) for left-aligned,vertically centered.
    /// </summary>
    public ref System.Numerics.Vector2 WindowTitleAlign => ref Unsafe.AsRef<System.Numerics.Vector2>(&Handle->WindowTitleAlign);

    /// <summary>
    /// Side of the collapsing/docking button in the title bar (None/Left/Right). Defaults to ImGuiDir_Left.
    /// </summary>
    public ref ImGuiDir WindowMenuButtonPosition => ref Unsafe.AsRef<ImGuiDir>(&Handle->WindowMenuButtonPosition);

    /// <summary>
    /// Radius of child window corners rounding. Set to 0.0f to have rectangular windows.
    /// </summary>
    public ref float ChildRounding => ref Unsafe.AsRef<float>(&Handle->ChildRounding);

    /// <summary>
    /// Thickness of border around child windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
    /// </summary>
    public ref float ChildBorderSize => ref Unsafe.AsRef<float>(&Handle->ChildBorderSize);

    /// <summary>
    /// Radius of popup window corners rounding. (Note that tooltip windows use WindowRounding)
    /// </summary>
    public ref float PopupRounding => ref Unsafe.AsRef<float>(&Handle->PopupRounding);

    /// <summary>
    /// Thickness of border around popup/tooltip windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
    /// </summary>
    public ref float PopupBorderSize => ref Unsafe.AsRef<float>(&Handle->PopupBorderSize);

    /// <summary>
    /// Padding within a framed rectangle (used by most widgets).
    /// </summary>
    public ref System.Numerics.Vector2 FramePadding => ref Unsafe.AsRef<System.Numerics.Vector2>(&Handle->FramePadding);

    /// <summary>
    /// Radius of frame corners rounding. Set to 0.0f to have rectangular frame (used by most widgets).
    /// </summary>
    public ref float FrameRounding => ref Unsafe.AsRef<float>(&Handle->FrameRounding);

    /// <summary>
    /// Thickness of border around frames. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
    /// </summary>
    public ref float FrameBorderSize => ref Unsafe.AsRef<float>(&Handle->FrameBorderSize);

    /// <summary>
    /// Horizontal and vertical spacing between widgets/lines.
    /// </summary>
    public ref System.Numerics.Vector2 ItemSpacing => ref Unsafe.AsRef<System.Numerics.Vector2>(&Handle->ItemSpacing);

    /// <summary>
    /// Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label).
    /// </summary>
    public ref System.Numerics.Vector2 ItemInnerSpacing => ref Unsafe.AsRef<System.Numerics.Vector2>(&Handle->ItemInnerSpacing);

    /// <summary>
    /// Padding within a table cell. Cellpadding.x is locked for entire table. CellPadding.y may be altered between different rows.
    /// </summary>
    public ref System.Numerics.Vector2 CellPadding => ref Unsafe.AsRef<System.Numerics.Vector2>(&Handle->CellPadding);

    /// <summary>
    /// Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!
    /// </summary>
    public ref System.Numerics.Vector2 TouchExtraPadding => ref Unsafe.AsRef<System.Numerics.Vector2>(&Handle->TouchExtraPadding);

    /// <summary>
    /// Horizontal indentation when e.g. entering a tree node. Generally == (FontSize + FramePadding.x*2).
    /// </summary>
    public ref float IndentSpacing => ref Unsafe.AsRef<float>(&Handle->IndentSpacing);

    /// <summary>
    /// Minimum horizontal spacing between two columns. Preferably &gt; (FramePadding.x + 1).
    /// </summary>
    public ref float ColumnsMinSpacing => ref Unsafe.AsRef<float>(&Handle->ColumnsMinSpacing);

    /// <summary>
    /// Width of the vertical scrollbar, Height of the horizontal scrollbar.
    /// </summary>
    public ref float ScrollbarSize => ref Unsafe.AsRef<float>(&Handle->ScrollbarSize);

    /// <summary>
    /// Radius of grab corners for scrollbar.
    /// </summary>
    public ref float ScrollbarRounding => ref Unsafe.AsRef<float>(&Handle->ScrollbarRounding);

    /// <summary>
    /// Minimum width/height of a grab box for slider/scrollbar.
    /// </summary>
    public ref float GrabMinSize => ref Unsafe.AsRef<float>(&Handle->GrabMinSize);

    /// <summary>
    /// Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.
    /// </summary>
    public ref float GrabRounding => ref Unsafe.AsRef<float>(&Handle->GrabRounding);

    /// <summary>
    /// The size in pixels of the dead-zone around zero on logarithmic sliders that cross zero.
    /// </summary>
    public ref float LogSliderDeadzone => ref Unsafe.AsRef<float>(&Handle->LogSliderDeadzone);

    /// <summary>
    /// Thickness of border around Image() calls.
    /// </summary>
    public ref float ImageBorderSize => ref Unsafe.AsRef<float>(&Handle->ImageBorderSize);

    /// <summary>
    /// Radius of upper corners of a tab. Set to 0.0f to have rectangular tabs.
    /// </summary>
    public ref float TabRounding => ref Unsafe.AsRef<float>(&Handle->TabRounding);

    /// <summary>
    /// Thickness of border around tabs.
    /// </summary>
    public ref float TabBorderSize => ref Unsafe.AsRef<float>(&Handle->TabBorderSize);

    /// <summary>
    /// -1: always visible. 0.0f: visible when hovered. &gt;0.0f: visible when hovered if minimum width.
    /// </summary>
    public ref float TabCloseButtonMinWidthSelected => ref Unsafe.AsRef<float>(&Handle->TabCloseButtonMinWidthSelected);

    /// <summary>
    /// -1: always visible. 0.0f: visible when hovered. &gt;0.0f: visible when hovered if minimum width. FLT_MAX: never show close button when unselected.
    /// </summary>
    public ref float TabCloseButtonMinWidthUnselected => ref Unsafe.AsRef<float>(&Handle->TabCloseButtonMinWidthUnselected);

    /// <summary>
    /// Thickness of tab-bar separator, which takes on the tab active color to denote focus.
    /// </summary>
    public ref float TabBarBorderSize => ref Unsafe.AsRef<float>(&Handle->TabBarBorderSize);

    /// <summary>
    /// Thickness of tab-bar overline, which highlights the selected tab-bar.
    /// </summary>
    public ref float TabBarOverlineSize => ref Unsafe.AsRef<float>(&Handle->TabBarOverlineSize);

    /// <summary>
    /// Angle of angled headers (supported values range from -50.0f degrees to +50.0f degrees).
    /// </summary>
    public ref float TableAngledHeadersAngle => ref Unsafe.AsRef<float>(&Handle->TableAngledHeadersAngle);

    /// <summary>
    /// Alignment of angled headers within the cell
    /// </summary>
    public ref System.Numerics.Vector2 TableAngledHeadersTextAlign => ref Unsafe.AsRef<System.Numerics.Vector2>(&Handle->TableAngledHeadersTextAlign);

    /// <summary>
    /// Default way to draw lines connecting TreeNode hierarchy. ImGuiTreeNodeFlags_DrawLinesNone or ImGuiTreeNodeFlags_DrawLinesFull or ImGuiTreeNodeFlags_DrawLinesToNodes.
    /// </summary>
    public ref ImGuiTreeNodeFlags TreeLinesFlags => ref Unsafe.AsRef<ImGuiTreeNodeFlags>(&Handle->TreeLinesFlags);

    /// <summary>
    /// Thickness of outlines when using ImGuiTreeNodeFlags_DrawLines.
    /// </summary>
    public ref float TreeLinesSize => ref Unsafe.AsRef<float>(&Handle->TreeLinesSize);

    /// <summary>
    /// Radius of lines connecting child nodes to the vertical line.
    /// </summary>
    public ref float TreeLinesRounding => ref Unsafe.AsRef<float>(&Handle->TreeLinesRounding);

    /// <summary>
    /// Side of the color button in the ColorEdit4 widget (left/right). Defaults to ImGuiDir_Right.
    /// </summary>
    public ref ImGuiDir ColorButtonPosition => ref Unsafe.AsRef<ImGuiDir>(&Handle->ColorButtonPosition);

    /// <summary>
    /// Alignment of button text when button is larger than text. Defaults to (0.5f, 0.5f) (centered).
    /// </summary>
    public ref System.Numerics.Vector2 ButtonTextAlign => ref Unsafe.AsRef<System.Numerics.Vector2>(&Handle->ButtonTextAlign);

    /// <summary>
    /// Alignment of selectable text. Defaults to (0.0f, 0.0f) (top-left aligned). It's generally important to keep this left-aligned if you want to lay multiple items on a same line.
    /// </summary>
    public ref System.Numerics.Vector2 SelectableTextAlign => ref Unsafe.AsRef<System.Numerics.Vector2>(&Handle->SelectableTextAlign);

    /// <summary>
    /// Thickness of border in SeparatorText()
    /// </summary>
    public ref float SeparatorTextBorderSize => ref Unsafe.AsRef<float>(&Handle->SeparatorTextBorderSize);

    /// <summary>
    /// Alignment of text within the separator. Defaults to (0.0f, 0.5f) (left aligned, center).
    /// </summary>
    public ref System.Numerics.Vector2 SeparatorTextAlign => ref Unsafe.AsRef<System.Numerics.Vector2>(&Handle->SeparatorTextAlign);

    /// <summary>
    /// Horizontal offset of text from each edge of the separator + spacing on other axis. Generally small values. .y is recommended to be == FramePadding.y.
    /// </summary>
    public ref System.Numerics.Vector2 SeparatorTextPadding => ref Unsafe.AsRef<System.Numerics.Vector2>(&Handle->SeparatorTextPadding);

    /// <summary>
    /// Apply to regular windows: amount which we enforce to keep visible when moving near edges of your screen.
    /// </summary>
    public ref System.Numerics.Vector2 DisplayWindowPadding => ref Unsafe.AsRef<System.Numerics.Vector2>(&Handle->DisplayWindowPadding);

    /// <summary>
    /// Apply to every windows, menus, popups, tooltips: amount where we avoid displaying contents. Adjust if you cannot see the edges of your screen (e.g. on a TV where scaling has not been configured).
    /// </summary>
    public ref System.Numerics.Vector2 DisplaySafeAreaPadding => ref Unsafe.AsRef<System.Numerics.Vector2>(&Handle->DisplaySafeAreaPadding);

    /// <summary>
    /// Scale software rendered mouse cursor (when io.MouseDrawCursor is enabled). We apply per-monitor DPI scaling over this scale. May be removed later.
    /// </summary>
    public ref float MouseCursorScale => ref Unsafe.AsRef<float>(&Handle->MouseCursorScale);

    /// <summary>
    /// Enable anti-aliased lines/borders. Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList).
    /// </summary>
    public bool AntiAliasedLines
    {
        get => Handle->AntiAliasedLines;
        set => Handle->AntiAliasedLines = value;
    }

    /// <summary>
    /// Enable anti-aliased lines/borders using textures where possible. Require backend to render with bilinear filtering (NOT point/nearest filtering). Latched at the beginning of the frame (copied to ImDrawList).
    /// </summary>
    public bool AntiAliasedLinesUseTex
    {
        get => Handle->AntiAliasedLinesUseTex;
        set => Handle->AntiAliasedLinesUseTex = value;
    }

    /// <summary>
    /// Enable anti-aliased edges around filled shapes (rounded rectangles, circles, etc.). Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList).
    /// </summary>
    public bool AntiAliasedFill
    {
        get => Handle->AntiAliasedFill;
        set => Handle->AntiAliasedFill = value;
    }

    /// <summary>
    /// Tessellation tolerance when using PathBezierCurveTo() without a specific number of segments. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.
    /// </summary>
    public ref float CurveTessellationTol => ref Unsafe.AsRef<float>(&Handle->CurveTessellationTol);

    /// <summary>
    /// Maximum error (in pixels) allowed when using AddCircle()/AddCircleFilled() or drawing rounded corner rectangles with no explicit segment count specified. Decrease for higher quality but more geometry.
    /// </summary>
    public ref float CircleTessellationMaxError => ref Unsafe.AsRef<float>(&Handle->CircleTessellationMaxError);

    /// <summary>
    /// Colors
    /// </summary>
    public Span<System.Numerics.Vector4> Colors => Handle->Colors;

    /// <summary>
    /// <para>Behaviors</para>
    /// <para>(It is possible to modify those fields mid-frame if specific behavior need it, unlike e.g. configuration fields in ImGuiIO)</para>
    /// Delay for IsItemHovered(ImGuiHoveredFlags_Stationary). Time required to consider mouse stationary.
    /// </summary>
    public ref float HoverStationaryDelay => ref Unsafe.AsRef<float>(&Handle->HoverStationaryDelay);

    /// <summary>
    /// Delay for IsItemHovered(ImGuiHoveredFlags_DelayShort). Usually used along with HoverStationaryDelay.
    /// </summary>
    public ref float HoverDelayShort => ref Unsafe.AsRef<float>(&Handle->HoverDelayShort);

    /// <summary>
    /// Delay for IsItemHovered(ImGuiHoveredFlags_DelayNormal). "
    /// </summary>
    public ref float HoverDelayNormal => ref Unsafe.AsRef<float>(&Handle->HoverDelayNormal);

    /// <summary>
    /// Default flags when using IsItemHovered(ImGuiHoveredFlags_ForTooltip) or BeginItemTooltip()/SetItemTooltip() while using mouse.
    /// </summary>
    public ref ImGuiHoveredFlags HoverFlagsForTooltipMouse => ref Unsafe.AsRef<ImGuiHoveredFlags>(&Handle->HoverFlagsForTooltipMouse);

    /// <summary>
    /// Default flags when using IsItemHovered(ImGuiHoveredFlags_ForTooltip) or BeginItemTooltip()/SetItemTooltip() while using keyboard/gamepad.
    /// </summary>
    public ref ImGuiHoveredFlags HoverFlagsForTooltipNav => ref Unsafe.AsRef<ImGuiHoveredFlags>(&Handle->HoverFlagsForTooltipNav);

    /// <summary>
    /// <para>[Internal]</para>
    /// FIXME-WIP: Reference scale, as applied by ScaleAllSizes().
    /// </summary>
    public ref float _MainScale => ref Unsafe.AsRef<float>(&Handle->_MainScale);

    /// <summary>
    /// FIXME: Temporary hack until we finish remaining work.
    /// </summary>
    public ref float _NextFrameFontSizeBase => ref Unsafe.AsRef<float>(&Handle->_NextFrameFontSizeBase);

    /// <summary>
    /// Scale all spacing/padding/thickness values. Do not scale fonts.
    /// </summary>
    public void ScaleAllSizes(float scale_factor)
    {
        ImGuiNative.ImGuiStyle_ScaleAllSizes(this.Handle, scale_factor);
    }
}
