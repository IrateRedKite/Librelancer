// <auto-generated/>
// ReSharper disable InconsistentNaming
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace ImGuiNET;

public unsafe partial class ImGuiSelectionExternalStoragePtr
{
    public ImGuiSelectionExternalStorage* Handle { get; private set; }

    public ImGuiSelectionExternalStoragePtr (ImGuiSelectionExternalStorage* handle)
    {
        Handle = handle;
    }

    internal static ImGuiSelectionExternalStoragePtr Create(ImGuiSelectionExternalStorage* handle)
    {
        return handle == null ? null : new(handle);
    }

    internal static ImGuiSelectionExternalStorage* GetHandle(ImGuiSelectionExternalStoragePtr self)
    {
        return self == null ? null : self.Handle;
    }

    /// <summary>
    /// <para>Members</para>
    /// User data for use by adapter function                                // e.g. selection.UserData = (void*)my_items;
    /// </summary>
    public IntPtr UserData
    {
        get => Handle->UserData;
        set => Handle->UserData = value;
    }

    /// <summary>
    /// e.g. AdapterSetItemSelected = [](ImGuiSelectionExternalStorage* self, int idx, bool selected) { ((MyItems**)self-&gt;UserData)[idx]-&gt;Selected = selected; }
    /// </summary>
    public delegate* unmanaged<ImGuiSelectionExternalStorage*, int, byte, void> AdapterSetItemSelected
    {
        get => Handle->AdapterSetItemSelected;
        set => Handle->AdapterSetItemSelected = value;
    }

    /// <summary>
    /// Apply selection requests by using AdapterSetItemSelected() calls
    /// </summary>
    public void ApplyRequests(ImGuiMultiSelectIOPtr ms_io)
    {
        ImGuiNative.ImGuiSelectionExternalStorage_ApplyRequests(this.Handle, ImGuiMultiSelectIOPtr.GetHandle(ms_io));
    }
}
