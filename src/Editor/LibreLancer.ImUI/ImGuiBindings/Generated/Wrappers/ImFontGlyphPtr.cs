// <auto-generated/>
// ReSharper disable InconsistentNaming
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace ImGuiNET;

public unsafe partial class ImFontGlyphPtr
{
    public ImFontGlyph* Handle { get; private set; }

    public ImFontGlyphPtr (ImFontGlyph* handle)
    {
        Handle = handle;
    }

    internal static ImFontGlyphPtr Create(ImFontGlyph* handle)
    {
        return handle == null ? null : new(handle);
    }

    internal static ImFontGlyph* GetHandle(ImFontGlyphPtr self)
    {
        return self == null ? null : self.Handle;
    }

    /// <summary>
    /// Flag to indicate glyph is colored and should generally ignore tinting (make it usable with no shift on little-endian as this is used in loops)
    /// </summary>
    public uint Colored
    {
        get => Handle->Colored;
    }

    /// <summary>
    /// Flag to indicate glyph has no visible pixels (e.g. space). Allow early out when rendering.
    /// </summary>
    public uint Visible
    {
        get => Handle->Visible;
    }

    /// <summary>
    /// Index of source in parent font
    /// </summary>
    public uint SourceIdx
    {
        get => Handle->SourceIdx;
    }

    /// <summary>
    /// 0x0000..0x10FFFF
    /// </summary>
    public uint Codepoint
    {
        get => Handle->Codepoint;
    }

    /// <summary>
    /// Horizontal distance to advance cursor/layout position.
    /// </summary>
    public ref float AdvanceX => ref Unsafe.AsRef<float>(&Handle->AdvanceX);

    /// <summary>
    /// Glyph corners. Offsets from current cursor/layout position.
    /// </summary>
    public ref float X0 => ref Unsafe.AsRef<float>(&Handle->X0);

    /// <summary>
    /// Glyph corners. Offsets from current cursor/layout position.
    /// </summary>
    public ref float Y0 => ref Unsafe.AsRef<float>(&Handle->Y0);

    /// <summary>
    /// Glyph corners. Offsets from current cursor/layout position.
    /// </summary>
    public ref float X1 => ref Unsafe.AsRef<float>(&Handle->X1);

    /// <summary>
    /// Glyph corners. Offsets from current cursor/layout position.
    /// </summary>
    public ref float Y1 => ref Unsafe.AsRef<float>(&Handle->Y1);

    /// <summary>
    /// Texture coordinates for the current value of ImFontAtlas-&gt;TexRef. Cached equivalent of calling GetCustomRect() with PackId.
    /// </summary>
    public ref float U0 => ref Unsafe.AsRef<float>(&Handle->U0);

    /// <summary>
    /// Texture coordinates for the current value of ImFontAtlas-&gt;TexRef. Cached equivalent of calling GetCustomRect() with PackId.
    /// </summary>
    public ref float V0 => ref Unsafe.AsRef<float>(&Handle->V0);

    /// <summary>
    /// Texture coordinates for the current value of ImFontAtlas-&gt;TexRef. Cached equivalent of calling GetCustomRect() with PackId.
    /// </summary>
    public ref float U1 => ref Unsafe.AsRef<float>(&Handle->U1);

    /// <summary>
    /// Texture coordinates for the current value of ImFontAtlas-&gt;TexRef. Cached equivalent of calling GetCustomRect() with PackId.
    /// </summary>
    public ref float V1 => ref Unsafe.AsRef<float>(&Handle->V1);

    /// <summary>
    /// [Internal] ImFontAtlasRectId value (FIXME: Cold data, could be moved elsewhere?)
    /// </summary>
    public ref int PackId => ref Unsafe.AsRef<int>(&Handle->PackId);

}
