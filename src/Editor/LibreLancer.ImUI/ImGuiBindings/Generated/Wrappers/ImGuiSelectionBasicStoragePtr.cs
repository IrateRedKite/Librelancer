// <auto-generated/>
// ReSharper disable InconsistentNaming
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace ImGuiNET;

public unsafe partial class ImGuiSelectionBasicStoragePtr
{
    public ImGuiSelectionBasicStorage* Handle { get; private set; }

    public ImGuiSelectionBasicStoragePtr (ImGuiSelectionBasicStorage* handle)
    {
        Handle = handle;
    }

    internal static ImGuiSelectionBasicStoragePtr Create(ImGuiSelectionBasicStorage* handle)
    {
        return handle == null ? null : new(handle);
    }

    internal static ImGuiSelectionBasicStorage* GetHandle(ImGuiSelectionBasicStoragePtr self)
    {
        return self == null ? null : self.Handle;
    }

    /// <summary>
    /// <para>Members</para>
    /// // Number of selected items, maintained by this helper.
    /// </summary>
    public ref int Size => ref Unsafe.AsRef<int>(&Handle->Size);

    /// <summary>
    /// = false  // GetNextSelectedItem() will return ordered selection (currently implemented by two additional sorts of selection. Could be improved)
    /// </summary>
    public bool PreserveOrder
    {
        get => Handle->PreserveOrder;
        set => Handle->PreserveOrder = value;
    }

    /// <summary>
    /// = NULL   // User data for use by adapter function        // e.g. selection.UserData = (void*)my_items;
    /// </summary>
    public IntPtr UserData
    {
        get => Handle->UserData;
        set => Handle->UserData = value;
    }

    /// <summary>
    /// e.g. selection.AdapterIndexToStorageId = [](ImGuiSelectionBasicStorage* self, int idx) { return ((MyItems**)self-&gt;UserData)[idx]-&gt;ID; };
    /// </summary>
    public delegate* unmanaged<ImGuiSelectionBasicStorage*, int, uint> AdapterIndexToStorageId
    {
        get => Handle->AdapterIndexToStorageId;
        set => Handle->AdapterIndexToStorageId = value;
    }

    /// <summary>
    /// [Internal] Increasing counter to store selection order
    /// </summary>
    public ref int _SelectionOrder => ref Unsafe.AsRef<int>(&Handle->_SelectionOrder);

    /// <summary>
    /// [Internal] Selection set. Think of this as similar to e.g. std::set&lt;ImGuiID&gt;. Prefer not accessing directly: iterate with GetNextSelectedItem().
    /// </summary>
    public ref ImGuiStorage _Storage => ref Unsafe.AsRef<ImGuiStorage>(&Handle->_Storage);

    /// <summary>
    /// Apply selection requests coming from BeginMultiSelect() and EndMultiSelect() functions. It uses 'items_count' passed to BeginMultiSelect()
    /// </summary>
    public void ApplyRequests(ImGuiMultiSelectIOPtr ms_io)
    {
        ImGuiNative.ImGuiSelectionBasicStorage_ApplyRequests(this.Handle, ImGuiMultiSelectIOPtr.GetHandle(ms_io));
    }
    /// <summary>
    /// Query if an item id is in selection.
    /// </summary>
    public bool Contains(uint id)
    {
        return ImGuiNative.ImGuiSelectionBasicStorage_Contains(this.Handle, id) != 0;
    }
    /// <summary>
    /// Clear selection
    /// </summary>
    public void Clear()
    {
        ImGuiNative.ImGuiSelectionBasicStorage_Clear(this.Handle);
    }
    /// <summary>
    /// Swap two selections
    /// </summary>
    public void Swap(ImGuiSelectionBasicStoragePtr r)
    {
        ImGuiNative.ImGuiSelectionBasicStorage_Swap(this.Handle, ImGuiSelectionBasicStoragePtr.GetHandle(r));
    }
    /// <summary>
    /// Add/remove an item from selection (generally done by ApplyRequests() function)
    /// </summary>
    public void SetItemSelected(uint id, bool selected)
    {
        ImGuiNative.ImGuiSelectionBasicStorage_SetItemSelected(this.Handle, id, selected ? (byte)1 : (byte)0);
    }
    /// <summary>
    /// Iterate selection with 'void* it = NULL; ImGuiID id; while (selection.GetNextSelectedItem(&amp;it, &amp;id)) { ... }'
    /// </summary>
    public bool GetNextSelectedItem(IntPtr* opaque_it, ref uint out_id)
    {
        fixed(uint* __out_id_p = &out_id)
        {
            return ImGuiNative.ImGuiSelectionBasicStorage_GetNextSelectedItem(this.Handle, opaque_it, __out_id_p) != 0;
        }
    }
    /// <summary>
    /// Convert index to item id based on provided adapter.
    /// </summary>
    public uint GetStorageIdFromIndex(int idx)
    {
        return ImGuiNative.ImGuiSelectionBasicStorage_GetStorageIdFromIndex(this.Handle, idx);
    }
}
