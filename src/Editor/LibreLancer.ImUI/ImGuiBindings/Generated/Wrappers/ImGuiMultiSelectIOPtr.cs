// <auto-generated/>
// ReSharper disable InconsistentNaming
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace ImGuiNET;

public unsafe partial class ImGuiMultiSelectIOPtr
{
    public ImGuiMultiSelectIO* Handle { get; private set; }

    public ImGuiMultiSelectIOPtr (ImGuiMultiSelectIO* handle)
    {
        Handle = handle;
    }

    internal static ImGuiMultiSelectIOPtr Create(ImGuiMultiSelectIO* handle)
    {
        return handle == null ? null : new(handle);
    }

    internal static ImGuiMultiSelectIO* GetHandle(ImGuiMultiSelectIOPtr self)
    {
        return self == null ? null : self.Handle;
    }

    /// <summary>
    /// <para>------------------------------------------// BeginMultiSelect / EndMultiSelect</para>
    /// ms:w, app:r     /  ms:w  app:r   // Requests to apply to your selection data.
    /// </summary>
    public ref ImVector<ImGuiSelectionRequest> Requests => ref Unsafe.AsRef<ImVector<ImGuiSelectionRequest>>(&Handle->Requests);

    /// <summary>
    /// ms:w  app:r     /                // (If using clipper) Begin: Source item (often the first selected item) must never be clipped: use clipper.IncludeItemByIndex() to ensure it is submitted.
    /// </summary>
    public ref long RangeSrcItem => ref Unsafe.AsRef<long>(&Handle->RangeSrcItem);

    /// <summary>
    /// ms:w, app:r     /                // (If using deletion) Last known SetNextItemSelectionUserData() value for NavId (if part of submitted items).
    /// </summary>
    public ref long NavIdItem => ref Unsafe.AsRef<long>(&Handle->NavIdItem);

    /// <summary>
    /// ms:w, app:r     /        app:r   // (If using deletion) Last known selection state for NavId (if part of submitted items).
    /// </summary>
    public bool NavIdSelected
    {
        get => Handle->NavIdSelected;
        set => Handle->NavIdSelected = value;
    }

    /// <summary>
    /// app:w     /  ms:r          // (If using deletion) Set before EndMultiSelect() to reset ResetSrcItem (e.g. if deleted selection).
    /// </summary>
    public bool RangeSrcReset
    {
        get => Handle->RangeSrcReset;
        set => Handle->RangeSrcReset = value;
    }

    /// <summary>
    /// ms:w, app:r     /        app:r   // 'int items_count' parameter to BeginMultiSelect() is copied here for convenience, allowing simpler calls to your ApplyRequests handler. Not used internally.
    /// </summary>
    public ref int ItemsCount => ref Unsafe.AsRef<int>(&Handle->ItemsCount);

}
