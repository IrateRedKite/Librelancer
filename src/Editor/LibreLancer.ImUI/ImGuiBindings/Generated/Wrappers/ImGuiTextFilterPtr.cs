// <auto-generated/>
// ReSharper disable InconsistentNaming
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace ImGuiNET;

public unsafe partial class ImGuiTextFilterPtr
{
    public ImGuiTextFilter* Handle { get; private set; }

    public ImGuiTextFilterPtr (ImGuiTextFilter* handle)
    {
        Handle = handle;
    }

    internal static ImGuiTextFilterPtr Create(ImGuiTextFilter* handle)
    {
        return handle == null ? null : new(handle);
    }

    internal static ImGuiTextFilter* GetHandle(ImGuiTextFilterPtr self)
    {
        return self == null ? null : self.Handle;
    }

    public Span<sbyte> InputBuf => Handle->InputBuf;

    public ref ImVector<ImGuiTextFilter_ImGuiTextRange> Filters => ref Unsafe.AsRef<ImVector<ImGuiTextFilter_ImGuiTextRange>>(&Handle->Filters);

    public ref int CountGrep => ref Unsafe.AsRef<int>(&Handle->CountGrep);

    /// <summary>
    /// Helper calling InputText+Build
    /// </summary>
    public bool Draw(string label = "Filter (inc,-exc)", float width = 0.0f)
    {
        byte* __bytes_label = stackalloc byte[128];
        using var __utf8z_label = new UTF8ZHelper(__bytes_label, 128, label);
        return ImGuiNative.ImGuiTextFilter_Draw(this.Handle, __utf8z_label.Pointer, width) != 0;
    }
    public bool PassFilter(string text, int? text_end = null)
    {
        byte* __bytes_text = stackalloc byte[128];
        using var __utf8z_text = new UTF8ZHelper(__bytes_text, 128, text);
        return ImGuiNative.ImGuiTextFilter_PassFilter(this.Handle, __utf8z_text.Pointer, __utf8z_text.GetTextEnd(text_end)) != 0;
    }
    public void Build()
    {
        ImGuiNative.ImGuiTextFilter_Build(this.Handle);
    }
    public void Clear()
    {
        ImGuiNative.ImGuiTextFilter_Clear(this.Handle);
    }
    public bool IsActive()
    {
        return ImGuiNative.ImGuiTextFilter_IsActive(this.Handle) != 0;
    }
}
