// <auto-generated/>
// ReSharper disable InconsistentNaming
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace ImGuiNET;

public unsafe partial class ImGuiTableSortSpecsPtr
{
    public ImGuiTableSortSpecs* Handle { get; private set; }

    public ImGuiTableSortSpecsPtr (ImGuiTableSortSpecs* handle)
    {
        Handle = handle;
    }

    internal static ImGuiTableSortSpecsPtr Create(ImGuiTableSortSpecs* handle)
    {
        return handle == null ? null : new(handle);
    }

    internal static ImGuiTableSortSpecs* GetHandle(ImGuiTableSortSpecsPtr self)
    {
        return self == null ? null : self.Handle;
    }

    /// <summary>
    /// Pointer to sort spec array.
    /// </summary>
    public ImGuiTableColumnSortSpecsPtr Specs
    {
        get => Handle->Specs;
        set => Handle->Specs = value;
    }

    /// <summary>
    /// Sort spec count. Most often 1. May be &gt; 1 when ImGuiTableFlags_SortMulti is enabled. May be == 0 when ImGuiTableFlags_SortTristate is enabled.
    /// </summary>
    public ref int SpecsCount => ref Unsafe.AsRef<int>(&Handle->SpecsCount);

    /// <summary>
    /// Set to true when specs have changed since last time! Use this to sort again, then clear the flag.
    /// </summary>
    public bool SpecsDirty
    {
        get => Handle->SpecsDirty;
        set => Handle->SpecsDirty = value;
    }

}
