// <auto-generated/>
// ReSharper disable InconsistentNaming
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace ImGuiNET;

public unsafe partial class ImGuiPlatformIOPtr
{
    public ImGuiPlatformIO* Handle { get; private set; }

    public ImGuiPlatformIOPtr (ImGuiPlatformIO* handle)
    {
        Handle = handle;
    }

    internal static ImGuiPlatformIOPtr Create(ImGuiPlatformIO* handle)
    {
        return handle == null ? null : new(handle);
    }

    internal static ImGuiPlatformIO* GetHandle(ImGuiPlatformIOPtr self)
    {
        return self == null ? null : self.Handle;
    }

    /// <summary>
    /// <para>Optional: Access OS clipboard</para>
    /// (default to use native Win32 clipboard on Windows, otherwise uses a private clipboard. Override to access OS clipboard on other architectures)
    /// </summary>
    public delegate* unmanaged<IntPtr, byte*> Platform_GetClipboardTextFn
    {
        get => Handle->Platform_GetClipboardTextFn;
        set => Handle->Platform_GetClipboardTextFn = value;
    }

    public delegate* unmanaged<IntPtr, byte*> Platform_SetClipboardTextFn
    {
        get => Handle->Platform_SetClipboardTextFn;
        set => Handle->Platform_SetClipboardTextFn = value;
    }

    public IntPtr Platform_ClipboardUserData
    {
        get => Handle->Platform_ClipboardUserData;
        set => Handle->Platform_ClipboardUserData = value;
    }

    /// <summary>
    /// <para>Optional: Open link/folder/file in OS Shell</para>
    /// (default to use ShellExecuteW() on Windows, system() on Linux/Mac)
    /// </summary>
    public delegate* unmanaged<IntPtr, byte*> Platform_OpenInShellFn
    {
        get => Handle->Platform_OpenInShellFn;
        set => Handle->Platform_OpenInShellFn = value;
    }

    public IntPtr Platform_OpenInShellUserData
    {
        get => Handle->Platform_OpenInShellUserData;
        set => Handle->Platform_OpenInShellUserData = value;
    }

    /// <summary>
    /// <para>Optional: Notify OS Input Method Editor of the screen position of your cursor for text input position (e.g. when using Japanese/Chinese IME on Windows)</para>
    /// (default to use native imm32 api on Windows)
    /// </summary>
    public delegate* unmanaged<IntPtr, byte*> Platform_SetImeDataFn
    {
        get => Handle->Platform_SetImeDataFn;
        set => Handle->Platform_SetImeDataFn = value;
    }

    public IntPtr Platform_ImeUserData
    {
        get => Handle->Platform_ImeUserData;
        set => Handle->Platform_ImeUserData = value;
    }

    /// <summary>
    /// <para>Optional: Platform locale</para>
    /// <para>[Experimental] Configure decimal point e.g. '.' or ',' useful for some languages (e.g. German), generally pulled from *localeconv()-&gt;decimal_point</para>
    /// '.'
    /// </summary>
    public ref ushort Platform_LocaleDecimalPoint => ref Unsafe.AsRef<ushort>(&Handle->Platform_LocaleDecimalPoint);

    /// <summary>
    /// Optional: Maximum texture size supported by renderer (used to adjust how we size textures). 0 if not known.
    /// </summary>
    public ref int Renderer_TextureMaxWidth => ref Unsafe.AsRef<int>(&Handle->Renderer_TextureMaxWidth);

    public ref int Renderer_TextureMaxHeight => ref Unsafe.AsRef<int>(&Handle->Renderer_TextureMaxHeight);

    /// <summary>
    /// Written by some backends during ImGui_ImplXXXX_RenderDrawData() call to point backend_specific ImGui_ImplXXXX_RenderState* structure.
    /// </summary>
    public IntPtr Renderer_RenderState
    {
        get => Handle->Renderer_RenderState;
        set => Handle->Renderer_RenderState = value;
    }

    /// <summary>
    /// <para>Textures list (the list is updated by calling ImGui::EndFrame or ImGui::Render)</para>
    /// <para>The ImGui_ImplXXXX_RenderDrawData() function of each backend generally access this via ImDrawData::Textures which points to this. The array is available here mostly because backends will want to destroy textures on shutdown.</para>
    /// List of textures used by Dear ImGui (most often 1) + contents of external texture list is automatically appended into this.
    /// </summary>
    public ref ImPtrVector<ImTextureData> Textures => ref Unsafe.AsRef<ImPtrVector<ImTextureData>>(&Handle->Textures);

}
