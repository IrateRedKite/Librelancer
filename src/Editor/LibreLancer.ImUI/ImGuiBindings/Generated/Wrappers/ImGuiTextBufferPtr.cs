// <auto-generated/>
// ReSharper disable InconsistentNaming
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace ImGuiNET;

public unsafe partial class ImGuiTextBufferPtr
{
    public ImGuiTextBuffer* Handle { get; private set; }

    public ImGuiTextBufferPtr (ImGuiTextBuffer* handle)
    {
        Handle = handle;
    }

    internal static ImGuiTextBufferPtr Create(ImGuiTextBuffer* handle)
    {
        return handle == null ? null : new(handle);
    }

    internal static ImGuiTextBuffer* GetHandle(ImGuiTextBufferPtr self)
    {
        return self == null ? null : self.Handle;
    }

    public ref ImVector<sbyte> Buf => ref Unsafe.AsRef<ImVector<sbyte>>(&Handle->Buf);

    public string begin()
    {
        return Marshal.PtrToStringUTF8((IntPtr)ImGuiNative.ImGuiTextBuffer_begin(this.Handle));
    }
    /// <summary>
    /// Buf is zero-terminated, so end() will point on the zero-terminator
    /// </summary>
    public string end()
    {
        return Marshal.PtrToStringUTF8((IntPtr)ImGuiNative.ImGuiTextBuffer_end(this.Handle));
    }
    public int size()
    {
        return ImGuiNative.ImGuiTextBuffer_size(this.Handle);
    }
    public bool empty()
    {
        return ImGuiNative.ImGuiTextBuffer_empty(this.Handle) != 0;
    }
    public void clear()
    {
        ImGuiNative.ImGuiTextBuffer_clear(this.Handle);
    }
    /// <summary>
    /// Similar to resize(0) on ImVector: empty string but don't free buffer.
    /// </summary>
    public void resize(int size)
    {
        ImGuiNative.ImGuiTextBuffer_resize(this.Handle, size);
    }
    public void reserve(int capacity)
    {
        ImGuiNative.ImGuiTextBuffer_reserve(this.Handle, capacity);
    }
    public string c_str()
    {
        return Marshal.PtrToStringUTF8((IntPtr)ImGuiNative.ImGuiTextBuffer_c_str(this.Handle));
    }
    public void append(string str, string str_end = null)
    {
        byte* __bytes_str = stackalloc byte[128];
        using var __utf8z_str = new UTF8ZHelper(__bytes_str, 128, str);
        byte* __bytes_str_end = stackalloc byte[128];
        using var __utf8z_str_end = new UTF8ZHelper(__bytes_str_end, 128, str_end);
        ImGuiNative.ImGuiTextBuffer_append(this.Handle, __utf8z_str.Pointer, __utf8z_str_end.Pointer);
    }
    public void appendf(string fmt)
    {
        byte* __bytes_fmt = stackalloc byte[128];
        using var __utf8z_fmt = new UTF8ZHelper(__bytes_fmt, 128, fmt);
        ImGuiNative.ImGuiTextBuffer_appendf(this.Handle, __utf8z_fmt.Pointer);
    }
}
