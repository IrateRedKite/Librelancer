// <auto-generated/>
// ReSharper disable InconsistentNaming
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace ImGuiNET;

public unsafe partial class ImGuiViewportPtr
{
    public ImGuiViewport* Handle { get; private set; }

    public ImGuiViewportPtr (ImGuiViewport* handle)
    {
        Handle = handle;
    }

    internal static ImGuiViewportPtr Create(ImGuiViewport* handle)
    {
        return handle == null ? null : new(handle);
    }

    internal static ImGuiViewport* GetHandle(ImGuiViewportPtr self)
    {
        return self == null ? null : self.Handle;
    }

    /// <summary>
    /// Unique identifier for the viewport
    /// </summary>
    public ref uint ID => ref Unsafe.AsRef<uint>(&Handle->ID);

    /// <summary>
    /// See ImGuiViewportFlags_
    /// </summary>
    public ref ImGuiViewportFlags Flags => ref Unsafe.AsRef<ImGuiViewportFlags>(&Handle->Flags);

    /// <summary>
    /// Main Area: Position of the viewport (Dear ImGui coordinates are the same as OS desktop/native coordinates)
    /// </summary>
    public ref System.Numerics.Vector2 Pos => ref Unsafe.AsRef<System.Numerics.Vector2>(&Handle->Pos);

    /// <summary>
    /// Main Area: Size of the viewport.
    /// </summary>
    public ref System.Numerics.Vector2 Size => ref Unsafe.AsRef<System.Numerics.Vector2>(&Handle->Size);

    /// <summary>
    /// Density of the viewport for Retina display (always 1,1 on Windows, may be 2,2 etc on macOS/iOS). This will affect font rasterizer density.
    /// </summary>
    public ref System.Numerics.Vector2 FramebufferScale => ref Unsafe.AsRef<System.Numerics.Vector2>(&Handle->FramebufferScale);

    /// <summary>
    /// Work Area: Position of the viewport minus task bars, menus bars, status bars (&gt;= Pos)
    /// </summary>
    public ref System.Numerics.Vector2 WorkPos => ref Unsafe.AsRef<System.Numerics.Vector2>(&Handle->WorkPos);

    /// <summary>
    /// Work Area: Size of the viewport minus task bars, menu bars, status bars (&lt;= Size)
    /// </summary>
    public ref System.Numerics.Vector2 WorkSize => ref Unsafe.AsRef<System.Numerics.Vector2>(&Handle->WorkSize);

    /// <summary>
    /// <para>Platform/Backend Dependent Data</para>
    /// void* to hold higher-level, platform window handle (e.g. HWND, GLFWWindow*, SDL_Window*)
    /// </summary>
    public IntPtr PlatformHandle
    {
        get => Handle->PlatformHandle;
        set => Handle->PlatformHandle = value;
    }

    /// <summary>
    /// void* to hold lower-level, platform-native window handle (under Win32 this is expected to be a HWND, unused for other platforms)
    /// </summary>
    public IntPtr PlatformHandleRaw
    {
        get => Handle->PlatformHandleRaw;
        set => Handle->PlatformHandleRaw = value;
    }

    /// <summary>
    /// Helpers
    /// </summary>
    public System.Numerics.Vector2 GetCenter()
    {
        return ImGuiNative.ImGuiViewport_GetCenter(this.Handle);
    }
    public System.Numerics.Vector2 GetWorkCenter()
    {
        return ImGuiNative.ImGuiViewport_GetWorkCenter(this.Handle);
    }
}
