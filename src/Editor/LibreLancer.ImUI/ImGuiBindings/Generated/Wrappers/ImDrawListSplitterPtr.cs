// <auto-generated/>
// ReSharper disable InconsistentNaming
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace ImGuiNET;

public unsafe partial class ImDrawListSplitterPtr
{
    public ImDrawListSplitter* Handle { get; private set; }

    public ImDrawListSplitterPtr (ImDrawListSplitter* handle)
    {
        Handle = handle;
    }

    internal static ImDrawListSplitterPtr Create(ImDrawListSplitter* handle)
    {
        return handle == null ? null : new(handle);
    }

    internal static ImDrawListSplitter* GetHandle(ImDrawListSplitterPtr self)
    {
        return self == null ? null : self.Handle;
    }

    /// <summary>
    /// Current channel number (0)
    /// </summary>
    public ref int _Current => ref Unsafe.AsRef<int>(&Handle->_Current);

    /// <summary>
    /// Number of active channels (1+)
    /// </summary>
    public ref int _Count => ref Unsafe.AsRef<int>(&Handle->_Count);

    /// <summary>
    /// Draw channels (not resized down so _Count might be &lt; Channels.Size)
    /// </summary>
    public ref ImVector<ImDrawChannel> _Channels => ref Unsafe.AsRef<ImVector<ImDrawChannel>>(&Handle->_Channels);

    /// <summary>
    /// Do not clear Channels[] so our allocations are reused next frame
    /// </summary>
    public void Clear()
    {
        ImGuiNative.ImDrawListSplitter_Clear(this.Handle);
    }
    public void ClearFreeMemory()
    {
        ImGuiNative.ImDrawListSplitter_ClearFreeMemory(this.Handle);
    }
    public void Split(ImDrawListPtr draw_list, int count)
    {
        ImGuiNative.ImDrawListSplitter_Split(this.Handle, ImDrawListPtr.GetHandle(draw_list), count);
    }
    public void Merge(ImDrawListPtr draw_list)
    {
        ImGuiNative.ImDrawListSplitter_Merge(this.Handle, ImDrawListPtr.GetHandle(draw_list));
    }
    public void SetCurrentChannel(ImDrawListPtr draw_list, int channel_idx)
    {
        ImGuiNative.ImDrawListSplitter_SetCurrentChannel(this.Handle, ImDrawListPtr.GetHandle(draw_list), channel_idx);
    }
}
