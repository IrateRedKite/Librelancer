// <auto-generated/>
// ReSharper disable InconsistentNaming
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference
using System;
using System.Runtime.InteropServices;
namespace ImGuiNET;

public unsafe partial struct ImGuiStyle
{
    /// <summary>
    /// <para>Font scaling</para>
    /// <para>- recap: ImGui::GetFontSize() == FontSizeBase * (FontScaleMain * FontScaleDpi * other_scaling_factors)</para>
    /// Current base font size before external global factors are applied. Use PushFont(NULL, size) to modify. Use ImGui::GetFontSize() to obtain scaled value.
    /// </summary>
    public float FontSizeBase;
    /// <summary>
    /// Main global scale factor. May be set by application once, or exposed to end-user.
    /// </summary>
    public float FontScaleMain;
    /// <summary>
    /// Additional global scale factor from viewport/monitor contents scale. When io.ConfigDpiScaleFonts is enabled, this is automatically overwritten when changing monitor DPI.
    /// </summary>
    public float FontScaleDpi;
    /// <summary>
    /// Global alpha applies to everything in Dear ImGui.
    /// </summary>
    public float Alpha;
    /// <summary>
    /// Additional alpha multiplier applied by BeginDisabled(). Multiply over current value of Alpha.
    /// </summary>
    public float DisabledAlpha;
    /// <summary>
    /// Padding within a window.
    /// </summary>
    public System.Numerics.Vector2 WindowPadding;
    /// <summary>
    /// Radius of window corners rounding. Set to 0.0f to have rectangular windows. Large values tend to lead to variety of artifacts and are not recommended.
    /// </summary>
    public float WindowRounding;
    /// <summary>
    /// Thickness of border around windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
    /// </summary>
    public float WindowBorderSize;
    /// <summary>
    /// Hit-testing extent outside/inside resizing border. Also extend determination of hovered window. Generally meaningfully larger than WindowBorderSize to make it easy to reach borders.
    /// </summary>
    public float WindowBorderHoverPadding;
    /// <summary>
    /// Minimum window size. This is a global setting. If you want to constrain individual windows, use SetNextWindowSizeConstraints().
    /// </summary>
    public System.Numerics.Vector2 WindowMinSize;
    /// <summary>
    /// Alignment for title bar text. Defaults to (0.0f,0.5f) for left-aligned,vertically centered.
    /// </summary>
    public System.Numerics.Vector2 WindowTitleAlign;
    /// <summary>
    /// Side of the collapsing/docking button in the title bar (None/Left/Right). Defaults to ImGuiDir_Left.
    /// </summary>
    public ImGuiDir WindowMenuButtonPosition;
    /// <summary>
    /// Radius of child window corners rounding. Set to 0.0f to have rectangular windows.
    /// </summary>
    public float ChildRounding;
    /// <summary>
    /// Thickness of border around child windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
    /// </summary>
    public float ChildBorderSize;
    /// <summary>
    /// Radius of popup window corners rounding. (Note that tooltip windows use WindowRounding)
    /// </summary>
    public float PopupRounding;
    /// <summary>
    /// Thickness of border around popup/tooltip windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
    /// </summary>
    public float PopupBorderSize;
    /// <summary>
    /// Padding within a framed rectangle (used by most widgets).
    /// </summary>
    public System.Numerics.Vector2 FramePadding;
    /// <summary>
    /// Radius of frame corners rounding. Set to 0.0f to have rectangular frame (used by most widgets).
    /// </summary>
    public float FrameRounding;
    /// <summary>
    /// Thickness of border around frames. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
    /// </summary>
    public float FrameBorderSize;
    /// <summary>
    /// Horizontal and vertical spacing between widgets/lines.
    /// </summary>
    public System.Numerics.Vector2 ItemSpacing;
    /// <summary>
    /// Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label).
    /// </summary>
    public System.Numerics.Vector2 ItemInnerSpacing;
    /// <summary>
    /// Padding within a table cell. Cellpadding.x is locked for entire table. CellPadding.y may be altered between different rows.
    /// </summary>
    public System.Numerics.Vector2 CellPadding;
    /// <summary>
    /// Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!
    /// </summary>
    public System.Numerics.Vector2 TouchExtraPadding;
    /// <summary>
    /// Horizontal indentation when e.g. entering a tree node. Generally == (FontSize + FramePadding.x*2).
    /// </summary>
    public float IndentSpacing;
    /// <summary>
    /// Minimum horizontal spacing between two columns. Preferably &gt; (FramePadding.x + 1).
    /// </summary>
    public float ColumnsMinSpacing;
    /// <summary>
    /// Width of the vertical scrollbar, Height of the horizontal scrollbar.
    /// </summary>
    public float ScrollbarSize;
    /// <summary>
    /// Radius of grab corners for scrollbar.
    /// </summary>
    public float ScrollbarRounding;
    /// <summary>
    /// Minimum width/height of a grab box for slider/scrollbar.
    /// </summary>
    public float GrabMinSize;
    /// <summary>
    /// Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.
    /// </summary>
    public float GrabRounding;
    /// <summary>
    /// The size in pixels of the dead-zone around zero on logarithmic sliders that cross zero.
    /// </summary>
    public float LogSliderDeadzone;
    /// <summary>
    /// Thickness of border around Image() calls.
    /// </summary>
    public float ImageBorderSize;
    /// <summary>
    /// Radius of upper corners of a tab. Set to 0.0f to have rectangular tabs.
    /// </summary>
    public float TabRounding;
    /// <summary>
    /// Thickness of border around tabs.
    /// </summary>
    public float TabBorderSize;
    /// <summary>
    /// -1: always visible. 0.0f: visible when hovered. &gt;0.0f: visible when hovered if minimum width.
    /// </summary>
    public float TabCloseButtonMinWidthSelected;
    /// <summary>
    /// -1: always visible. 0.0f: visible when hovered. &gt;0.0f: visible when hovered if minimum width. FLT_MAX: never show close button when unselected.
    /// </summary>
    public float TabCloseButtonMinWidthUnselected;
    /// <summary>
    /// Thickness of tab-bar separator, which takes on the tab active color to denote focus.
    /// </summary>
    public float TabBarBorderSize;
    /// <summary>
    /// Thickness of tab-bar overline, which highlights the selected tab-bar.
    /// </summary>
    public float TabBarOverlineSize;
    /// <summary>
    /// Angle of angled headers (supported values range from -50.0f degrees to +50.0f degrees).
    /// </summary>
    public float TableAngledHeadersAngle;
    /// <summary>
    /// Alignment of angled headers within the cell
    /// </summary>
    public System.Numerics.Vector2 TableAngledHeadersTextAlign;
    /// <summary>
    /// Default way to draw lines connecting TreeNode hierarchy. ImGuiTreeNodeFlags_DrawLinesNone or ImGuiTreeNodeFlags_DrawLinesFull or ImGuiTreeNodeFlags_DrawLinesToNodes.
    /// </summary>
    public ImGuiTreeNodeFlags TreeLinesFlags;
    /// <summary>
    /// Thickness of outlines when using ImGuiTreeNodeFlags_DrawLines.
    /// </summary>
    public float TreeLinesSize;
    /// <summary>
    /// Radius of lines connecting child nodes to the vertical line.
    /// </summary>
    public float TreeLinesRounding;
    /// <summary>
    /// Side of the color button in the ColorEdit4 widget (left/right). Defaults to ImGuiDir_Right.
    /// </summary>
    public ImGuiDir ColorButtonPosition;
    /// <summary>
    /// Alignment of button text when button is larger than text. Defaults to (0.5f, 0.5f) (centered).
    /// </summary>
    public System.Numerics.Vector2 ButtonTextAlign;
    /// <summary>
    /// Alignment of selectable text. Defaults to (0.0f, 0.0f) (top-left aligned). It's generally important to keep this left-aligned if you want to lay multiple items on a same line.
    /// </summary>
    public System.Numerics.Vector2 SelectableTextAlign;
    /// <summary>
    /// Thickness of border in SeparatorText()
    /// </summary>
    public float SeparatorTextBorderSize;
    /// <summary>
    /// Alignment of text within the separator. Defaults to (0.0f, 0.5f) (left aligned, center).
    /// </summary>
    public System.Numerics.Vector2 SeparatorTextAlign;
    /// <summary>
    /// Horizontal offset of text from each edge of the separator + spacing on other axis. Generally small values. .y is recommended to be == FramePadding.y.
    /// </summary>
    public System.Numerics.Vector2 SeparatorTextPadding;
    /// <summary>
    /// Apply to regular windows: amount which we enforce to keep visible when moving near edges of your screen.
    /// </summary>
    public System.Numerics.Vector2 DisplayWindowPadding;
    /// <summary>
    /// Apply to every windows, menus, popups, tooltips: amount where we avoid displaying contents. Adjust if you cannot see the edges of your screen (e.g. on a TV where scaling has not been configured).
    /// </summary>
    public System.Numerics.Vector2 DisplaySafeAreaPadding;
    /// <summary>
    /// Scale software rendered mouse cursor (when io.MouseDrawCursor is enabled). We apply per-monitor DPI scaling over this scale. May be removed later.
    /// </summary>
    public float MouseCursorScale;
    private byte __AntiAliasedLines;
    /// <summary>
    /// Enable anti-aliased lines/borders. Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList).
    /// </summary>
    public bool AntiAliasedLines
    {
        get => __AntiAliasedLines != 0;
        set => __AntiAliasedLines = value ? (byte)1 : (byte)0;
    }
    private byte __AntiAliasedLinesUseTex;
    /// <summary>
    /// Enable anti-aliased lines/borders using textures where possible. Require backend to render with bilinear filtering (NOT point/nearest filtering). Latched at the beginning of the frame (copied to ImDrawList).
    /// </summary>
    public bool AntiAliasedLinesUseTex
    {
        get => __AntiAliasedLinesUseTex != 0;
        set => __AntiAliasedLinesUseTex = value ? (byte)1 : (byte)0;
    }
    private byte __AntiAliasedFill;
    /// <summary>
    /// Enable anti-aliased edges around filled shapes (rounded rectangles, circles, etc.). Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList).
    /// </summary>
    public bool AntiAliasedFill
    {
        get => __AntiAliasedFill != 0;
        set => __AntiAliasedFill = value ? (byte)1 : (byte)0;
    }
    /// <summary>
    /// Tessellation tolerance when using PathBezierCurveTo() without a specific number of segments. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.
    /// </summary>
    public float CurveTessellationTol;
    /// <summary>
    /// Maximum error (in pixels) allowed when using AddCircle()/AddCircleFilled() or drawing rounded corner rectangles with no explicit segment count specified. Decrease for higher quality but more geometry.
    /// </summary>
    public float CircleTessellationMaxError;
    [System.Runtime.CompilerServices.InlineArray(((int)(ImGuiCol.COUNT)))]
    private struct __inline_Colors
    {
        public System.Numerics.Vector4 _0;
    }
    private __inline_Colors __array_Colors;
    /// <summary>
    /// Colors
    /// </summary>
    public Span<System.Numerics.Vector4> Colors => __array_Colors;

    /// <summary>
    /// <para>Behaviors</para>
    /// <para>(It is possible to modify those fields mid-frame if specific behavior need it, unlike e.g. configuration fields in ImGuiIO)</para>
    /// Delay for IsItemHovered(ImGuiHoveredFlags_Stationary). Time required to consider mouse stationary.
    /// </summary>
    public float HoverStationaryDelay;
    /// <summary>
    /// Delay for IsItemHovered(ImGuiHoveredFlags_DelayShort). Usually used along with HoverStationaryDelay.
    /// </summary>
    public float HoverDelayShort;
    /// <summary>
    /// Delay for IsItemHovered(ImGuiHoveredFlags_DelayNormal). "
    /// </summary>
    public float HoverDelayNormal;
    /// <summary>
    /// Default flags when using IsItemHovered(ImGuiHoveredFlags_ForTooltip) or BeginItemTooltip()/SetItemTooltip() while using mouse.
    /// </summary>
    public ImGuiHoveredFlags HoverFlagsForTooltipMouse;
    /// <summary>
    /// Default flags when using IsItemHovered(ImGuiHoveredFlags_ForTooltip) or BeginItemTooltip()/SetItemTooltip() while using keyboard/gamepad.
    /// </summary>
    public ImGuiHoveredFlags HoverFlagsForTooltipNav;
    /// <summary>
    /// <para>[Internal]</para>
    /// FIXME-WIP: Reference scale, as applied by ScaleAllSizes().
    /// </summary>
    public float _MainScale;
    /// <summary>
    /// FIXME: Temporary hack until we finish remaining work.
    /// </summary>
    public float _NextFrameFontSizeBase;
}
