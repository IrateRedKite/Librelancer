// <auto-generated/>
// ReSharper disable InconsistentNaming
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference
using System;
using System.Runtime.InteropServices;
namespace ImGuiNET;

/// <summary>
/// <para>Font runtime data for a given size</para>
/// Important: pointers to ImFontBaked are only valid for the current frame.
/// </summary>
public unsafe partial struct ImFontBaked
{
    /// <summary>
    /// <para>[Internal] Members: Hot ~20/24 bytes (for CalcTextSize)</para>
    /// 12-16 // out // Sparse. Glyphs-&gt;AdvanceX in a directly indexable way (cache-friendly for CalcTextSize functions which only this info, and are often bottleneck in large UI).
    /// </summary>
    public ImVector<float> IndexAdvanceX;
    /// <summary>
    /// 4     // out // FindGlyph(FallbackChar)-&gt;AdvanceX
    /// </summary>
    public float FallbackAdvanceX;
    /// <summary>
    /// 4     // in  // Height of characters/line, set during loading (doesn't change after loading)
    /// </summary>
    public float Size;
    /// <summary>
    /// 4     // in  // Density this is baked at
    /// </summary>
    public float RasterizerDensity;
    /// <summary>
    /// <para>[Internal] Members: Hot ~28/36 bytes (for RenderText loop)</para>
    /// 12-16 // out // Sparse. Index glyphs by Unicode code-point.
    /// </summary>
    public ImVector<ushort> IndexLookup;
    /// <summary>
    /// 12-16 // out // All glyphs.
    /// </summary>
    public ImVector<ImFontGlyph> Glyphs;
    /// <summary>
    /// 4     // out // Index of FontFallbackChar
    /// </summary>
    public int FallbackGlyphIndex;
    /// <summary>
    /// <para>[Internal] Members: Cold</para>
    /// 4+4   // out // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize] (unscaled)
    /// </summary>
    public float Ascent;
    /// <summary>
    /// <para>[Internal] Members: Cold</para>
    /// 4+4   // out // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize] (unscaled)
    /// </summary>
    public float Descent;
    private uint __bitfield1;
    public uint MetricsTotalSurface
    {
        get => (uint)((__bitfield1 >> 0) & (0b11111111111111111111111111));
    }
    public uint WantDestroy
    {
        get => (uint)((__bitfield1 >> 26) & (0b1));
    }
    public uint LockLoadingFallback
    {
        get => (uint)((__bitfield1 >> 27) & (0b1));
    }
    /// <summary>
    /// 4     //     // Record of that time this was bounds
    /// </summary>
    public int LastUsedFrame;
    /// <summary>
    /// 4     //
    /// </summary>
    public uint BakedId;
    private ImFont* __ContainerFont;
    /// <summary>
    /// 4-8   // in  // Parent font
    /// </summary>
    public ImFontPtr ContainerFont
    {
        get => ImFontPtr.Create(__ContainerFont);
        set => __ContainerFont = ImFontPtr.GetHandle(value);
    }
    /// <summary>
    /// 4-8   //     // Font loader opaque storage (per baked font * sources): single contiguous buffer allocated by imgui, passed to loader.
    /// </summary>
    public IntPtr FontLoaderDatas;
}
