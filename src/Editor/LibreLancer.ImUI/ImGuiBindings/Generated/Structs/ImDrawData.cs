// <auto-generated/>
// ReSharper disable InconsistentNaming
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference
using System;
using System.Runtime.InteropServices;
namespace ImGuiNET;

/// <summary>
/// <para>All draw data to render a Dear ImGui frame</para>
/// <para>(NB: the style and the naming convention here is a little inconsistent, we currently preserve them for backward compatibility purpose,</para>
/// as this is one of the oldest structure exposed by the library! Basically, ImDrawList == CmdList)
/// </summary>
public unsafe partial struct ImDrawData
{
    private byte __Valid;
    /// <summary>
    /// Only valid after Render() is called and before the next NewFrame() is called.
    /// </summary>
    public bool Valid
    {
        get => __Valid != 0;
        set => __Valid = value ? (byte)1 : (byte)0;
    }
    /// <summary>
    /// Number of ImDrawList* to render. (== CmdLists.Size). Exists for legacy reason.
    /// </summary>
    public int CmdListsCount;
    /// <summary>
    /// For convenience, sum of all ImDrawList's IdxBuffer.Size
    /// </summary>
    public int TotalIdxCount;
    /// <summary>
    /// For convenience, sum of all ImDrawList's VtxBuffer.Size
    /// </summary>
    public int TotalVtxCount;
    /// <summary>
    /// Array of ImDrawList* to render. The ImDrawLists are owned by ImGuiContext and only pointed to from here.
    /// </summary>
    public ImPtrVector<ImDrawList> CmdLists;
    /// <summary>
    /// Top-left position of the viewport to render (== top-left of the orthogonal projection matrix to use) (== GetMainViewport()-&gt;Pos for the main viewport, == (0.0) in most single-viewport applications)
    /// </summary>
    public System.Numerics.Vector2 DisplayPos;
    /// <summary>
    /// Size of the viewport to render (== GetMainViewport()-&gt;Size for the main viewport, == io.DisplaySize in most single-viewport applications)
    /// </summary>
    public System.Numerics.Vector2 DisplaySize;
    /// <summary>
    /// Amount of pixels for each unit of DisplaySize. Copied from viewport-&gt;FramebufferScale (== io.DisplayFramebufferScale for main viewport). Generally (1,1) on normal display, (2,2) on OSX with Retina display.
    /// </summary>
    public System.Numerics.Vector2 FramebufferScale;
    private ImGuiViewport* __OwnerViewport;
    /// <summary>
    /// Viewport carrying the ImDrawData instance, might be of use to the renderer (generally not).
    /// </summary>
    public ImGuiViewportPtr OwnerViewport
    {
        get => ImGuiViewportPtr.Create(__OwnerViewport);
        set => __OwnerViewport = ImGuiViewportPtr.GetHandle(value);
    }
    /// <summary>
    /// List of textures to update. Most of the times the list is shared by all ImDrawData, has only 1 texture and it doesn't need any update. This almost always points to ImGui::GetPlatformIO().Textures[]. May be overriden or set to NULL if you want to manually update textures.
    /// </summary>
    public ImPtrVector<ImTextureData>* Textures;
}
