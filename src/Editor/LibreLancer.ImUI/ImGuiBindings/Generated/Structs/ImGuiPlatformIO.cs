// <auto-generated/>
// ReSharper disable InconsistentNaming
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference
using System;
using System.Runtime.InteropServices;
namespace ImGuiNET;

/// <summary>
/// Access via ImGui::GetPlatformIO()
/// </summary>
public unsafe partial struct ImGuiPlatformIO
{
    /// <summary>
    /// <para>Optional: Access OS clipboard</para>
    /// (default to use native Win32 clipboard on Windows, otherwise uses a private clipboard. Override to access OS clipboard on other architectures)
    /// </summary>
    public delegate* unmanaged<IntPtr, byte*> Platform_GetClipboardTextFn;
    public delegate* unmanaged<IntPtr, byte*, void> Platform_SetClipboardTextFn;
    public IntPtr Platform_ClipboardUserData;
    /// <summary>
    /// <para>Optional: Open link/folder/file in OS Shell</para>
    /// (default to use ShellExecuteW() on Windows, system() on Linux/Mac)
    /// </summary>
    public delegate* unmanaged<IntPtr, byte*, byte> Platform_OpenInShellFn;
    public IntPtr Platform_OpenInShellUserData;
    /// <summary>
    /// <para>Optional: Notify OS Input Method Editor of the screen position of your cursor for text input position (e.g. when using Japanese/Chinese IME on Windows)</para>
    /// (default to use native imm32 api on Windows)
    /// </summary>
    public delegate* unmanaged<IntPtr, ImGuiViewport*, ImGuiPlatformImeData*, void> Platform_SetImeDataFn;
    public IntPtr Platform_ImeUserData;
    /// <summary>
    /// <para>Optional: Platform locale</para>
    /// <para>[Experimental] Configure decimal point e.g. '.' or ',' useful for some languages (e.g. German), generally pulled from *localeconv()-&gt;decimal_point</para>
    /// '.'
    /// </summary>
    public ushort Platform_LocaleDecimalPoint;
    /// <summary>
    /// Optional: Maximum texture size supported by renderer (used to adjust how we size textures). 0 if not known.
    /// </summary>
    public int Renderer_TextureMaxWidth;
    public int Renderer_TextureMaxHeight;
    /// <summary>
    /// Written by some backends during ImGui_ImplXXXX_RenderDrawData() call to point backend_specific ImGui_ImplXXXX_RenderState* structure.
    /// </summary>
    public IntPtr Renderer_RenderState;
    /// <summary>
    /// <para>Textures list (the list is updated by calling ImGui::EndFrame or ImGui::Render)</para>
    /// <para>The ImGui_ImplXXXX_RenderDrawData() function of each backend generally access this via ImDrawData::Textures which points to this. The array is available here mostly because backends will want to destroy textures on shutdown.</para>
    /// List of textures used by Dear ImGui (most often 1) + contents of external texture list is automatically appended into this.
    /// </summary>
    public ImPtrVector<ImTextureData> Textures;
}
