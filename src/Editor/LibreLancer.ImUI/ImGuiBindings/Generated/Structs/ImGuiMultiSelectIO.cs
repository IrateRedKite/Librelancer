// <auto-generated/>
// ReSharper disable InconsistentNaming
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference
using System;
using System.Runtime.InteropServices;
namespace ImGuiNET;

/// <summary>
/// <para>Main IO structure returned by BeginMultiSelect()/EndMultiSelect().</para>
/// <para>This mainly contains a list of selection requests.</para>
/// <para>- Use 'Demo-&gt;Tools-&gt;Debug Log-&gt;Selection' to see requests as they happen.</para>
/// <para>- Some fields are only useful if your list is dynamic and allows deletion (getting post-deletion focus/state right is shown in the demo)</para>
/// - Below: who reads/writes each fields? 'r'=read, 'w'=write, 'ms'=multi-select code, 'app'=application/user code.
/// </summary>
public unsafe partial struct ImGuiMultiSelectIO
{
    /// <summary>
    /// <para>------------------------------------------// BeginMultiSelect / EndMultiSelect</para>
    /// ms:w, app:r     /  ms:w  app:r   // Requests to apply to your selection data.
    /// </summary>
    public ImVector<ImGuiSelectionRequest> Requests;
    /// <summary>
    /// ms:w  app:r     /                // (If using clipper) Begin: Source item (often the first selected item) must never be clipped: use clipper.IncludeItemByIndex() to ensure it is submitted.
    /// </summary>
    public long RangeSrcItem;
    /// <summary>
    /// ms:w, app:r     /                // (If using deletion) Last known SetNextItemSelectionUserData() value for NavId (if part of submitted items).
    /// </summary>
    public long NavIdItem;
    private byte __NavIdSelected;
    /// <summary>
    /// ms:w, app:r     /        app:r   // (If using deletion) Last known selection state for NavId (if part of submitted items).
    /// </summary>
    public bool NavIdSelected
    {
        get => __NavIdSelected != 0;
        set => __NavIdSelected = value ? (byte)1 : (byte)0;
    }
    private byte __RangeSrcReset;
    /// <summary>
    /// app:w     /  ms:r          // (If using deletion) Set before EndMultiSelect() to reset ResetSrcItem (e.g. if deleted selection).
    /// </summary>
    public bool RangeSrcReset
    {
        get => __RangeSrcReset != 0;
        set => __RangeSrcReset = value ? (byte)1 : (byte)0;
    }
    /// <summary>
    /// ms:w, app:r     /        app:r   // 'int items_count' parameter to BeginMultiSelect() is copied here for convenience, allowing simpler calls to your ApplyRequests handler. Not used internally.
    /// </summary>
    public int ItemsCount;
}
