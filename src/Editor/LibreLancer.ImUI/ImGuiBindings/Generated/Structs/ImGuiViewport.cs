// <auto-generated/>
// ReSharper disable InconsistentNaming
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference
using System;
using System.Runtime.InteropServices;
namespace ImGuiNET;

/// <summary>
/// <para>- Currently represents the Platform Window created by the application which is hosting our Dear ImGui windows.</para>
/// <para>- In 'docking' branch with multi-viewport enabled, we extend this concept to have multiple active viewports.</para>
/// <para>- In the future we will extend this concept further to also represent Platform Monitor and support a "no main platform window" operation mode.</para>
/// <para>- About Main Area vs Work Area:</para>
/// <para>- Main Area = entire viewport.</para>
/// <para>- Work Area = entire viewport minus sections used by main menu bars (for platform windows), or by task bar (for platform monitor).</para>
/// - Windows are generally trying to stay within the Work Area of their host viewport.
/// </summary>
public unsafe partial struct ImGuiViewport
{
    /// <summary>
    /// Unique identifier for the viewport
    /// </summary>
    public uint ID;
    /// <summary>
    /// See ImGuiViewportFlags_
    /// </summary>
    public ImGuiViewportFlags Flags;
    /// <summary>
    /// Main Area: Position of the viewport (Dear ImGui coordinates are the same as OS desktop/native coordinates)
    /// </summary>
    public System.Numerics.Vector2 Pos;
    /// <summary>
    /// Main Area: Size of the viewport.
    /// </summary>
    public System.Numerics.Vector2 Size;
    /// <summary>
    /// Density of the viewport for Retina display (always 1,1 on Windows, may be 2,2 etc on macOS/iOS). This will affect font rasterizer density.
    /// </summary>
    public System.Numerics.Vector2 FramebufferScale;
    /// <summary>
    /// Work Area: Position of the viewport minus task bars, menus bars, status bars (&gt;= Pos)
    /// </summary>
    public System.Numerics.Vector2 WorkPos;
    /// <summary>
    /// Work Area: Size of the viewport minus task bars, menu bars, status bars (&lt;= Size)
    /// </summary>
    public System.Numerics.Vector2 WorkSize;
    /// <summary>
    /// <para>Platform/Backend Dependent Data</para>
    /// void* to hold higher-level, platform window handle (e.g. HWND, GLFWWindow*, SDL_Window*)
    /// </summary>
    public IntPtr PlatformHandle;
    /// <summary>
    /// void* to hold lower-level, platform-native window handle (under Win32 this is expected to be a HWND, unused for other platforms)
    /// </summary>
    public IntPtr PlatformHandleRaw;
}
