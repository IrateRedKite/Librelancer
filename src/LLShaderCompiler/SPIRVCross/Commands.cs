// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Buffers;
using System.Runtime.InteropServices;
using System.Text;


namespace LLShaderCompiler.SPIRVCross;

unsafe partial class Spvc
{
	const string LIB = "spirv-cross-c-shared";
	
	ref struct CStr
	{
	    private byte[] poolArray;
	    private Span<byte> bytes;
	    private Span<byte> utf8z;
	    public CStr(Span<byte> initialBuffer, ReadOnlySpan<char> value)
	    {
	        poolArray = null;
	        bytes = initialBuffer;
	        int maxSize = Encoding.UTF8.GetMaxByteCount(value.Length) + 1;
	        if (bytes.Length < maxSize) {
	            poolArray = ArrayPool<byte>.Shared.Rent(maxSize);
	            bytes = new Span<byte>(poolArray);
	        }
	        int byteCount = Encoding.UTF8.GetBytes(value, bytes);
	        bytes[byteCount] = 0;
	        utf8z = bytes.Slice(0, byteCount + 1);
	    }
	
	    public Span<byte> Bytes() => utf8z;
	
	    public void Dispose()
	    {
	        byte[] toReturn = poolArray;
	        if (toReturn != null)
	        {
	            poolArray = null;
	            ArrayPool<byte>.Shared.Return(toReturn);
	        }
	    }
	}
	
	[LibraryImport(LIB, EntryPoint="spvc_get_version")]
	private static partial void _spvc_get_version(uint* major, uint* minor, uint* patch);
	public static void get_version(uint* major, uint* minor, uint* patch)
	{
		_spvc_get_version(major, minor, patch);
	}

	[LibraryImport(LIB, EntryPoint="spvc_get_commit_revision_and_timestamp")]
	private static partial IntPtr _spvc_get_commit_revision_and_timestamp();
	public static string get_commit_revision_and_timestamp()
	{
		return Marshal.PtrToStringUTF8(_spvc_get_commit_revision_and_timestamp());
	}

	[LibraryImport(LIB, EntryPoint="spvc_msl_vertex_attribute_init")]
	private static partial void _spvc_msl_vertex_attribute_init(spvc_msl_vertex_attribute* attr);
	public static void msl_vertex_attribute_init(spvc_msl_vertex_attribute* attr)
	{
		_spvc_msl_vertex_attribute_init(attr);
	}

	[LibraryImport(LIB, EntryPoint="spvc_msl_shader_interface_var_init")]
	private static partial void _spvc_msl_shader_interface_var_init(spvc_msl_shader_interface_var* var);
	public static void msl_shader_interface_var_init(spvc_msl_shader_interface_var* var)
	{
		_spvc_msl_shader_interface_var_init(var);
	}

	[LibraryImport(LIB, EntryPoint="spvc_msl_shader_input_init")]
	private static partial void _spvc_msl_shader_input_init(spvc_msl_shader_interface_var* input);
	public static void msl_shader_input_init(spvc_msl_shader_interface_var* input)
	{
		_spvc_msl_shader_input_init(input);
	}

	[LibraryImport(LIB, EntryPoint="spvc_msl_shader_interface_var_init_2")]
	private static partial void _spvc_msl_shader_interface_var_init_2(spvc_msl_shader_interface_var_2* var);
	public static void msl_shader_interface_var_init_2(spvc_msl_shader_interface_var_2* var)
	{
		_spvc_msl_shader_interface_var_init_2(var);
	}

	[LibraryImport(LIB, EntryPoint="spvc_msl_resource_binding_init")]
	private static partial void _spvc_msl_resource_binding_init(spvc_msl_resource_binding* binding);
	public static void msl_resource_binding_init(spvc_msl_resource_binding* binding)
	{
		_spvc_msl_resource_binding_init(binding);
	}

	[LibraryImport(LIB, EntryPoint="spvc_msl_resource_binding_init_2")]
	private static partial void _spvc_msl_resource_binding_init_2(spvc_msl_resource_binding_2* binding);
	public static void msl_resource_binding_init_2(spvc_msl_resource_binding_2* binding)
	{
		_spvc_msl_resource_binding_init_2(binding);
	}

	[LibraryImport(LIB, EntryPoint="spvc_msl_get_aux_buffer_struct_version")]
	private static partial uint _spvc_msl_get_aux_buffer_struct_version();
	public static uint msl_get_aux_buffer_struct_version()
	{
		return _spvc_msl_get_aux_buffer_struct_version();
	}

	[LibraryImport(LIB, EntryPoint="spvc_msl_constexpr_sampler_init")]
	private static partial void _spvc_msl_constexpr_sampler_init(spvc_msl_constexpr_sampler* sampler);
	public static void msl_constexpr_sampler_init(spvc_msl_constexpr_sampler* sampler)
	{
		_spvc_msl_constexpr_sampler_init(sampler);
	}

	[LibraryImport(LIB, EntryPoint="spvc_msl_sampler_ycbcr_conversion_init")]
	private static partial void _spvc_msl_sampler_ycbcr_conversion_init(spvc_msl_sampler_ycbcr_conversion* conv);
	public static void msl_sampler_ycbcr_conversion_init(spvc_msl_sampler_ycbcr_conversion* conv)
	{
		_spvc_msl_sampler_ycbcr_conversion_init(conv);
	}

	[LibraryImport(LIB, EntryPoint="spvc_hlsl_resource_binding_init")]
	private static partial void _spvc_hlsl_resource_binding_init(spvc_hlsl_resource_binding* binding);
	public static void hlsl_resource_binding_init(spvc_hlsl_resource_binding* binding)
	{
		_spvc_hlsl_resource_binding_init(binding);
	}

	[LibraryImport(LIB, EntryPoint="spvc_context_create")]
	private static partial spvc_result _spvc_context_create(spvc_context* context);
	public static spvc_result context_create(spvc_context* context)
	{
		return _spvc_context_create(context);
	}

	[LibraryImport(LIB, EntryPoint="spvc_context_destroy")]
	private static partial void _spvc_context_destroy(IntPtr context);
	public static void context_destroy(spvc_context context)
	{
		_spvc_context_destroy(context);
	}

	[LibraryImport(LIB, EntryPoint="spvc_context_release_allocations")]
	private static partial void _spvc_context_release_allocations(IntPtr context);
	public static void context_release_allocations(spvc_context context)
	{
		_spvc_context_release_allocations(context);
	}

	[LibraryImport(LIB, EntryPoint="spvc_context_get_last_error_string")]
	private static partial IntPtr _spvc_context_get_last_error_string(IntPtr context);
	public static string context_get_last_error_string(spvc_context context)
	{
		return Marshal.PtrToStringUTF8(_spvc_context_get_last_error_string(context));
	}

	[LibraryImport(LIB, EntryPoint="spvc_context_set_error_callback")]
	private static partial void _spvc_context_set_error_callback(IntPtr context, IntPtr cb, void* userdata);
	public static void context_set_error_callback(spvc_context context, spvc_error_callback cb, void* userdata)
	{
		_spvc_context_set_error_callback(context, cb, userdata);
	}

	[LibraryImport(LIB, EntryPoint="spvc_context_parse_spirv")]
	private static partial spvc_result _spvc_context_parse_spirv(IntPtr context, uint* spirv, nuint word_count, spvc_parsed_ir* parsed_ir);
	public static spvc_result context_parse_spirv(spvc_context context, uint* spirv, nuint word_count, spvc_parsed_ir* parsed_ir)
	{
		return _spvc_context_parse_spirv(context, spirv, word_count, parsed_ir);
	}

	[LibraryImport(LIB, EntryPoint="spvc_context_create_compiler")]
	private static partial spvc_result _spvc_context_create_compiler(IntPtr context, spvc_backend backend, IntPtr parsed_ir, spvc_capture_mode mode, spvc_compiler* compiler);
	public static spvc_result context_create_compiler(spvc_context context, spvc_backend backend, spvc_parsed_ir parsed_ir, spvc_capture_mode mode, spvc_compiler* compiler)
	{
		return _spvc_context_create_compiler(context, backend, parsed_ir, mode, compiler);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_current_id_bound")]
	private static partial uint _spvc_compiler_get_current_id_bound(IntPtr compiler);
	public static uint compiler_get_current_id_bound(spvc_compiler compiler)
	{
		return _spvc_compiler_get_current_id_bound(compiler);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_create_compiler_options")]
	private static partial spvc_result _spvc_compiler_create_compiler_options(IntPtr compiler, spvc_compiler_options* options);
	public static spvc_result compiler_create_compiler_options(spvc_compiler compiler, spvc_compiler_options* options)
	{
		return _spvc_compiler_create_compiler_options(compiler, options);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_options_set_bool")]
	private static partial spvc_result _spvc_compiler_options_set_bool(IntPtr options, spvc_compiler_option option, byte value);
	public static spvc_result compiler_options_set_bool(spvc_compiler_options options, spvc_compiler_option option, spvc_bool value)
	{
		return _spvc_compiler_options_set_bool(options, option, value);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_options_set_uint")]
	private static partial spvc_result _spvc_compiler_options_set_uint(IntPtr options, spvc_compiler_option option, uint value);
	public static spvc_result compiler_options_set_uint(spvc_compiler_options options, spvc_compiler_option option, uint value)
	{
		return _spvc_compiler_options_set_uint(options, option, value);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_install_compiler_options")]
	private static partial spvc_result _spvc_compiler_install_compiler_options(IntPtr compiler, IntPtr options);
	public static spvc_result compiler_install_compiler_options(spvc_compiler compiler, spvc_compiler_options options)
	{
		return _spvc_compiler_install_compiler_options(compiler, options);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_compile")]
	private static partial spvc_result _spvc_compiler_compile(IntPtr compiler, byte** source);
	public static spvc_result compiler_compile(spvc_compiler compiler, byte** source)
	{
		return _spvc_compiler_compile(compiler, source);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_add_header_line")]
	private static partial spvc_result _spvc_compiler_add_header_line(IntPtr compiler, byte* line);
	public static spvc_result compiler_add_header_line(spvc_compiler compiler, string line)
	{
		using var _line_cstr = new CStr(stackalloc byte[256], line);
		fixed(byte* _line_ptr = _line_cstr.Bytes())
		{
			return _spvc_compiler_add_header_line(compiler, _line_ptr);
		}
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_require_extension")]
	private static partial spvc_result _spvc_compiler_require_extension(IntPtr compiler, byte* ext);
	public static spvc_result compiler_require_extension(spvc_compiler compiler, string ext)
	{
		using var _ext_cstr = new CStr(stackalloc byte[256], ext);
		fixed(byte* _ext_ptr = _ext_cstr.Bytes())
		{
			return _spvc_compiler_require_extension(compiler, _ext_ptr);
		}
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_num_required_extensions")]
	private static partial nuint _spvc_compiler_get_num_required_extensions(IntPtr compiler);
	public static nuint compiler_get_num_required_extensions(spvc_compiler compiler)
	{
		return _spvc_compiler_get_num_required_extensions(compiler);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_required_extension")]
	private static partial IntPtr _spvc_compiler_get_required_extension(IntPtr compiler, nuint index);
	public static string compiler_get_required_extension(spvc_compiler compiler, nuint index)
	{
		return Marshal.PtrToStringUTF8(_spvc_compiler_get_required_extension(compiler, index));
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_flatten_buffer_block")]
	private static partial spvc_result _spvc_compiler_flatten_buffer_block(IntPtr compiler, uint id);
	public static spvc_result compiler_flatten_buffer_block(spvc_compiler compiler, spvc_variable_id id)
	{
		return _spvc_compiler_flatten_buffer_block(compiler, id);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_variable_is_depth_or_compare")]
	private static partial byte _spvc_compiler_variable_is_depth_or_compare(IntPtr compiler, uint id);
	public static spvc_bool compiler_variable_is_depth_or_compare(spvc_compiler compiler, spvc_variable_id id)
	{
		return _spvc_compiler_variable_is_depth_or_compare(compiler, id);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_mask_stage_output_by_location")]
	private static partial spvc_result _spvc_compiler_mask_stage_output_by_location(IntPtr compiler, uint location, uint component);
	public static spvc_result compiler_mask_stage_output_by_location(spvc_compiler compiler, uint location, uint component)
	{
		return _spvc_compiler_mask_stage_output_by_location(compiler, location, component);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_mask_stage_output_by_builtin")]
	private static partial spvc_result _spvc_compiler_mask_stage_output_by_builtin(IntPtr compiler, SpvBuiltIn builtin);
	public static spvc_result compiler_mask_stage_output_by_builtin(spvc_compiler compiler, SpvBuiltIn builtin)
	{
		return _spvc_compiler_mask_stage_output_by_builtin(compiler, builtin);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_hlsl_set_root_constants_layout")]
	private static partial spvc_result _spvc_compiler_hlsl_set_root_constants_layout(IntPtr compiler, spvc_hlsl_root_constants* constant_info, nuint count);
	public static spvc_result compiler_hlsl_set_root_constants_layout(spvc_compiler compiler, spvc_hlsl_root_constants* constant_info, nuint count)
	{
		return _spvc_compiler_hlsl_set_root_constants_layout(compiler, constant_info, count);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_hlsl_add_vertex_attribute_remap")]
	private static partial spvc_result _spvc_compiler_hlsl_add_vertex_attribute_remap(IntPtr compiler, spvc_hlsl_vertex_attribute_remap* remap, nuint remaps);
	public static spvc_result compiler_hlsl_add_vertex_attribute_remap(spvc_compiler compiler, spvc_hlsl_vertex_attribute_remap* remap, nuint remaps)
	{
		return _spvc_compiler_hlsl_add_vertex_attribute_remap(compiler, remap, remaps);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_hlsl_remap_num_workgroups_builtin")]
	private static partial uint _spvc_compiler_hlsl_remap_num_workgroups_builtin(IntPtr compiler);
	public static spvc_variable_id compiler_hlsl_remap_num_workgroups_builtin(spvc_compiler compiler)
	{
		return _spvc_compiler_hlsl_remap_num_workgroups_builtin(compiler);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_hlsl_set_resource_binding_flags")]
	private static partial spvc_result _spvc_compiler_hlsl_set_resource_binding_flags(IntPtr compiler, uint flags);
	public static spvc_result compiler_hlsl_set_resource_binding_flags(spvc_compiler compiler, spvc_hlsl_binding_flags flags)
	{
		return _spvc_compiler_hlsl_set_resource_binding_flags(compiler, flags);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_hlsl_add_resource_binding")]
	private static partial spvc_result _spvc_compiler_hlsl_add_resource_binding(IntPtr compiler, spvc_hlsl_resource_binding* binding);
	public static spvc_result compiler_hlsl_add_resource_binding(spvc_compiler compiler, spvc_hlsl_resource_binding* binding)
	{
		return _spvc_compiler_hlsl_add_resource_binding(compiler, binding);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_hlsl_is_resource_used")]
	private static partial byte _spvc_compiler_hlsl_is_resource_used(IntPtr compiler, SpvExecutionModel model, uint set, uint binding);
	public static spvc_bool compiler_hlsl_is_resource_used(spvc_compiler compiler, SpvExecutionModel model, uint set, uint binding)
	{
		return _spvc_compiler_hlsl_is_resource_used(compiler, model, set, binding);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_is_rasterization_disabled")]
	private static partial byte _spvc_compiler_msl_is_rasterization_disabled(IntPtr compiler);
	public static spvc_bool compiler_msl_is_rasterization_disabled(spvc_compiler compiler)
	{
		return _spvc_compiler_msl_is_rasterization_disabled(compiler);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_needs_aux_buffer")]
	private static partial byte _spvc_compiler_msl_needs_aux_buffer(IntPtr compiler);
	public static spvc_bool compiler_msl_needs_aux_buffer(spvc_compiler compiler)
	{
		return _spvc_compiler_msl_needs_aux_buffer(compiler);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_needs_swizzle_buffer")]
	private static partial byte _spvc_compiler_msl_needs_swizzle_buffer(IntPtr compiler);
	public static spvc_bool compiler_msl_needs_swizzle_buffer(spvc_compiler compiler)
	{
		return _spvc_compiler_msl_needs_swizzle_buffer(compiler);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_needs_buffer_size_buffer")]
	private static partial byte _spvc_compiler_msl_needs_buffer_size_buffer(IntPtr compiler);
	public static spvc_bool compiler_msl_needs_buffer_size_buffer(spvc_compiler compiler)
	{
		return _spvc_compiler_msl_needs_buffer_size_buffer(compiler);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_needs_output_buffer")]
	private static partial byte _spvc_compiler_msl_needs_output_buffer(IntPtr compiler);
	public static spvc_bool compiler_msl_needs_output_buffer(spvc_compiler compiler)
	{
		return _spvc_compiler_msl_needs_output_buffer(compiler);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_needs_patch_output_buffer")]
	private static partial byte _spvc_compiler_msl_needs_patch_output_buffer(IntPtr compiler);
	public static spvc_bool compiler_msl_needs_patch_output_buffer(spvc_compiler compiler)
	{
		return _spvc_compiler_msl_needs_patch_output_buffer(compiler);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_needs_input_threadgroup_mem")]
	private static partial byte _spvc_compiler_msl_needs_input_threadgroup_mem(IntPtr compiler);
	public static spvc_bool compiler_msl_needs_input_threadgroup_mem(spvc_compiler compiler)
	{
		return _spvc_compiler_msl_needs_input_threadgroup_mem(compiler);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_add_vertex_attribute")]
	private static partial spvc_result _spvc_compiler_msl_add_vertex_attribute(IntPtr compiler, spvc_msl_vertex_attribute* attrs);
	public static spvc_result compiler_msl_add_vertex_attribute(spvc_compiler compiler, spvc_msl_vertex_attribute* attrs)
	{
		return _spvc_compiler_msl_add_vertex_attribute(compiler, attrs);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_add_resource_binding")]
	private static partial spvc_result _spvc_compiler_msl_add_resource_binding(IntPtr compiler, spvc_msl_resource_binding* binding);
	public static spvc_result compiler_msl_add_resource_binding(spvc_compiler compiler, spvc_msl_resource_binding* binding)
	{
		return _spvc_compiler_msl_add_resource_binding(compiler, binding);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_add_resource_binding_2")]
	private static partial spvc_result _spvc_compiler_msl_add_resource_binding_2(IntPtr compiler, spvc_msl_resource_binding_2* binding);
	public static spvc_result compiler_msl_add_resource_binding_2(spvc_compiler compiler, spvc_msl_resource_binding_2* binding)
	{
		return _spvc_compiler_msl_add_resource_binding_2(compiler, binding);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_add_shader_input")]
	private static partial spvc_result _spvc_compiler_msl_add_shader_input(IntPtr compiler, spvc_msl_shader_interface_var* input);
	public static spvc_result compiler_msl_add_shader_input(spvc_compiler compiler, spvc_msl_shader_interface_var* input)
	{
		return _spvc_compiler_msl_add_shader_input(compiler, input);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_add_shader_input_2")]
	private static partial spvc_result _spvc_compiler_msl_add_shader_input_2(IntPtr compiler, spvc_msl_shader_interface_var_2* input);
	public static spvc_result compiler_msl_add_shader_input_2(spvc_compiler compiler, spvc_msl_shader_interface_var_2* input)
	{
		return _spvc_compiler_msl_add_shader_input_2(compiler, input);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_add_shader_output")]
	private static partial spvc_result _spvc_compiler_msl_add_shader_output(IntPtr compiler, spvc_msl_shader_interface_var* output);
	public static spvc_result compiler_msl_add_shader_output(spvc_compiler compiler, spvc_msl_shader_interface_var* output)
	{
		return _spvc_compiler_msl_add_shader_output(compiler, output);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_add_shader_output_2")]
	private static partial spvc_result _spvc_compiler_msl_add_shader_output_2(IntPtr compiler, spvc_msl_shader_interface_var_2* output);
	public static spvc_result compiler_msl_add_shader_output_2(spvc_compiler compiler, spvc_msl_shader_interface_var_2* output)
	{
		return _spvc_compiler_msl_add_shader_output_2(compiler, output);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_add_discrete_descriptor_set")]
	private static partial spvc_result _spvc_compiler_msl_add_discrete_descriptor_set(IntPtr compiler, uint desc_set);
	public static spvc_result compiler_msl_add_discrete_descriptor_set(spvc_compiler compiler, uint desc_set)
	{
		return _spvc_compiler_msl_add_discrete_descriptor_set(compiler, desc_set);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_set_argument_buffer_device_address_space")]
	private static partial spvc_result _spvc_compiler_msl_set_argument_buffer_device_address_space(IntPtr compiler, uint desc_set, byte device_address);
	public static spvc_result compiler_msl_set_argument_buffer_device_address_space(spvc_compiler compiler, uint desc_set, spvc_bool device_address)
	{
		return _spvc_compiler_msl_set_argument_buffer_device_address_space(compiler, desc_set, device_address);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_is_vertex_attribute_used")]
	private static partial byte _spvc_compiler_msl_is_vertex_attribute_used(IntPtr compiler, uint location);
	public static spvc_bool compiler_msl_is_vertex_attribute_used(spvc_compiler compiler, uint location)
	{
		return _spvc_compiler_msl_is_vertex_attribute_used(compiler, location);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_is_shader_input_used")]
	private static partial byte _spvc_compiler_msl_is_shader_input_used(IntPtr compiler, uint location);
	public static spvc_bool compiler_msl_is_shader_input_used(spvc_compiler compiler, uint location)
	{
		return _spvc_compiler_msl_is_shader_input_used(compiler, location);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_is_shader_output_used")]
	private static partial byte _spvc_compiler_msl_is_shader_output_used(IntPtr compiler, uint location);
	public static spvc_bool compiler_msl_is_shader_output_used(spvc_compiler compiler, uint location)
	{
		return _spvc_compiler_msl_is_shader_output_used(compiler, location);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_is_resource_used")]
	private static partial byte _spvc_compiler_msl_is_resource_used(IntPtr compiler, SpvExecutionModel model, uint set, uint binding);
	public static spvc_bool compiler_msl_is_resource_used(spvc_compiler compiler, SpvExecutionModel model, uint set, uint binding)
	{
		return _spvc_compiler_msl_is_resource_used(compiler, model, set, binding);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_remap_constexpr_sampler")]
	private static partial spvc_result _spvc_compiler_msl_remap_constexpr_sampler(IntPtr compiler, uint id, spvc_msl_constexpr_sampler* sampler);
	public static spvc_result compiler_msl_remap_constexpr_sampler(spvc_compiler compiler, spvc_variable_id id, spvc_msl_constexpr_sampler* sampler)
	{
		return _spvc_compiler_msl_remap_constexpr_sampler(compiler, id, sampler);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_remap_constexpr_sampler_by_binding")]
	private static partial spvc_result _spvc_compiler_msl_remap_constexpr_sampler_by_binding(IntPtr compiler, uint desc_set, uint binding, spvc_msl_constexpr_sampler* sampler);
	public static spvc_result compiler_msl_remap_constexpr_sampler_by_binding(spvc_compiler compiler, uint desc_set, uint binding, spvc_msl_constexpr_sampler* sampler)
	{
		return _spvc_compiler_msl_remap_constexpr_sampler_by_binding(compiler, desc_set, binding, sampler);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_remap_constexpr_sampler_ycbcr")]
	private static partial spvc_result _spvc_compiler_msl_remap_constexpr_sampler_ycbcr(IntPtr compiler, uint id, spvc_msl_constexpr_sampler* sampler, spvc_msl_sampler_ycbcr_conversion* conv);
	public static spvc_result compiler_msl_remap_constexpr_sampler_ycbcr(spvc_compiler compiler, spvc_variable_id id, spvc_msl_constexpr_sampler* sampler, spvc_msl_sampler_ycbcr_conversion* conv)
	{
		return _spvc_compiler_msl_remap_constexpr_sampler_ycbcr(compiler, id, sampler, conv);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr")]
	private static partial spvc_result _spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr(IntPtr compiler, uint desc_set, uint binding, spvc_msl_constexpr_sampler* sampler, spvc_msl_sampler_ycbcr_conversion* conv);
	public static spvc_result compiler_msl_remap_constexpr_sampler_by_binding_ycbcr(spvc_compiler compiler, uint desc_set, uint binding, spvc_msl_constexpr_sampler* sampler, spvc_msl_sampler_ycbcr_conversion* conv)
	{
		return _spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr(compiler, desc_set, binding, sampler, conv);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_set_fragment_output_components")]
	private static partial spvc_result _spvc_compiler_msl_set_fragment_output_components(IntPtr compiler, uint location, uint components);
	public static spvc_result compiler_msl_set_fragment_output_components(spvc_compiler compiler, uint location, uint components)
	{
		return _spvc_compiler_msl_set_fragment_output_components(compiler, location, components);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_get_automatic_resource_binding")]
	private static partial uint _spvc_compiler_msl_get_automatic_resource_binding(IntPtr compiler, uint id);
	public static uint compiler_msl_get_automatic_resource_binding(spvc_compiler compiler, spvc_variable_id id)
	{
		return _spvc_compiler_msl_get_automatic_resource_binding(compiler, id);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_get_automatic_resource_binding_secondary")]
	private static partial uint _spvc_compiler_msl_get_automatic_resource_binding_secondary(IntPtr compiler, uint id);
	public static uint compiler_msl_get_automatic_resource_binding_secondary(spvc_compiler compiler, spvc_variable_id id)
	{
		return _spvc_compiler_msl_get_automatic_resource_binding_secondary(compiler, id);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_add_dynamic_buffer")]
	private static partial spvc_result _spvc_compiler_msl_add_dynamic_buffer(IntPtr compiler, uint desc_set, uint binding, uint index);
	public static spvc_result compiler_msl_add_dynamic_buffer(spvc_compiler compiler, uint desc_set, uint binding, uint index)
	{
		return _spvc_compiler_msl_add_dynamic_buffer(compiler, desc_set, binding, index);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_add_inline_uniform_block")]
	private static partial spvc_result _spvc_compiler_msl_add_inline_uniform_block(IntPtr compiler, uint desc_set, uint binding);
	public static spvc_result compiler_msl_add_inline_uniform_block(spvc_compiler compiler, uint desc_set, uint binding)
	{
		return _spvc_compiler_msl_add_inline_uniform_block(compiler, desc_set, binding);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_set_combined_sampler_suffix")]
	private static partial spvc_result _spvc_compiler_msl_set_combined_sampler_suffix(IntPtr compiler, byte* suffix);
	public static spvc_result compiler_msl_set_combined_sampler_suffix(spvc_compiler compiler, string suffix)
	{
		using var _suffix_cstr = new CStr(stackalloc byte[256], suffix);
		fixed(byte* _suffix_ptr = _suffix_cstr.Bytes())
		{
			return _spvc_compiler_msl_set_combined_sampler_suffix(compiler, _suffix_ptr);
		}
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_msl_get_combined_sampler_suffix")]
	private static partial IntPtr _spvc_compiler_msl_get_combined_sampler_suffix(IntPtr compiler);
	public static string compiler_msl_get_combined_sampler_suffix(spvc_compiler compiler)
	{
		return Marshal.PtrToStringUTF8(_spvc_compiler_msl_get_combined_sampler_suffix(compiler));
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_active_interface_variables")]
	private static partial spvc_result _spvc_compiler_get_active_interface_variables(IntPtr compiler, spvc_set* set);
	public static spvc_result compiler_get_active_interface_variables(spvc_compiler compiler, spvc_set* set)
	{
		return _spvc_compiler_get_active_interface_variables(compiler, set);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_set_enabled_interface_variables")]
	private static partial spvc_result _spvc_compiler_set_enabled_interface_variables(IntPtr compiler, IntPtr set);
	public static spvc_result compiler_set_enabled_interface_variables(spvc_compiler compiler, spvc_set set)
	{
		return _spvc_compiler_set_enabled_interface_variables(compiler, set);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_create_shader_resources")]
	private static partial spvc_result _spvc_compiler_create_shader_resources(IntPtr compiler, spvc_resources* resources);
	public static spvc_result compiler_create_shader_resources(spvc_compiler compiler, spvc_resources* resources)
	{
		return _spvc_compiler_create_shader_resources(compiler, resources);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_create_shader_resources_for_active_variables")]
	private static partial spvc_result _spvc_compiler_create_shader_resources_for_active_variables(IntPtr compiler, spvc_resources* resources, IntPtr active);
	public static spvc_result compiler_create_shader_resources_for_active_variables(spvc_compiler compiler, spvc_resources* resources, spvc_set active)
	{
		return _spvc_compiler_create_shader_resources_for_active_variables(compiler, resources, active);
	}

	[LibraryImport(LIB, EntryPoint="spvc_resources_get_resource_list_for_type")]
	private static partial spvc_result _spvc_resources_get_resource_list_for_type(IntPtr resources, spvc_resource_type type, spvc_reflected_resource** resource_list, nuint* resource_size);
	public static spvc_result resources_get_resource_list_for_type(spvc_resources resources, spvc_resource_type type, spvc_reflected_resource** resource_list, nuint* resource_size)
	{
		return _spvc_resources_get_resource_list_for_type(resources, type, resource_list, resource_size);
	}

	[LibraryImport(LIB, EntryPoint="spvc_resources_get_builtin_resource_list_for_type")]
	private static partial spvc_result _spvc_resources_get_builtin_resource_list_for_type(IntPtr resources, spvc_builtin_resource_type type, spvc_reflected_builtin_resource** resource_list, nuint* resource_size);
	public static spvc_result resources_get_builtin_resource_list_for_type(spvc_resources resources, spvc_builtin_resource_type type, spvc_reflected_builtin_resource** resource_list, nuint* resource_size)
	{
		return _spvc_resources_get_builtin_resource_list_for_type(resources, type, resource_list, resource_size);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_set_decoration")]
	private static partial void _spvc_compiler_set_decoration(IntPtr compiler, uint id, SpvDecoration decoration, uint argument);
	public static void compiler_set_decoration(spvc_compiler compiler, uint id, SpvDecoration decoration, uint argument)
	{
		_spvc_compiler_set_decoration(compiler, id, decoration, argument);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_set_decoration_string")]
	private static partial void _spvc_compiler_set_decoration_string(IntPtr compiler, uint id, SpvDecoration decoration, byte* argument);
	public static void compiler_set_decoration_string(spvc_compiler compiler, uint id, SpvDecoration decoration, string argument)
	{
		using var _argument_cstr = new CStr(stackalloc byte[256], argument);
		fixed(byte* _argument_ptr = _argument_cstr.Bytes())
		{
			_spvc_compiler_set_decoration_string(compiler, id, decoration, _argument_ptr);
		}
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_set_name")]
	private static partial void _spvc_compiler_set_name(IntPtr compiler, uint id, byte* argument);
	public static void compiler_set_name(spvc_compiler compiler, uint id, string argument)
	{
		using var _argument_cstr = new CStr(stackalloc byte[256], argument);
		fixed(byte* _argument_ptr = _argument_cstr.Bytes())
		{
			_spvc_compiler_set_name(compiler, id, _argument_ptr);
		}
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_set_member_decoration")]
	private static partial void _spvc_compiler_set_member_decoration(IntPtr compiler, uint id, uint member_index, SpvDecoration decoration, uint argument);
	public static void compiler_set_member_decoration(spvc_compiler compiler, spvc_type_id id, uint member_index, SpvDecoration decoration, uint argument)
	{
		_spvc_compiler_set_member_decoration(compiler, id, member_index, decoration, argument);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_set_member_decoration_string")]
	private static partial void _spvc_compiler_set_member_decoration_string(IntPtr compiler, uint id, uint member_index, SpvDecoration decoration, byte* argument);
	public static void compiler_set_member_decoration_string(spvc_compiler compiler, spvc_type_id id, uint member_index, SpvDecoration decoration, string argument)
	{
		using var _argument_cstr = new CStr(stackalloc byte[256], argument);
		fixed(byte* _argument_ptr = _argument_cstr.Bytes())
		{
			_spvc_compiler_set_member_decoration_string(compiler, id, member_index, decoration, _argument_ptr);
		}
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_set_member_name")]
	private static partial void _spvc_compiler_set_member_name(IntPtr compiler, uint id, uint member_index, byte* argument);
	public static void compiler_set_member_name(spvc_compiler compiler, spvc_type_id id, uint member_index, string argument)
	{
		using var _argument_cstr = new CStr(stackalloc byte[256], argument);
		fixed(byte* _argument_ptr = _argument_cstr.Bytes())
		{
			_spvc_compiler_set_member_name(compiler, id, member_index, _argument_ptr);
		}
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_unset_decoration")]
	private static partial void _spvc_compiler_unset_decoration(IntPtr compiler, uint id, SpvDecoration decoration);
	public static void compiler_unset_decoration(spvc_compiler compiler, uint id, SpvDecoration decoration)
	{
		_spvc_compiler_unset_decoration(compiler, id, decoration);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_unset_member_decoration")]
	private static partial void _spvc_compiler_unset_member_decoration(IntPtr compiler, uint id, uint member_index, SpvDecoration decoration);
	public static void compiler_unset_member_decoration(spvc_compiler compiler, spvc_type_id id, uint member_index, SpvDecoration decoration)
	{
		_spvc_compiler_unset_member_decoration(compiler, id, member_index, decoration);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_has_decoration")]
	private static partial byte _spvc_compiler_has_decoration(IntPtr compiler, uint id, SpvDecoration decoration);
	public static spvc_bool compiler_has_decoration(spvc_compiler compiler, uint id, SpvDecoration decoration)
	{
		return _spvc_compiler_has_decoration(compiler, id, decoration);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_has_member_decoration")]
	private static partial byte _spvc_compiler_has_member_decoration(IntPtr compiler, uint id, uint member_index, SpvDecoration decoration);
	public static spvc_bool compiler_has_member_decoration(spvc_compiler compiler, spvc_type_id id, uint member_index, SpvDecoration decoration)
	{
		return _spvc_compiler_has_member_decoration(compiler, id, member_index, decoration);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_name")]
	private static partial IntPtr _spvc_compiler_get_name(IntPtr compiler, uint id);
	public static string compiler_get_name(spvc_compiler compiler, uint id)
	{
		return Marshal.PtrToStringUTF8(_spvc_compiler_get_name(compiler, id));
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_decoration")]
	private static partial uint _spvc_compiler_get_decoration(IntPtr compiler, uint id, SpvDecoration decoration);
	public static uint compiler_get_decoration(spvc_compiler compiler, uint id, SpvDecoration decoration)
	{
		return _spvc_compiler_get_decoration(compiler, id, decoration);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_decoration_string")]
	private static partial IntPtr _spvc_compiler_get_decoration_string(IntPtr compiler, uint id, SpvDecoration decoration);
	public static string compiler_get_decoration_string(spvc_compiler compiler, uint id, SpvDecoration decoration)
	{
		return Marshal.PtrToStringUTF8(_spvc_compiler_get_decoration_string(compiler, id, decoration));
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_member_decoration")]
	private static partial uint _spvc_compiler_get_member_decoration(IntPtr compiler, uint id, uint member_index, SpvDecoration decoration);
	public static uint compiler_get_member_decoration(spvc_compiler compiler, spvc_type_id id, uint member_index, SpvDecoration decoration)
	{
		return _spvc_compiler_get_member_decoration(compiler, id, member_index, decoration);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_member_decoration_string")]
	private static partial IntPtr _spvc_compiler_get_member_decoration_string(IntPtr compiler, uint id, uint member_index, SpvDecoration decoration);
	public static string compiler_get_member_decoration_string(spvc_compiler compiler, spvc_type_id id, uint member_index, SpvDecoration decoration)
	{
		return Marshal.PtrToStringUTF8(_spvc_compiler_get_member_decoration_string(compiler, id, member_index, decoration));
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_member_name")]
	private static partial IntPtr _spvc_compiler_get_member_name(IntPtr compiler, uint id, uint member_index);
	public static string compiler_get_member_name(spvc_compiler compiler, spvc_type_id id, uint member_index)
	{
		return Marshal.PtrToStringUTF8(_spvc_compiler_get_member_name(compiler, id, member_index));
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_entry_points")]
	private static partial spvc_result _spvc_compiler_get_entry_points(IntPtr compiler, spvc_entry_point** entry_points, nuint* num_entry_points);
	public static spvc_result compiler_get_entry_points(spvc_compiler compiler, spvc_entry_point** entry_points, nuint* num_entry_points)
	{
		return _spvc_compiler_get_entry_points(compiler, entry_points, num_entry_points);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_set_entry_point")]
	private static partial spvc_result _spvc_compiler_set_entry_point(IntPtr compiler, byte* name, SpvExecutionModel model);
	public static spvc_result compiler_set_entry_point(spvc_compiler compiler, string name, SpvExecutionModel model)
	{
		using var _name_cstr = new CStr(stackalloc byte[256], name);
		fixed(byte* _name_ptr = _name_cstr.Bytes())
		{
			return _spvc_compiler_set_entry_point(compiler, _name_ptr, model);
		}
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_rename_entry_point")]
	private static partial spvc_result _spvc_compiler_rename_entry_point(IntPtr compiler, byte* old_name, byte* new_name, SpvExecutionModel model);
	public static spvc_result compiler_rename_entry_point(spvc_compiler compiler, string old_name, string new_name, SpvExecutionModel model)
	{
		using var _old_name_cstr = new CStr(stackalloc byte[256], old_name);
		using var _new_name_cstr = new CStr(stackalloc byte[256], new_name);
		fixed(byte* _old_name_ptr = _old_name_cstr.Bytes())
		{
			fixed(byte* _new_name_ptr = _new_name_cstr.Bytes())
			{
				return _spvc_compiler_rename_entry_point(compiler, _old_name_ptr, _new_name_ptr, model);
			}
		}
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_cleansed_entry_point_name")]
	private static partial IntPtr _spvc_compiler_get_cleansed_entry_point_name(IntPtr compiler, byte* name, SpvExecutionModel model);
	public static string compiler_get_cleansed_entry_point_name(spvc_compiler compiler, string name, SpvExecutionModel model)
	{
		using var _name_cstr = new CStr(stackalloc byte[256], name);
		fixed(byte* _name_ptr = _name_cstr.Bytes())
		{
			return Marshal.PtrToStringUTF8(_spvc_compiler_get_cleansed_entry_point_name(compiler, _name_ptr, model));
		}
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_set_execution_mode")]
	private static partial void _spvc_compiler_set_execution_mode(IntPtr compiler, SpvExecutionMode mode);
	public static void compiler_set_execution_mode(spvc_compiler compiler, SpvExecutionMode mode)
	{
		_spvc_compiler_set_execution_mode(compiler, mode);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_unset_execution_mode")]
	private static partial void _spvc_compiler_unset_execution_mode(IntPtr compiler, SpvExecutionMode mode);
	public static void compiler_unset_execution_mode(spvc_compiler compiler, SpvExecutionMode mode)
	{
		_spvc_compiler_unset_execution_mode(compiler, mode);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_set_execution_mode_with_arguments")]
	private static partial void _spvc_compiler_set_execution_mode_with_arguments(IntPtr compiler, SpvExecutionMode mode, uint arg0, uint arg1, uint arg2);
	public static void compiler_set_execution_mode_with_arguments(spvc_compiler compiler, SpvExecutionMode mode, uint arg0, uint arg1, uint arg2)
	{
		_spvc_compiler_set_execution_mode_with_arguments(compiler, mode, arg0, arg1, arg2);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_execution_modes")]
	private static partial spvc_result _spvc_compiler_get_execution_modes(IntPtr compiler, SpvExecutionMode** modes, nuint* num_modes);
	public static spvc_result compiler_get_execution_modes(spvc_compiler compiler, SpvExecutionMode** modes, nuint* num_modes)
	{
		return _spvc_compiler_get_execution_modes(compiler, modes, num_modes);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_execution_mode_argument")]
	private static partial uint _spvc_compiler_get_execution_mode_argument(IntPtr compiler, SpvExecutionMode mode);
	public static uint compiler_get_execution_mode_argument(spvc_compiler compiler, SpvExecutionMode mode)
	{
		return _spvc_compiler_get_execution_mode_argument(compiler, mode);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_execution_mode_argument_by_index")]
	private static partial uint _spvc_compiler_get_execution_mode_argument_by_index(IntPtr compiler, SpvExecutionMode mode, uint index);
	public static uint compiler_get_execution_mode_argument_by_index(spvc_compiler compiler, SpvExecutionMode mode, uint index)
	{
		return _spvc_compiler_get_execution_mode_argument_by_index(compiler, mode, index);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_execution_model")]
	private static partial SpvExecutionModel _spvc_compiler_get_execution_model(IntPtr compiler);
	public static SpvExecutionModel compiler_get_execution_model(spvc_compiler compiler)
	{
		return _spvc_compiler_get_execution_model(compiler);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_update_active_builtins")]
	private static partial void _spvc_compiler_update_active_builtins(IntPtr compiler);
	public static void compiler_update_active_builtins(spvc_compiler compiler)
	{
		_spvc_compiler_update_active_builtins(compiler);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_has_active_builtin")]
	private static partial byte _spvc_compiler_has_active_builtin(IntPtr compiler, SpvBuiltIn builtin, SpvStorageClass storage);
	public static spvc_bool compiler_has_active_builtin(spvc_compiler compiler, SpvBuiltIn builtin, SpvStorageClass storage)
	{
		return _spvc_compiler_has_active_builtin(compiler, builtin, storage);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_type_handle")]
	private static partial IntPtr _spvc_compiler_get_type_handle(IntPtr compiler, uint id);
	public static spvc_type compiler_get_type_handle(spvc_compiler compiler, spvc_type_id id)
	{
		return _spvc_compiler_get_type_handle(compiler, id);
	}

	[LibraryImport(LIB, EntryPoint="spvc_type_get_base_type_id")]
	private static partial uint _spvc_type_get_base_type_id(IntPtr type);
	public static spvc_type_id type_get_base_type_id(spvc_type type)
	{
		return _spvc_type_get_base_type_id(type);
	}

	[LibraryImport(LIB, EntryPoint="spvc_type_get_basetype")]
	private static partial spvc_basetype _spvc_type_get_basetype(IntPtr type);
	public static spvc_basetype type_get_basetype(spvc_type type)
	{
		return _spvc_type_get_basetype(type);
	}

	[LibraryImport(LIB, EntryPoint="spvc_type_get_bit_width")]
	private static partial uint _spvc_type_get_bit_width(IntPtr type);
	public static uint type_get_bit_width(spvc_type type)
	{
		return _spvc_type_get_bit_width(type);
	}

	[LibraryImport(LIB, EntryPoint="spvc_type_get_vector_size")]
	private static partial uint _spvc_type_get_vector_size(IntPtr type);
	public static uint type_get_vector_size(spvc_type type)
	{
		return _spvc_type_get_vector_size(type);
	}

	[LibraryImport(LIB, EntryPoint="spvc_type_get_columns")]
	private static partial uint _spvc_type_get_columns(IntPtr type);
	public static uint type_get_columns(spvc_type type)
	{
		return _spvc_type_get_columns(type);
	}

	[LibraryImport(LIB, EntryPoint="spvc_type_get_num_array_dimensions")]
	private static partial uint _spvc_type_get_num_array_dimensions(IntPtr type);
	public static uint type_get_num_array_dimensions(spvc_type type)
	{
		return _spvc_type_get_num_array_dimensions(type);
	}

	[LibraryImport(LIB, EntryPoint="spvc_type_array_dimension_is_literal")]
	private static partial byte _spvc_type_array_dimension_is_literal(IntPtr type, uint dimension);
	public static spvc_bool type_array_dimension_is_literal(spvc_type type, uint dimension)
	{
		return _spvc_type_array_dimension_is_literal(type, dimension);
	}

	[LibraryImport(LIB, EntryPoint="spvc_type_get_array_dimension")]
	private static partial uint _spvc_type_get_array_dimension(IntPtr type, uint dimension);
	public static uint type_get_array_dimension(spvc_type type, uint dimension)
	{
		return _spvc_type_get_array_dimension(type, dimension);
	}

	[LibraryImport(LIB, EntryPoint="spvc_type_get_num_member_types")]
	private static partial uint _spvc_type_get_num_member_types(IntPtr type);
	public static uint type_get_num_member_types(spvc_type type)
	{
		return _spvc_type_get_num_member_types(type);
	}

	[LibraryImport(LIB, EntryPoint="spvc_type_get_member_type")]
	private static partial uint _spvc_type_get_member_type(IntPtr type, uint index);
	public static spvc_type_id type_get_member_type(spvc_type type, uint index)
	{
		return _spvc_type_get_member_type(type, index);
	}

	[LibraryImport(LIB, EntryPoint="spvc_type_get_storage_class")]
	private static partial SpvStorageClass _spvc_type_get_storage_class(IntPtr type);
	public static SpvStorageClass type_get_storage_class(spvc_type type)
	{
		return _spvc_type_get_storage_class(type);
	}

	[LibraryImport(LIB, EntryPoint="spvc_type_get_image_sampled_type")]
	private static partial uint _spvc_type_get_image_sampled_type(IntPtr type);
	public static spvc_type_id type_get_image_sampled_type(spvc_type type)
	{
		return _spvc_type_get_image_sampled_type(type);
	}

	[LibraryImport(LIB, EntryPoint="spvc_type_get_image_dimension")]
	private static partial SpvDim _spvc_type_get_image_dimension(IntPtr type);
	public static SpvDim type_get_image_dimension(spvc_type type)
	{
		return _spvc_type_get_image_dimension(type);
	}

	[LibraryImport(LIB, EntryPoint="spvc_type_get_image_is_depth")]
	private static partial byte _spvc_type_get_image_is_depth(IntPtr type);
	public static spvc_bool type_get_image_is_depth(spvc_type type)
	{
		return _spvc_type_get_image_is_depth(type);
	}

	[LibraryImport(LIB, EntryPoint="spvc_type_get_image_arrayed")]
	private static partial byte _spvc_type_get_image_arrayed(IntPtr type);
	public static spvc_bool type_get_image_arrayed(spvc_type type)
	{
		return _spvc_type_get_image_arrayed(type);
	}

	[LibraryImport(LIB, EntryPoint="spvc_type_get_image_multisampled")]
	private static partial byte _spvc_type_get_image_multisampled(IntPtr type);
	public static spvc_bool type_get_image_multisampled(spvc_type type)
	{
		return _spvc_type_get_image_multisampled(type);
	}

	[LibraryImport(LIB, EntryPoint="spvc_type_get_image_is_storage")]
	private static partial byte _spvc_type_get_image_is_storage(IntPtr type);
	public static spvc_bool type_get_image_is_storage(spvc_type type)
	{
		return _spvc_type_get_image_is_storage(type);
	}

	[LibraryImport(LIB, EntryPoint="spvc_type_get_image_storage_format")]
	private static partial SpvImageFormat _spvc_type_get_image_storage_format(IntPtr type);
	public static SpvImageFormat type_get_image_storage_format(spvc_type type)
	{
		return _spvc_type_get_image_storage_format(type);
	}

	[LibraryImport(LIB, EntryPoint="spvc_type_get_image_access_qualifier")]
	private static partial SpvAccessQualifier _spvc_type_get_image_access_qualifier(IntPtr type);
	public static SpvAccessQualifier type_get_image_access_qualifier(spvc_type type)
	{
		return _spvc_type_get_image_access_qualifier(type);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_declared_struct_size")]
	private static partial spvc_result _spvc_compiler_get_declared_struct_size(IntPtr compiler, IntPtr struct_type, nuint* size);
	public static spvc_result compiler_get_declared_struct_size(spvc_compiler compiler, spvc_type struct_type, nuint* size)
	{
		return _spvc_compiler_get_declared_struct_size(compiler, struct_type, size);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_declared_struct_size_runtime_array")]
	private static partial spvc_result _spvc_compiler_get_declared_struct_size_runtime_array(IntPtr compiler, IntPtr struct_type, nuint array_size, nuint* size);
	public static spvc_result compiler_get_declared_struct_size_runtime_array(spvc_compiler compiler, spvc_type struct_type, nuint array_size, nuint* size)
	{
		return _spvc_compiler_get_declared_struct_size_runtime_array(compiler, struct_type, array_size, size);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_declared_struct_member_size")]
	private static partial spvc_result _spvc_compiler_get_declared_struct_member_size(IntPtr compiler, IntPtr type, uint index, nuint* size);
	public static spvc_result compiler_get_declared_struct_member_size(spvc_compiler compiler, spvc_type type, uint index, nuint* size)
	{
		return _spvc_compiler_get_declared_struct_member_size(compiler, type, index, size);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_type_struct_member_offset")]
	private static partial spvc_result _spvc_compiler_type_struct_member_offset(IntPtr compiler, IntPtr type, uint index, uint* offset);
	public static spvc_result compiler_type_struct_member_offset(spvc_compiler compiler, spvc_type type, uint index, uint* offset)
	{
		return _spvc_compiler_type_struct_member_offset(compiler, type, index, offset);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_type_struct_member_array_stride")]
	private static partial spvc_result _spvc_compiler_type_struct_member_array_stride(IntPtr compiler, IntPtr type, uint index, uint* stride);
	public static spvc_result compiler_type_struct_member_array_stride(spvc_compiler compiler, spvc_type type, uint index, uint* stride)
	{
		return _spvc_compiler_type_struct_member_array_stride(compiler, type, index, stride);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_type_struct_member_matrix_stride")]
	private static partial spvc_result _spvc_compiler_type_struct_member_matrix_stride(IntPtr compiler, IntPtr type, uint index, uint* stride);
	public static spvc_result compiler_type_struct_member_matrix_stride(spvc_compiler compiler, spvc_type type, uint index, uint* stride)
	{
		return _spvc_compiler_type_struct_member_matrix_stride(compiler, type, index, stride);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_build_dummy_sampler_for_combined_images")]
	private static partial spvc_result _spvc_compiler_build_dummy_sampler_for_combined_images(IntPtr compiler, spvc_variable_id* id);
	public static spvc_result compiler_build_dummy_sampler_for_combined_images(spvc_compiler compiler, spvc_variable_id* id)
	{
		return _spvc_compiler_build_dummy_sampler_for_combined_images(compiler, id);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_build_combined_image_samplers")]
	private static partial spvc_result _spvc_compiler_build_combined_image_samplers(IntPtr compiler);
	public static spvc_result compiler_build_combined_image_samplers(spvc_compiler compiler)
	{
		return _spvc_compiler_build_combined_image_samplers(compiler);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_combined_image_samplers")]
	private static partial spvc_result _spvc_compiler_get_combined_image_samplers(IntPtr compiler, spvc_combined_image_sampler** samplers, nuint* num_samplers);
	public static spvc_result compiler_get_combined_image_samplers(spvc_compiler compiler, spvc_combined_image_sampler** samplers, nuint* num_samplers)
	{
		return _spvc_compiler_get_combined_image_samplers(compiler, samplers, num_samplers);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_specialization_constants")]
	private static partial spvc_result _spvc_compiler_get_specialization_constants(IntPtr compiler, spvc_specialization_constant** constants, nuint* num_constants);
	public static spvc_result compiler_get_specialization_constants(spvc_compiler compiler, spvc_specialization_constant** constants, nuint* num_constants)
	{
		return _spvc_compiler_get_specialization_constants(compiler, constants, num_constants);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_constant_handle")]
	private static partial IntPtr _spvc_compiler_get_constant_handle(IntPtr compiler, uint id);
	public static spvc_constant compiler_get_constant_handle(spvc_compiler compiler, spvc_constant_id id)
	{
		return _spvc_compiler_get_constant_handle(compiler, id);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_work_group_size_specialization_constants")]
	private static partial uint _spvc_compiler_get_work_group_size_specialization_constants(IntPtr compiler, spvc_specialization_constant* x, spvc_specialization_constant* y, spvc_specialization_constant* z);
	public static spvc_constant_id compiler_get_work_group_size_specialization_constants(spvc_compiler compiler, spvc_specialization_constant* x, spvc_specialization_constant* y, spvc_specialization_constant* z)
	{
		return _spvc_compiler_get_work_group_size_specialization_constants(compiler, x, y, z);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_active_buffer_ranges")]
	private static partial spvc_result _spvc_compiler_get_active_buffer_ranges(IntPtr compiler, uint id, spvc_buffer_range** ranges, nuint* num_ranges);
	public static spvc_result compiler_get_active_buffer_ranges(spvc_compiler compiler, spvc_variable_id id, spvc_buffer_range** ranges, nuint* num_ranges)
	{
		return _spvc_compiler_get_active_buffer_ranges(compiler, id, ranges, num_ranges);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_get_scalar_fp16")]
	private static partial float _spvc_constant_get_scalar_fp16(IntPtr constant, uint column, uint row);
	public static float constant_get_scalar_fp16(spvc_constant constant, uint column, uint row)
	{
		return _spvc_constant_get_scalar_fp16(constant, column, row);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_get_scalar_fp32")]
	private static partial float _spvc_constant_get_scalar_fp32(IntPtr constant, uint column, uint row);
	public static float constant_get_scalar_fp32(spvc_constant constant, uint column, uint row)
	{
		return _spvc_constant_get_scalar_fp32(constant, column, row);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_get_scalar_fp64")]
	private static partial double _spvc_constant_get_scalar_fp64(IntPtr constant, uint column, uint row);
	public static double constant_get_scalar_fp64(spvc_constant constant, uint column, uint row)
	{
		return _spvc_constant_get_scalar_fp64(constant, column, row);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_get_scalar_u32")]
	private static partial uint _spvc_constant_get_scalar_u32(IntPtr constant, uint column, uint row);
	public static uint constant_get_scalar_u32(spvc_constant constant, uint column, uint row)
	{
		return _spvc_constant_get_scalar_u32(constant, column, row);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_get_scalar_i32")]
	private static partial int _spvc_constant_get_scalar_i32(IntPtr constant, uint column, uint row);
	public static int constant_get_scalar_i32(spvc_constant constant, uint column, uint row)
	{
		return _spvc_constant_get_scalar_i32(constant, column, row);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_get_scalar_u16")]
	private static partial uint _spvc_constant_get_scalar_u16(IntPtr constant, uint column, uint row);
	public static uint constant_get_scalar_u16(spvc_constant constant, uint column, uint row)
	{
		return _spvc_constant_get_scalar_u16(constant, column, row);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_get_scalar_i16")]
	private static partial int _spvc_constant_get_scalar_i16(IntPtr constant, uint column, uint row);
	public static int constant_get_scalar_i16(spvc_constant constant, uint column, uint row)
	{
		return _spvc_constant_get_scalar_i16(constant, column, row);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_get_scalar_u8")]
	private static partial uint _spvc_constant_get_scalar_u8(IntPtr constant, uint column, uint row);
	public static uint constant_get_scalar_u8(spvc_constant constant, uint column, uint row)
	{
		return _spvc_constant_get_scalar_u8(constant, column, row);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_get_scalar_i8")]
	private static partial int _spvc_constant_get_scalar_i8(IntPtr constant, uint column, uint row);
	public static int constant_get_scalar_i8(spvc_constant constant, uint column, uint row)
	{
		return _spvc_constant_get_scalar_i8(constant, column, row);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_get_subconstants")]
	private static partial void _spvc_constant_get_subconstants(IntPtr constant, spvc_constant_id** constituents, nuint* count);
	public static void constant_get_subconstants(spvc_constant constant, spvc_constant_id** constituents, nuint* count)
	{
		_spvc_constant_get_subconstants(constant, constituents, count);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_get_scalar_u64")]
	private static partial ulong _spvc_constant_get_scalar_u64(IntPtr constant, uint column, uint row);
	public static ulong constant_get_scalar_u64(spvc_constant constant, uint column, uint row)
	{
		return _spvc_constant_get_scalar_u64(constant, column, row);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_get_scalar_i64")]
	private static partial long _spvc_constant_get_scalar_i64(IntPtr constant, uint column, uint row);
	public static long constant_get_scalar_i64(spvc_constant constant, uint column, uint row)
	{
		return _spvc_constant_get_scalar_i64(constant, column, row);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_get_type")]
	private static partial uint _spvc_constant_get_type(IntPtr constant);
	public static spvc_type_id constant_get_type(spvc_constant constant)
	{
		return _spvc_constant_get_type(constant);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_set_scalar_fp16")]
	private static partial void _spvc_constant_set_scalar_fp16(IntPtr constant, uint column, uint row, ushort value);
	public static void constant_set_scalar_fp16(spvc_constant constant, uint column, uint row, ushort value)
	{
		_spvc_constant_set_scalar_fp16(constant, column, row, value);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_set_scalar_fp32")]
	private static partial void _spvc_constant_set_scalar_fp32(IntPtr constant, uint column, uint row, float value);
	public static void constant_set_scalar_fp32(spvc_constant constant, uint column, uint row, float value)
	{
		_spvc_constant_set_scalar_fp32(constant, column, row, value);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_set_scalar_fp64")]
	private static partial void _spvc_constant_set_scalar_fp64(IntPtr constant, uint column, uint row, double value);
	public static void constant_set_scalar_fp64(spvc_constant constant, uint column, uint row, double value)
	{
		_spvc_constant_set_scalar_fp64(constant, column, row, value);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_set_scalar_u32")]
	private static partial void _spvc_constant_set_scalar_u32(IntPtr constant, uint column, uint row, uint value);
	public static void constant_set_scalar_u32(spvc_constant constant, uint column, uint row, uint value)
	{
		_spvc_constant_set_scalar_u32(constant, column, row, value);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_set_scalar_i32")]
	private static partial void _spvc_constant_set_scalar_i32(IntPtr constant, uint column, uint row, int value);
	public static void constant_set_scalar_i32(spvc_constant constant, uint column, uint row, int value)
	{
		_spvc_constant_set_scalar_i32(constant, column, row, value);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_set_scalar_u64")]
	private static partial void _spvc_constant_set_scalar_u64(IntPtr constant, uint column, uint row, ulong value);
	public static void constant_set_scalar_u64(spvc_constant constant, uint column, uint row, ulong value)
	{
		_spvc_constant_set_scalar_u64(constant, column, row, value);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_set_scalar_i64")]
	private static partial void _spvc_constant_set_scalar_i64(IntPtr constant, uint column, uint row, long value);
	public static void constant_set_scalar_i64(spvc_constant constant, uint column, uint row, long value)
	{
		_spvc_constant_set_scalar_i64(constant, column, row, value);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_set_scalar_u16")]
	private static partial void _spvc_constant_set_scalar_u16(IntPtr constant, uint column, uint row, ushort value);
	public static void constant_set_scalar_u16(spvc_constant constant, uint column, uint row, ushort value)
	{
		_spvc_constant_set_scalar_u16(constant, column, row, value);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_set_scalar_i16")]
	private static partial void _spvc_constant_set_scalar_i16(IntPtr constant, uint column, uint row, short value);
	public static void constant_set_scalar_i16(spvc_constant constant, uint column, uint row, short value)
	{
		_spvc_constant_set_scalar_i16(constant, column, row, value);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_set_scalar_u8")]
	private static partial void _spvc_constant_set_scalar_u8(IntPtr constant, uint column, uint row, byte value);
	public static void constant_set_scalar_u8(spvc_constant constant, uint column, uint row, byte value)
	{
		_spvc_constant_set_scalar_u8(constant, column, row, value);
	}

	[LibraryImport(LIB, EntryPoint="spvc_constant_set_scalar_i8")]
	private static partial void _spvc_constant_set_scalar_i8(IntPtr constant, uint column, uint row, byte value);
	public static void constant_set_scalar_i8(spvc_constant constant, uint column, uint row, byte value)
	{
		_spvc_constant_set_scalar_i8(constant, column, row, value);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_binary_offset_for_decoration")]
	private static partial byte _spvc_compiler_get_binary_offset_for_decoration(IntPtr compiler, uint id, SpvDecoration decoration, uint* word_offset);
	public static spvc_bool compiler_get_binary_offset_for_decoration(spvc_compiler compiler, spvc_variable_id id, SpvDecoration decoration, uint* word_offset)
	{
		return _spvc_compiler_get_binary_offset_for_decoration(compiler, id, decoration, word_offset);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_buffer_is_hlsl_counter_buffer")]
	private static partial byte _spvc_compiler_buffer_is_hlsl_counter_buffer(IntPtr compiler, uint id);
	public static spvc_bool compiler_buffer_is_hlsl_counter_buffer(spvc_compiler compiler, spvc_variable_id id)
	{
		return _spvc_compiler_buffer_is_hlsl_counter_buffer(compiler, id);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_buffer_get_hlsl_counter_buffer")]
	private static partial byte _spvc_compiler_buffer_get_hlsl_counter_buffer(IntPtr compiler, uint id, spvc_variable_id* counter_id);
	public static spvc_bool compiler_buffer_get_hlsl_counter_buffer(spvc_compiler compiler, spvc_variable_id id, spvc_variable_id* counter_id)
	{
		return _spvc_compiler_buffer_get_hlsl_counter_buffer(compiler, id, counter_id);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_declared_capabilities")]
	private static partial spvc_result _spvc_compiler_get_declared_capabilities(IntPtr compiler, SpvCapability** capabilities, nuint* num_capabilities);
	public static spvc_result compiler_get_declared_capabilities(spvc_compiler compiler, SpvCapability** capabilities, nuint* num_capabilities)
	{
		return _spvc_compiler_get_declared_capabilities(compiler, capabilities, num_capabilities);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_declared_extensions")]
	private static partial spvc_result _spvc_compiler_get_declared_extensions(IntPtr compiler, byte*** extensions, nuint* num_extensions);
	public static spvc_result compiler_get_declared_extensions(spvc_compiler compiler, byte*** extensions, nuint* num_extensions)
	{
		return _spvc_compiler_get_declared_extensions(compiler, extensions, num_extensions);
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_remapped_declared_block_name")]
	private static partial IntPtr _spvc_compiler_get_remapped_declared_block_name(IntPtr compiler, uint id);
	public static string compiler_get_remapped_declared_block_name(spvc_compiler compiler, spvc_variable_id id)
	{
		return Marshal.PtrToStringUTF8(_spvc_compiler_get_remapped_declared_block_name(compiler, id));
	}

	[LibraryImport(LIB, EntryPoint="spvc_compiler_get_buffer_block_decorations")]
	private static partial spvc_result _spvc_compiler_get_buffer_block_decorations(IntPtr compiler, uint id, SpvDecoration** decorations, nuint* num_decorations);
	public static spvc_result compiler_get_buffer_block_decorations(spvc_compiler compiler, spvc_variable_id id, SpvDecoration** decorations, nuint* num_decorations)
	{
		return _spvc_compiler_get_buffer_block_decorations(compiler, id, decorations, num_decorations);
	}

}
