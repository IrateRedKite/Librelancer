// <auto-generated/>
// ReSharper disable InconsistentNaming

using System;
using System.Runtime.CompilerServices;

namespace ImGuiNET
{
    public unsafe struct ImVector<T>
    {
        public readonly int Size;
        public readonly int Capacity;
        public readonly IntPtr Data;

        public ImVector(int size, int capacity, IntPtr data)
        {
            Size = size;
            Capacity = capacity;
            Data = data;
        }

        public ref T this[int index] => ref Unsafe.AsRef<T>((byte*)Data + index * Unsafe.SizeOf<T>());
    }

    public unsafe struct ImPtrVector<T>
    {
        public readonly int Size;
        public readonly int Capacity;
        public readonly IntPtr Data;
        
        public ImPtrVector(int size, int capacity, IntPtr data)
        {
           Size = size;
           Capacity = capacity;
           Data = data;
        }
        
#pragma warning disable CS8500 // This takes the address of, gets the size of, or declares a pointer to a managed type
        public T* this[int index]
        {
            get => (T*)(((IntPtr*)Data)[index]);
            set => ((IntPtr*)Data)[index] = (IntPtr)value;
        }
#pragma warning restore CS8500 // This takes the address of, gets the size of, or declares a pointer to a managed type
    }
}
