using System;
using System.Text;
using System.Xml;

namespace ImGuiBindingsGenerator
{
    public class CodeWriter
    {
        private StringBuilder builder = new StringBuilder();
        private int tabsCount = 0;

        public CodeWriter()
        {
            AppendLine("// <auto-generated/>");
            AppendLine("// ReSharper disable InconsistentNaming");
        }


        public CodeWriter Indent()
        {
            tabsCount++;
            return this;
        }

        public CodeWriter UnIndent()
        {
            tabsCount--;
            return this;
        }

        private bool lineStarted = false;

        void StartLine()
        {
            if (!lineStarted)
            {
                lineStarted = true;
                for (int i = 0; i < tabsCount; i++) builder.Append("    ");
            }
        }

        public struct BlockHandle : IDisposable
        {
            public CodeWriter Writer;
            public BlockHandle(CodeWriter tw)
            {
                Writer = tw;
            }
            public void Dispose()
            {
                Writer.UnIndent().AppendLine("}");
            }
        }

        public BlockHandle Block()
        {
            AppendLine("{").Indent();
            return new BlockHandle(this);
        }

        public CodeWriter AppendEditorHiddenLine()
        {
            StartLine();
            builder.AppendLine("[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]");
            lineStarted = false;
            return this;
        }

        public CodeWriter AppendLine(string line)
        {
            StartLine();
            builder.AppendLine(line);
            lineStarted = false;
            return this;
        }

        public CodeWriter AppendLine()
        {
            builder.AppendLine();
            lineStarted = false;
            return this;
        }

        static string XmlEncode(string value)
        {
            var settings = new XmlWriterSettings 
            {
                ConformanceLevel = ConformanceLevel.Fragment
            };
            var builder = new StringBuilder();
            using (var writer = XmlWriter.Create(builder, settings))
                writer.WriteString(value);
            return builder.ToString();
        }
        
        public void AppendComments(Comments? comments)
        {
            var sb = new StringBuilder();
            if (comments?.Preceding != null)
            {
                foreach (var c in comments.Preceding)
                    sb.AppendLine(c);
            }
            if (comments?.Attached != null)
            {
                sb.AppendLine(comments?.Attached);
            }
            //
            if (sb.Length == 0)
                return;
            // Convert to XML doc string
            var lines = sb.ToString().Split('\n', StringSplitOptions.TrimEntries)
                .Select(x => x.StartsWith("//") ? x.Substring(2) : x)
                .Select(x => x.Trim())
                .Select(XmlEncode)
                .ToArray();
            int max;
            for (max = lines.Length - 1; max >= 0; max--)
            {
                if (!string.IsNullOrWhiteSpace(lines[max]))
                    break;
            }
            if (max >= 0)
            {
                AppendLine("/// <summary>");
                for (int i = 0; i < max; i++)
                {
                    AppendLine($"/// <para>{lines[i]}</para>");
                }
                AppendLine($"/// {lines[max]}");
                AppendLine("/// </summary>");
            }
        }

        public CodeWriter Append(string text)
        {
            StartLine();
            builder.Append(text);
            return this;
        }

        public override string ToString()
        {
            return builder.ToString();
        }
    }
}
